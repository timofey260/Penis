from Drizzle.Runtime import *## Behavior script: startUp#class startUp(LingoBehaviorScript):     def __init__(self):         super().__init__()            def exitframe(self):         self._global.member("editorConfig").importfileinto("editorConfig.txt")        if ((LingoGlobal.op_eq_b(self._global.member("editorConfig").text, LingoGlobal.VOID) or LingoGlobal.op_eq_b(self._global.member("editorConfig").text, "")) or LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(self._global.member("editorConfig").text)[LingoNumber(1)], "Rain World Community Editor; V.0.4.21; Editor configuration file")):             fileco = self._global.new(self._global.xtra("fileio"))            fileco.createfile(LingoGlobal.concat(self._global.the_moviePath,"editorConfig.txt"))            fileco.openfile(LingoGlobal.concat(self._global.the_moviePath,"editorConfig.txt"),LingoNumber(0))            fileco.writestr(self._global.member("baseConfig").text)            fileco.writereturn(LingoSymbol("windows"))            self._global.member("editorConfig").text = self._global.member("baseConfig").text            self._global._movie.go(LingoNumber(1))        self._movieScript.clearlogs()        if ((LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(56))) and LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(48)))) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):             self._global._player.appminimize()        self._global._global.clearglobals()        self._global._movie.exitlock = LingoGlobal.TRUE        self._movieScript.lvlPropOutput = LingoGlobal.FALSE        self._movieScript.initdrinternal()        self._movieScript.gFullRender = LingoNumber(1)        self._movieScript.gViewRender = LingoNumber(1)        self._movieScript.DRLastTL = LingoNumber(1)        self._movieScript.gMassRenderL = LingoList()        self._movieScript.gLOADPATH = LingoList()        self._movieScript.gLevel = LingoPropertyList(LingoSymbol("timelimit"), LingoNumber(4800),LingoSymbol("defaultterrain"), LingoNumber(1),LingoSymbol("maxflies"), LingoNumber(10),LingoSymbol("flyspawnrate"), LingoNumber(50),LingoSymbol("lizards"), LingoList(),LingoSymbol("ambientsounds"), LingoList(),LingoSymbol("music"), "NONE",LingoSymbol("tags"), LingoList(),LingoSymbol("lighttype"), "Static",LingoSymbol("waterdrips"), LingoNumber(1),LingoSymbol("lightrect"), LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1040),LingoNumber(800)),LingoSymbol("matrix"), LingoList())        self._global._movie.window.appearanceoptions.border = LingoSymbol("none")        self._global._movie.window.resizable = LingoGlobal.FALSE        self._movieScript.gLoadedName = "New Project"        self._global.member("level Name").text = "New Project"        self._movieScript.gImgXtra = self._global.xtra("ImgXtra").new()        g = LingoNumber(21)        if LingoGlobal.op_eq_b(g, LingoNumber(2)):             self._movieScript.gSaveProps = LingoList(self._global.bascreeninfo("width"),self._global.bascreeninfo("height"),self._global.bascreeninfo("depth"))            fac = LingoGlobal.op_div(self._movieScript.gSaveProps[LingoNumber(1)].float,self._movieScript.gSaveProps[LingoNumber(2)].float)            screenresolutionpoint = self._global._system.desktoprectlist            self._global.basetdisplay(screenresolutionpoint.loch,screenresolutionpoint.locv,LingoNumber(32),"temp",LingoGlobal.FALSE)            screensize = LingoGlobal.op_div(self._global._system.desktoprectlist,LingoNumber(2))            midpos = LingoGlobal.op_div(screenresolutionpoint,LingoNumber(2))            windowrect = LingoGlobal.rect(LingoGlobal.op_sub(midpos,screensize),LingoGlobal.op_add(midpos,screensize))            self._global._movie.window.rect = windowrect            self._global._movie.stage.drawrect = windowrect                    else:            self._movieScript.gSaveProps = LingoList(LingoNumber(1),LingoNumber(1),LingoNumber(1))                    self._movieScript.solidMtrx = LingoList()        cols = LingoNumber(72)        rows = LingoNumber(43)        self._movieScript.gLEProps = LingoPropertyList(LingoSymbol("matrix"), LingoList(),LingoSymbol("leveleditors"), LingoList(),LingoSymbol("toolmatrix"), LingoList(),LingoSymbol("campos"), LingoGlobal.point(LingoNumber(0),LingoNumber(0)))        self._movieScript.gLEProps.toolmatrix.add(LingoList("inverse","paintWall","paintAir","slope"))        self._movieScript.gLEProps.toolmatrix.add(LingoList("floor","squareWall","squareAir","move"))        self._movieScript.gLEProps.toolmatrix.add(LingoList("rock","spear","crack",""))        self._movieScript.gLEProps.toolmatrix.add(LingoList("horBeam","verBeam","glass","copyBack"))        self._movieScript.gLEProps.toolmatrix.add(LingoList("shortCutEntrance","shortCut","lizardHole","playerSpawn"))        self._movieScript.gLEProps.toolmatrix.add(LingoList("forbidbats","","hive","waterFall"))        self._movieScript.gLEProps.toolmatrix.add(LingoList("scavengerHole","WHAMH","garbageHole","wormGrass"))        self._movieScript.gLEProps.toolmatrix.add(LingoList("workLayer","flip","mirrorToggle","setMirrorPoint"))        self._movieScript.resetgenveditorprops()        tmp_q = LingoNumber(1)        while tmp_q.IntValue < cols:             q = tmp_q            ql = LingoList()            tmp_c = LingoNumber(1)            while tmp_c.IntValue < rows:                 c = tmp_c                ql.add(LingoList(LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(0),LingoList())))                tmp_c = c                tmp_c += LingoNumber(1)                            self._movieScript.gLEProps.matrix.add(ql)            tmp_q = q            tmp_q += LingoNumber(1)                    self._movieScript.gBlurOptions = LingoPropertyList(LingoSymbol("blurlight"), LingoNumber(0),LingoSymbol("blursky"), LingoNumber(0))        self._movieScript.gTEprops = LingoPropertyList(LingoSymbol("lastkeys"), LingoList(),LingoSymbol("keys"), LingoList(),LingoSymbol("worklayer"), LingoNumber(1),LingoSymbol("lstmsps"), LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoSymbol("tlmatrix"), LingoList(),LingoSymbol("defaultmaterial"), "Concrete",LingoSymbol("tooltype"), "material",LingoSymbol("tooldata"), "Big Metal",LingoSymbol("tmPos"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("tmsavposl"), LingoList(),LingoSymbol("specialedit"), LingoNumber(0))        tmp_q = LingoNumber(1)        while tmp_q.IntValue < cols:             q = tmp_q            l = LingoList()            tmp_c = LingoNumber(1)            while tmp_c.IntValue < rows:                 c = tmp_c                l.add(LingoList(LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0)),LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0)),LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0))))                tmp_c = c                tmp_c += LingoNumber(1)                            self._movieScript.gTEprops.tlmatrix.add(l)            tmp_q = q            tmp_q += LingoNumber(1)                    self._global.member("layerText").text = "Layer:1"        self._movieScript.gTiles = LingoList()        self._movieScript.gTiles.add(LingoPropertyList(LingoSymbol("nm"), "Materials",LingoSymbol("tls"), LingoList()))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Standard",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(150),LingoNumber(150),LingoNumber(150))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Concrete",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(150),LingoNumber(255),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "RainStone",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Bricks",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(200),LingoNumber(150),LingoNumber(100))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "BigMetal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Tiny Signs",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(200),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Scaffolding",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(60),LingoNumber(60),LingoNumber(40))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Dense Pipes",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "densePipeType",LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(150))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "SuperStructure",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(160),LingoNumber(180),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "SuperStructure2",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(190),LingoNumber(160),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Tiled Stone",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(100),LingoNumber(0),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Chaotic Stone",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Small Pipes",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "pipeType",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Trash",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "pipeType",LingoSymbol("color"), self._global.color(LingoNumber(90),LingoNumber(255),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Invisible",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "invisibleI",LingoSymbol("color"), self._global.color(LingoNumber(200),LingoNumber(200),LingoNumber(200))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "LargeTrash",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "largeTrashType",LingoSymbol("color"), self._global.color(LingoNumber(175),LingoNumber(30),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "3DBricks",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Random Machines",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(72),LingoNumber(116),LingoNumber(80))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Dirt",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "dirtType",LingoSymbol("color"), self._global.color(LingoNumber(124),LingoNumber(72),LingoNumber(52))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Ceramic Tile",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "ceramicType",LingoSymbol("color"), self._global.color(LingoNumber(60),LingoNumber(60),LingoNumber(100))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Temple Stone",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(120),LingoNumber(180))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Circuits",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "densePipeType",LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(150),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Ridge",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "ridgeType",LingoSymbol("color"), self._global.color(LingoNumber(200),LingoNumber(15),LingoNumber(60))))        self._movieScript.gTiles.add(LingoPropertyList(LingoSymbol("nm"), "Drought Materials",LingoSymbol("tls"), LingoList()))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Steel",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(220),LingoNumber(170),LingoNumber(195))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "4Mosaic",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(227),LingoNumber(76),LingoNumber(13))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Color A Ceramic",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "ceramicAType",LingoSymbol("color"), self._global.color(LingoNumber(120),LingoNumber(0),LingoNumber(90))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Color B Ceramic",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "ceramicBType",LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(175),LingoNumber(175))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Random Pipes",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "randomPipesType",LingoSymbol("color"), self._global.color(LingoNumber(80),LingoNumber(0),LingoNumber(140))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Rocks",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "rockType",LingoSymbol("color"), self._global.color(LingoNumber(185),LingoNumber(200),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Rough Rock",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "roughRock",LingoSymbol("color"), self._global.color(LingoNumber(155),LingoNumber(170),LingoNumber(0))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Random Metal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(180),LingoNumber(10),LingoNumber(10))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Cliff",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(75),LingoNumber(75),LingoNumber(75))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Non-Slip Metal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(180),LingoNumber(80),LingoNumber(80))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Stained Glass",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(180),LingoNumber(80),LingoNumber(180))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Sandy Dirt",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "sandy",LingoSymbol("color"), self._global.color(LingoNumber(180),LingoNumber(180),LingoNumber(80))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "MegaTrash",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "megaTrashType",LingoSymbol("color"), self._global.color(LingoNumber(135),LingoNumber(10),LingoNumber(255))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Shallow Dense Pipes",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "densePipeType",LingoSymbol("color"), self._global.color(LingoNumber(13),LingoNumber(23),LingoNumber(110))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Sheet Metal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "wv",LingoSymbol("color"), self._global.color(LingoNumber(145),LingoNumber(135),LingoNumber(125))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Chaotic Stone 2",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(90),LingoNumber(90),LingoNumber(90))))        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Asphalt",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(115),LingoNumber(115),LingoNumber(115))))        self._movieScript.gTiles.add(LingoPropertyList(LingoSymbol("nm"), "Community Materials",LingoSymbol("tls"), LingoList()))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Shallow Circuits",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "densePipeType",LingoSymbol("color"), self._global.color(LingoNumber(15),LingoNumber(200),LingoNumber(155))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Random Machines 2",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(116),LingoNumber(116),LingoNumber(80))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Small Machines",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(80),LingoNumber(116),LingoNumber(116))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Random Metals",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(80))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "ElectricMetal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(100))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Grate",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(190),LingoNumber(50),LingoNumber(190))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "CageGrate",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(50),LingoNumber(190),LingoNumber(190))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "BulkMetal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(50),LingoNumber(19),LingoNumber(190))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "MassiveBulkMetal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "unified",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(19),LingoNumber(19))))        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(LingoSymbol("nm"), "Dune Sand",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("rendertype"), "tiles",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(100))))        savlm = self._global.member("matInit")        self._global.member("matInit").importfileinto(LingoGlobal.concat("Materials",self._global.the_dirSeparator,"Init.txt"))        savlm.name = "matInit"        self._movieScript.DRCustomMatList = LingoList()        if (LingoGlobal.op_ne_b(savlm.text, LingoGlobal.VOID) and LingoGlobal.op_ne_b(savlm.text, "")):             tmp_ln = LingoNumber(1)            while tmp_ln.IntValue < LingoGlobal.thenumberoflines_helper(savlm.text):                 ln = tmp_ln                lin = LingoGlobal.linemember_helper(savlm.text)[ln]                if LingoGlobal.op_ne_b(lin, ""):                     if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(lin)[LingoNumber(1)], "-"):                         self._movieScript.gTiles.add(LingoPropertyList(LingoSymbol("nm"), self._global.slice_helper(LingoGlobal.charmember_helper(lin),LingoNumber(2),LingoGlobal.lengthmember_helper(lin)),LingoSymbol("tls"), LingoList()))                        tmp_efLn = LingoGlobal.op_add(ln,LingoNumber(1))                        while tmp_efLn.IntValue < LingoGlobal.thenumberoflines_helper(savlm.text):                             efln = tmp_efLn                            eflin = LingoGlobal.linemember_helper(savlm.text)[efln]                            if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(eflin)[LingoNumber(1)], "-"):                                 break                                                            elif LingoGlobal.op_ne_b(eflin, ""):                                 gtlcnt = self._movieScript.gTiles[self._movieScript.gTiles.count]                                gtlcnt.tls.add(self._global.value(eflin))                                mattl = gtlcnt.tls[gtlcnt.tls.count]                                mattl[LingoSymbol("sz")] = LingoGlobal.point(LingoNumber(1),LingoNumber(1))                                mattl[LingoSymbol("specs")] = LingoList(LingoNumber(0))                                mattl[LingoSymbol("rendertype")] = "customUnified"                                self._movieScript.DRCustomMatList.add(mattl)                            tmp_efLn = efln                            tmp_efLn += LingoNumber(1)                                                    ln = LingoGlobal.op_sub(efln,LingoNumber(1))                                                            tmp_ln = ln                tmp_ln += LingoNumber(1)                            if self._movieScript.gTiles.count >= LingoNumber(1):                 tmp_del = LingoNumber(1)                while tmp_del.IntValue < self._movieScript.gTiles.count:                     tempdel = tmp_del                    if self._movieScript.gTiles[tempdel].tls.count < LingoNumber(1):                         self._movieScript.gTiles.deleteat(tempdel)                    tmp_del = tempdel                    tmp_del += LingoNumber(1)                                                        self._movieScript.setlastmatcat(self._movieScript.gTiles.count)        self._movieScript.gTiles.add(LingoPropertyList(LingoSymbol("nm"), "Special",LingoSymbol("tls"), LingoList()))        spcind = self._movieScript.gTiles.count        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(LingoSymbol("nm"), "Rect Clear",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("placemethod"), "rect",LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(LingoSymbol("nm"), "SH pattern box",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("placemethod"), "rect",LingoSymbol("color"), self._global.color(LingoNumber(210),LingoNumber(0),LingoNumber(255))))        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(LingoSymbol("nm"), "SH grate box",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("placemethod"), "rect",LingoSymbol("color"), self._global.color(LingoNumber(160),LingoNumber(0),LingoNumber(255))))        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(LingoSymbol("nm"), "Alt Grate Box",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(LingoNumber(0)),LingoSymbol("placemethod"), "rect",LingoSymbol("color"), self._global.color(LingoNumber(75),LingoNumber(75),LingoNumber(240))))        self._movieScript.setfirsttilecat(LingoGlobal.op_add(spcind,LingoNumber(1)))        sav = self._global.member("initImport")        self._global.member("initImport").importfileinto(LingoGlobal.concat("Graphics",self._global.the_dirSeparator,"Init.txt"))        sav.text = LingoGlobal.concat(sav.text,LingoGlobal.RETURN,LingoGlobal.RETURN,self._global.member("Drought Needed Init").text)        sav.name = "initImport"        self._global.member("previewTiles").image = self._global.image(LingoNumber(60000),LingoNumber(500),LingoNumber(1))        ptpos = LingoNumber(1)        self._global.member("previewTilesDR").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))        drpos = LingoNumber(1)        if LingoGlobal.ToBool(self._movieScript.getboolconfig("More tile previews")):             self._global.member("previewTilesDR").image = self._global.image(LingoNumber(60000),LingoNumber(500),LingoNumber(1))                    tmp_q = LingoNumber(1)        while tmp_q.IntValue < LingoGlobal.thenumberoflines_helper(sav.text):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q])[LingoNumber(1)], "-"):                     vl = self._global.value(self._global.slice_helper(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q]),LingoNumber(2),LingoGlobal.lengthmember_helper(LingoGlobal.linemember_helper(sav.text)[q])))                    if LingoGlobal.op_eq_b(vl, LingoGlobal.VOID):                         self._movieScript.writeexception("Tile Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Graphics folder."))                    else:                        self._movieScript.gTiles.add(LingoPropertyList(LingoSymbol("nm"), vl[LingoNumber(1)],LingoSymbol("clr"), vl[LingoNumber(2)],LingoSymbol("tls"), LingoList()))                                    elif LingoGlobal.op_eq_b(self._global.value(LingoGlobal.linemember_helper(sav.text)[q]), LingoGlobal.VOID):                     self._movieScript.writeexception("Tile Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Graphics folder."))                else:                    ad = self._global.value(LingoGlobal.linemember_helper(sav.text)[q])                    debugline = LingoGlobal.linemember_helper(sav.text)[q]                    sav2 = self._global.member("previewImprt")                    self._global.member("previewImprt").importfileinto(LingoGlobal.concat("Graphics",self._global.the_dirSeparator,ad.nm,".png"))                    sav2.name = "previewImprt"                    if LingoGlobal.ToBool(self._movieScript.checkdrinternal(ad.nm)):                         sav2.image = self._global.member(ad.nm).image                                            calculatedheight = sav2.image.rect.height                    if LingoGlobal.op_eq_b(ad.tp, "voxelStruct"):                         calculatedheight = LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ad.sz.locv,LingoGlobal.op_mul(ad.bftiles,LingoNumber(2)))),ad.repeatl.count))                                            rct = LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_sub(calculatedheight,LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch),calculatedheight)                    if (LingoGlobal.op_add(LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1)) > self._global.member("previewTiles").image.width and LingoGlobal.ToBool(self._movieScript.getboolconfig("More tile previews"))):                         self._global.member("previewTilesDR").image.copypixels(sav2.image,LingoGlobal.rect(drpos,LingoNumber(0),LingoGlobal.op_add(drpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),rct)                        ad.ptpos = LingoGlobal.op_add(drpos,LingoNumber(60000))                        ad.addprop(LingoSymbol("category"),self._movieScript.gTiles.count)                        if LingoGlobal.op_eq_b(ad.tags.getpos("notTile"), LingoNumber(0)):                             self._movieScript.gTiles[self._movieScript.gTiles.count].tls.add(ad)                        drpos = LingoGlobal.op_add(LingoGlobal.op_add(drpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1))                                            else:                        self._global.member("previewTiles").image.copypixels(sav2.image,LingoGlobal.rect(ptpos,LingoNumber(0),LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),rct)                        ad.ptpos = ptpos                        ad.addprop(LingoSymbol("category"),self._movieScript.gTiles.count)                        if LingoGlobal.op_eq_b(ad.tags.getpos("notTile"), LingoNumber(0)):                             self._movieScript.gTiles[self._movieScript.gTiles.count].tls.add(ad)                        ptpos = LingoGlobal.op_add(LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1))                                                                        tmp_q = q            tmp_q += LingoNumber(1)                    self._movieScript.lG = "1"        self._movieScript.gProps = LingoList()        self._movieScript.resetpropeditorprops()        self._movieScript.gPEcolors = LingoList()        sav = self._global.member("initImport")        self._global.member("initImport").importfileinto(LingoGlobal.concat("Props",self._global.the_dirSeparator,"propColors.txt"))        sav.name = "initImport"        tmp_q = LingoNumber(1)        while tmp_q.IntValue < LingoGlobal.thenumberoflines_helper(sav.text):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 self._movieScript.gPEcolors.add(self._global.value(LingoGlobal.linemember_helper(sav.text)[q]))            tmp_q = q            tmp_q += LingoNumber(1)                    sav = self._global.member("initImport")        self._global.member("initImport").importfileinto(LingoGlobal.concat("Props",self._global.the_dirSeparator,"Init.txt"))        sav.name = "initImport"        tmp_q = LingoNumber(1)        while tmp_q.IntValue < LingoNumber(1000):             q = tmp_q            self._global.member(q,LingoNumber(2)).erase()            tmp_q = q            tmp_q += LingoNumber(1)                    tmp_q = LingoNumber(1)        while tmp_q.IntValue < LingoGlobal.thenumberoflines_helper(sav.text):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q])[LingoNumber(1)], "-"):                     vl = self._global.value(self._global.slice_helper(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q]),LingoNumber(2),LingoGlobal.lengthmember_helper(LingoGlobal.linemember_helper(sav.text)[q])))                    if LingoGlobal.op_eq_b(vl, LingoGlobal.VOID):                         self._movieScript.writeexception("Prop Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Props folder."))                    else:                        self._movieScript.gProps.add(LingoPropertyList(LingoSymbol("nm"), vl[LingoNumber(1)],LingoSymbol("clr"), vl[LingoNumber(2)],LingoSymbol("prps"), LingoList()))                                    elif LingoGlobal.op_eq_b(self._global.value(LingoGlobal.linemember_helper(sav.text)[q]), LingoGlobal.VOID):                     self._movieScript.writeexception("Prop Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Props folder."))                else:                    ad = self._global.value(LingoGlobal.linemember_helper(sav.text)[q])                    strng = LingoGlobal.linemember_helper(sav.text)[q]                    ad.addprop(LingoSymbol("category"),self._movieScript.gProps.count)                    if (LingoGlobal.op_eq_b(ad.tp, "standard") or LingoGlobal.op_eq_b(ad.tp, "variedStandard")):                         dp = LingoNumber(0)                        tmp_i = LingoNumber(1)                        while tmp_i.IntValue < ad.repeatl.count:                             i = tmp_i                            dp = LingoGlobal.op_add(dp,ad.repeatl[i])                            tmp_i = i                            tmp_i += LingoNumber(1)                                                    ad.addprop(LingoSymbol("depth"),dp)                    self._movieScript.gProps[self._movieScript.gProps.count].prps.add(ad)                            tmp_q = q            tmp_q += LingoNumber(1)                    gpagecount = LingoNumber(0)        gpagetick = LingoNumber(0)        tmp_q = self._movieScript.getfirsttilecat()        while tmp_q.IntValue < self._movieScript.gTiles.count:             q = tmp_q            tmp_c = LingoNumber(1)            while tmp_c.IntValue < self._movieScript.gTiles[q].tls.count:                 c = tmp_c                if LingoGlobal.op_eq_b(gpagetick, LingoNumber(0)):                     gpagetick = LingoNumber(21)                    gpagecount = LingoGlobal.op_add(gpagecount,LingoNumber(1))                    self._movieScript.gProps.add(LingoPropertyList(LingoSymbol("nm"), LingoGlobal.concat("Tiles as props ",gpagecount),LingoSymbol("clr"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoSymbol("prps"), LingoList()))                tl = self._movieScript.gTiles[q].tls[c]                rnddisf = self._movieScript.getboolconfig("voxelStructRandomDisplace for tiles as props")                if (((LingoGlobal.op_eq_b(tl.tp, "voxelStruct") or (LingoGlobal.op_eq_b(tl.tp, "voxelStructRandomDisplaceVertical") and LingoGlobal.ToBool(rnddisf))) or (LingoGlobal.op_eq_b(tl.tp, "voxelStructRandomDisplaceHorizontal") and LingoGlobal.ToBool(rnddisf))) and LingoGlobal.op_eq_b(tl.tags.getpos("notProp"), LingoNumber(0))):                     ntp = ""                    ecat = ""                    ecbt = ""                    dct = ""                    cct = ""                    ccrt = ""                    rrt = ""                    rfxt = ""                    rfyt = ""                    cst = ""                    csbt = ""                    lst = ""                    lsbt = ""                    drt = ""                    inte = ""                    nmtp = ""                    if tl.tags.getpos("notMegaTrashProp") > LingoNumber(0):                         nmtp = "notMegaTrashProp"                                            if tl.tags.getpos("effectColorA") > LingoNumber(0):                         ecat = "effectColorA"                                            if tl.tags.getpos("effectColorB") > LingoNumber(0):                         ecbt = "effectColorB"                                            if tl.tags.getpos("colored") > LingoNumber(0):                         dct = "colored"                                            if tl.tags.getpos("customColor") > LingoNumber(0):                         cct = "customColor"                                            if tl.tags.getpos("customColorRainbow") > LingoNumber(0):                         ccrt = "customColorRainbow"                                            if tl.tags.getpos("randomRotat") > LingoNumber(0):                         rrt = "randomRotat"                                            if tl.tags.getpos("randomFlipX") > LingoNumber(0):                         rfxt = "randomFlipX"                                            if tl.tags.getpos("randomFlipY") > LingoNumber(0):                         rfyt = "randomFlipY"                                            if tl.tags.getpos("Circular Sign") > LingoNumber(0):                         cst = "Circular Sign"                                            if tl.tags.getpos("Circular Sign B") > LingoNumber(0):                         csbt = "Circular Sign B"                                            if tl.tags.getpos("Larger Sign") > LingoNumber(0):                         lst = "Larger Sign"                                            if tl.tags.getpos("Larger Sign B") > LingoNumber(0):                         lsbt = "Larger Sign B"                                            if tl.tags.getpos("notTrashProp") > LingoNumber(0):                         ntp = "notTrashProp"                                            if tl.tags.getpos("INTERNAL") > LingoNumber(0):                         inte = "INTERNAL"                                            if LingoGlobal.ToBool(self._movieScript.getboolconfig("Tiles as props fixes")):                         if tl.rnd > LingoNumber(1):                             ad = LingoPropertyList(LingoSymbol("nm"), tl.nm,LingoSymbol("tp"), "variedStandard",LingoSymbol("colortreatment"), "standard",LingoSymbol("sz"), LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),LingoSymbol("depth"), LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),LingoSymbol("repeatl"), tl.repeatl,LingoSymbol("vars"), tl.rnd,LingoSymbol("random"), LingoNumber(1),LingoSymbol("tags"), LingoList("Tile",ntp,ecat,ecbt,dct,cct,ccrt,rrt,rfxt,rfyt,cst,csbt,lst,lsbt,inte,nmtp),LingoSymbol("layerexceptions"), LingoList(),LingoSymbol("notes"), LingoList("Tile as prop"))                                                    else:                            ad = LingoPropertyList(LingoSymbol("nm"), tl.nm,LingoSymbol("tp"), "standard",LingoSymbol("colortreatment"), "standard",LingoSymbol("sz"), LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),LingoSymbol("depth"), LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),LingoSymbol("repeatl"), tl.repeatl,LingoSymbol("tags"), LingoList("Tile",ntp,ecat,ecbt,dct,cct,ccrt,rrt,rfxt,rfyt,cst,csbt,lst,lsbt,inte,nmtp),LingoSymbol("layerexceptions"), LingoList(),LingoSymbol("notes"), LingoList("Tile as prop"))                                                                        else:                        ad = LingoPropertyList(LingoSymbol("nm"), tl.nm,LingoSymbol("tp"), "standard",LingoSymbol("colortreatment"), "standard",LingoSymbol("sz"), LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),LingoSymbol("depth"), LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),LingoSymbol("repeatl"), tl.repeatl,LingoSymbol("tags"), LingoList("Tile",ntp,inte,nmtp),LingoSymbol("layerexceptions"), LingoList(),LingoSymbol("notes"), LingoList("Tile as prop"))                                            ad.addprop(LingoSymbol("category"),self._movieScript.gProps.count)                    self._movieScript.gProps[self._movieScript.gProps.count].prps.add(ad)                    gpagetick = LingoGlobal.op_sub(gpagetick,LingoNumber(1))                                    tmp_c = c                tmp_c += LingoNumber(1)                            tmp_q = q            tmp_q += LingoNumber(1)                    tmp_prq = LingoNumber(1)        while tmp_prq.IntValue < self._movieScript.gProps.count:             prq = tmp_prq            if self._movieScript.gProps[prq].prps.count <= LingoNumber(0):                 self._movieScript.gProps.deleteat(prq)            tmp_prq = prq            tmp_prq += LingoNumber(1)                    self._movieScript.gProps.add(LingoPropertyList(LingoSymbol("nm"), "Rope type props",LingoSymbol("clr"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("prps"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Wire",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(3),LingoSymbol("collisiondepth"), LingoNumber(0),LingoSymbol("segrad"), LingoNumber(1),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.5000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(0),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(4),LingoSymbol("edgedirection"), LingoNumber(0),LingoSymbol("rigid"), LingoNumber(0),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Tube",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(4),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(10),LingoSymbol("collisiondepth"), LingoNumber(2),LingoSymbol("segrad"), LingoNumber(4.5000),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.5000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoSymbol("previewevery"), LingoNumber(2),LingoSymbol("edgedirection"), LingoNumber(5),LingoSymbol("rigid"), LingoNumber(1.6000),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "ThickWire",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(3),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(4),LingoSymbol("collisiondepth"), LingoNumber(1),LingoSymbol("segrad"), LingoNumber(2),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.8000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(2),LingoSymbol("edgedirection"), LingoNumber(0),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "RidgedTube",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(4),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(5),LingoSymbol("collisiondepth"), LingoNumber(2),LingoSymbol("segrad"), LingoNumber(5),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.3000),LingoSymbol("airfric"), LingoNumber(0.7000),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)),LingoSymbol("previewevery"), LingoNumber(2),LingoSymbol("edgedirection"), LingoNumber(0),LingoSymbol("rigid"), LingoNumber(0.1000),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Fuel Hose",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(5),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(16),LingoSymbol("collisiondepth"), LingoNumber(1),LingoSymbol("segrad"), LingoNumber(7),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.8000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(1.4000),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Broken Fuel Hose",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(6),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(16),LingoSymbol("collisiondepth"), LingoNumber(1),LingoSymbol("segrad"), LingoNumber(7),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.8000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(1.4000),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Large Chain",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(9),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(28),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(9.5000),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.8000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.0000),LingoSymbol("rigid"), LingoNumber(0.0000),LingoSymbol("selfpush"), LingoNumber(6.5000),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Large Chain 2",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(9),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(28),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(9.5000),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.8000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(20),LingoNumber(205),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.0000),LingoSymbol("rigid"), LingoNumber(0.0000),LingoSymbol("selfpush"), LingoNumber(6.5000),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Bike Chain",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(9),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(38),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(16.5000),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.8000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(100),LingoNumber(100),LingoNumber(100)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.0000),LingoSymbol("rigid"), LingoNumber(0.0000),LingoSymbol("selfpush"), LingoNumber(16.5000),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Zero-G Tube",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(4),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(10),LingoSymbol("collisiondepth"), LingoNumber(2),LingoSymbol("segrad"), LingoNumber(4.5000),LingoSymbol("grav"), LingoNumber(0),LingoSymbol("friction"), LingoNumber(0.5000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(2),LingoSymbol("edgedirection"), LingoNumber(0),LingoSymbol("rigid"), LingoNumber(0.6000),LingoSymbol("selfpush"), LingoNumber(2),LingoSymbol("sourcepush"), LingoNumber(0.5000)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Zero-G Wire",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(8),LingoSymbol("collisiondepth"), LingoNumber(0),LingoSymbol("segrad"), LingoNumber(1),LingoSymbol("grav"), LingoNumber(0),LingoSymbol("friction"), LingoNumber(0.5000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(2),LingoSymbol("edgedirection"), LingoNumber(0.3000),LingoSymbol("rigid"), LingoNumber(0.5000),LingoSymbol("selfpush"), LingoNumber(1.2000),LingoSymbol("sourcepush"), LingoNumber(0.5000)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Fat Hose",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(6),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(40),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(20),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.6000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(0),LingoNumber(100),LingoNumber(150)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.1000),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(10),LingoSymbol("sourcepush"), LingoNumber(0.1000)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Wire Bunch",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(9),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(50),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(20),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.6000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(100),LingoNumber(150)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.1000),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(10),LingoSymbol("sourcepush"), LingoNumber(0.1000)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Wire Bunch 2",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(9),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(50),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(20),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.6000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(255),LingoNumber(100),LingoNumber(150)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.1000),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(10),LingoSymbol("sourcepush"), LingoNumber(0.1000)))        self._movieScript.gProps.add(LingoPropertyList(LingoSymbol("nm"), "Drought Rope Props",LingoSymbol("clr"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("prps"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Big Big Pipe",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(6),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(40),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(20),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.6000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(50),LingoNumber(150),LingoNumber(210)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.1000),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(10),LingoSymbol("sourcepush"), LingoNumber(0.1000)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Ring Chain",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(6),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(40),LingoSymbol("collisiondepth"), LingoNumber(3),LingoSymbol("segrad"), LingoNumber(20),LingoSymbol("grav"), LingoNumber(0.9000),LingoSymbol("friction"), LingoNumber(0.6000),LingoSymbol("airfric"), LingoNumber(0.9500),LingoSymbol("stiff"), LingoNumber(1),LingoSymbol("previewcolor"), self._global.color(LingoNumber(100),LingoNumber(200),LingoNumber(0)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0.1000),LingoSymbol("rigid"), LingoNumber(0.2000),LingoSymbol("selfpush"), LingoNumber(10),LingoSymbol("sourcepush"), LingoNumber(0.1000)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Christmas Wire",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(17),LingoSymbol("collisiondepth"), LingoNumber(0),LingoSymbol("segrad"), LingoNumber(8.5000),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.5000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(0),LingoSymbol("previewcolor"), self._global.color(LingoNumber(200),LingoNumber(0),LingoNumber(200)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0),LingoSymbol("rigid"), LingoNumber(0),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Ornate Wire",LingoSymbol("tp"), "rope",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList(),LingoSymbol("segmentlength"), LingoNumber(17),LingoSymbol("collisiondepth"), LingoNumber(0),LingoSymbol("segrad"), LingoNumber(8.5000),LingoSymbol("grav"), LingoNumber(0.5000),LingoSymbol("friction"), LingoNumber(0.5000),LingoSymbol("airfric"), LingoNumber(0.9000),LingoSymbol("stiff"), LingoNumber(0),LingoSymbol("previewcolor"), self._global.color(LingoNumber(0),LingoNumber(200),LingoNumber(200)),LingoSymbol("previewevery"), LingoNumber(1),LingoSymbol("edgedirection"), LingoNumber(0),LingoSymbol("rigid"), LingoNumber(0),LingoSymbol("selfpush"), LingoNumber(0),LingoSymbol("sourcepush"), LingoNumber(0)))        self._movieScript.gProps.add(LingoPropertyList(LingoSymbol("nm"), "Long props",LingoSymbol("clr"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("prps"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Cabinet Clamp",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Drill Suspender",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(5),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Thick Chain",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Drill",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(10),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Piston",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(4),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gProps.add(LingoPropertyList(LingoSymbol("nm"), "Drought Long Props",LingoSymbol("clr"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("prps"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Stretched Pipe",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Twisted Thread",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(LingoSymbol("nm"), "Stretched Wire",LingoSymbol("tp"), "long",LingoSymbol("depth"), LingoNumber(0),LingoSymbol("tags"), LingoList(),LingoSymbol("notes"), LingoList()))        self._movieScript.gTrashPropOptions = LingoList()        self._movieScript.gMegaTrash = LingoList()        tmp_q = LingoNumber(1)        while tmp_q.IntValue < self._movieScript.gProps.count:             q = tmp_q            tmp_c = LingoNumber(1)            while tmp_c.IntValue < self._movieScript.gProps[q].prps.count:                 c = tmp_c                self._movieScript.gProps[q].prps[c].addprop(LingoSymbol("settings"),LingoPropertyList())                self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("renderorder"),LingoNumber(0))                self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("seed"),LingoNumber(500))                self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("rendertime"),LingoNumber(0))                match self._movieScript.gProps[q].prps[c].tp.lower():                     case "standard" | "variedstandard":                        if LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].colortreatment, "bevel"):                             self._movieScript.gProps[q].prps[c].notes.add("The highlights and shadows on this prop are generated by code, so it can be rotated to any degree and they will remain correct.")                        else:                            self._movieScript.gProps[q].prps[c].notes.add("Be aware that shadows and highlights will not rotate with the prop, so extreme rotations may cause incorrect shading.")                        if LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "variedStandard"):                             self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("variation"),LingoGlobal.op_eq(self._movieScript.gProps[q].prps[c].random,LingoNumber(0)))                            if LingoGlobal.ToBool(self._movieScript.gProps[q].prps[c].random):                                 self._movieScript.gProps[q].prps[c].notes.add("Will put down a random variation. A specific variation can be selected from settings ('N' key).")                            else:                                self._movieScript.gProps[q].prps[c].notes.add("This prop comes with many variations. Which variation can be selected from settings ('N' key).")                                                    else:                            if (((self._movieScript.gProps[q].prps[c].sz.loch < LingoNumber(5) and self._movieScript.gProps[q].prps[c].sz.locv < LingoNumber(5)) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("INTERNAL"), LingoNumber(0))) and (LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("notTrashProp"), LingoNumber(0)) or LingoGlobal.op_eq_b(self._movieScript.getboolconfig("notTrashProp fix"), LingoGlobal.FALSE))):                                 self._movieScript.gTrashPropOptions.add(LingoGlobal.point(q,c))                                if (self._movieScript.gProps[q].prps[c].sz.loch < LingoNumber(3) or self._movieScript.gProps[q].prps[c].sz.locv < LingoNumber(3)):                                     self._movieScript.gTrashPropOptions.add(LingoGlobal.point(q,c))                                                            if (((((((self._movieScript.gProps[q].prps[c].sz.loch >= LingoNumber(4) and self._movieScript.gProps[q].prps[c].sz.locv >= LingoNumber(4)) and self._movieScript.gProps[q].prps[c].sz.loch <= LingoNumber(20)) and self._movieScript.gProps[q].prps[c].sz.locv <= LingoNumber(20)) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("colored"), LingoNumber(0))) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("effectColorB"), LingoNumber(0))) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("effectColorA"), LingoNumber(0))) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("notMegaTrashProp"), LingoNumber(0))):                                 self._movieScript.gMegaTrash.add(LingoGlobal.point(q,c))                                                                        case "rope":                        self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("release"),LingoNumber(0))                    case "varieddecal" | "variedsoft":                        self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("variation"),LingoGlobal.op_eq(self._movieScript.gProps[q].prps[c].random,LingoNumber(0)))                        self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("customdepth"),self._movieScript.gProps[q].prps[c].depth)                        if LingoGlobal.ToBool(self._movieScript.gProps[q].prps[c].random):                             self._movieScript.gProps[q].prps[c].notes.add("Will put down a random variation. A specific variation can be selected from settings ('N' key).")                        else:                            self._movieScript.gProps[q].prps[c].notes.add("This prop comes with many variations. Which variation can be selected from settings ('N' key).")                        if (LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "variedSoft") or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "coloredSoft")):                             if LingoGlobal.ToBool(self._movieScript.gProps[q].prps[c].colorize):                                 self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("applycolor"),LingoNumber(1))                                self._movieScript.gProps[q].prps[c].notes.add("It's recommended to render this prop after the effects if the color is activated, as the effects won't affect the color layers.")                                                                        case "simpledecal" | "soft" | "softeffect" | "antimatter" | "coloredsoft":                        self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("customdepth"),self._movieScript.gProps[q].prps[c].depth)                                    if (((LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "soft") or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "softEffect")) or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "variedSoft")) or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "coloredSoft")):                     if LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].selfshade, LingoNumber(1)):                         self._movieScript.gProps[q].prps[c].notes.add("The highlights and shadows on this prop are generated by code, so it can be rotated to any degree and they will remain correct.")                    else:                        self._movieScript.gProps[q].prps[c].notes.add("Be aware that shadows and highlights will not rotate with the prop, so extreme rotations may cause incorrect shading.")                                    match self._movieScript.gProps[q].prps[c].nm.lower():                     case "wire" | "zero-g wire" | "straight wire" | "straight zero-g wire":                        self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("thickness"),LingoNumber(2))                        self._movieScript.gProps[q].prps[c].notes.add("The thickness of the wire can be set in settings.")                    case "zero-g tube" | "straight zero-g tube":                        self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("applycolor"),LingoNumber(0))                        self._movieScript.gProps[q].prps[c].notes.add("The tube can be colored white through the settings.")                                    for tmp_t in self._movieScript.gProps[q].prps[c].tags:                     t = tmp_t                    match t.lower():                         case "customcolor":                            self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("color"),LingoNumber(0))                            self._movieScript.gProps[q].prps[c].notes.add("Custom color available")                        case "customcolorrainbow":                            self._movieScript.gProps[q].prps[c].settings.addprop(LingoSymbol("color"),LingoNumber(1))                            self._movieScript.gProps[q].prps[c].notes.add("Custom color available")                                                            tmp_c = c                tmp_c += LingoNumber(1)                            tmp_q = q            tmp_q += LingoNumber(1)                    self._movieScript.gEffects = LingoList()        savef = self._global.member("effectsInit")        self._global.member("effectsInit").importfileinto("effectsInit.txt")        savef.name = "effectsInit"        if ((LingoGlobal.op_eq_b(savef.text, LingoGlobal.VOID) or LingoGlobal.op_eq_b(savef.text, "")) or LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(savef.text)[LingoNumber(1)], "Rain World Community Editor; V.0.4.21; Editor effects initialisation file")):             fileef = self._global.new(self._global.xtra("fileio"))            fileef.createfile(LingoGlobal.concat(self._global.the_moviePath,"effectsInit.txt"))            fileef.openfile(LingoGlobal.concat(self._global.the_moviePath,"effectsInit.txt"),LingoNumber(0))            fileef.writestr(self._global.member("baseEffectsInit").text)            fileef.writereturn(LingoSymbol("windows"))            savef.text = self._global.member("baseEffectsInit").text                    tmp_ln = LingoNumber(1)        while tmp_ln.IntValue < LingoGlobal.thenumberoflines_helper(savef.text):             ln = tmp_ln            lin = LingoGlobal.linemember_helper(savef.text)[ln]            if LingoGlobal.op_ne_b(lin, ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(lin)[LingoNumber(1)], "-"):                     self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), self._global.slice_helper(LingoGlobal.charmember_helper(lin),LingoNumber(2),LingoGlobal.lengthmember_helper(lin)),LingoSymbol("efs"), LingoList()))                    tmp_efLn = LingoGlobal.op_add(ln,LingoNumber(1))                    while tmp_efLn.IntValue < LingoGlobal.thenumberoflines_helper(savef.text):                         efln = tmp_efLn                        eflin = LingoGlobal.linemember_helper(savef.text)[efln]                        if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(eflin)[LingoNumber(1)], "-"):                             break                                                    elif LingoGlobal.op_ne_b(eflin, ""):                             self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), eflin))                        tmp_efLn = efln                        tmp_efLn += LingoNumber(1)                                            ln = LingoGlobal.op_sub(efln,LingoNumber(1))                                                tmp_ln = ln            tmp_ln += LingoNumber(1)                    if self._movieScript.gEffects.count >= LingoNumber(1):             tmp_del = LingoNumber(1)            while tmp_del.IntValue < self._movieScript.gEffects.count:                 tempdel = tmp_del                if self._movieScript.gEffects[tempdel].efs.count < LingoNumber(1):                     self._movieScript.gEffects.deleteat(tempdel)                tmp_del = tempdel                tmp_del += LingoNumber(1)                                    if self._movieScript.gEffects.count < LingoNumber(1):             self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Natural",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Slime"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Melt"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Rust"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Barnacles"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Rubble"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "DecalsOnlySlime"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Erosion",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Roughen"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "SlimeX3"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Super Melt"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Destructive Melt"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Erode"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Super Erode"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "DaddyCorruption"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Artificial",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Wires"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Chains"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Plants",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Root Grass"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Seed Pods"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Growers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Cacti"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Rain Moss"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Hang Roots"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Grass"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Plants2",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Arm Growers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Horse Tails"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Circuit Plants"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Feather Plants"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Thorn Growers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Rollers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Garbage Spirals"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Plants3",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Thick Roots"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Shadow Plants"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Plants (Individual)",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Fungi Flowers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Lighthouse Flowers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Fern"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Giant Mushroom"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Sprawlbush"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "featherFern"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Fungus Tree"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Paint Effects",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "BlackGoo"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "DarkSlime"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Restoration",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Restore As Scaffolding"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Ceramic Chaos"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Drought Plants",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Hang Roots"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Thick Roots"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Shadow Plants"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Lighthouse Flowers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Fungi Flowers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Root Plants"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Drought Plants 2",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Foliage"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Mistletoe"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "High Fern"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "High Grass"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Little Flowers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Wastewater Mold"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Drought Plants 3",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Spinets"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Small Springs"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Mini Growers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Clovers"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Reeds"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Lavenders"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Dense Mold"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Drought Erosion",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Ultra Super Erode"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Impacts"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Drought Paint Effects",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Super BlackGoo"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Stained Glass Properties"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Drought Natural",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Barnacles"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Rubble"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Fat Slime"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Drought Artificial",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Assorted Trash"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Wires"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Colored Chains"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Ring Chains"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Dakras Plants",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Left Facing Kelp"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Right Facing Kelp"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Mixed Facing Kelp"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Bubble Grower"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Moss Wall"))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Club Moss"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Leo Plants",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Ivy"))            self._movieScript.gEffects.add(LingoPropertyList(LingoSymbol("nm"), "Nautillo Plants",LingoSymbol("efs"), LingoList()))            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(LingoSymbol("nm"), "Fuzzy Growers"))        self._movieScript.gEEprops = LingoPropertyList(LingoSymbol("lastkeys"), LingoList(),LingoSymbol("keys"), LingoList(),LingoSymbol("lstmsps"), LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoSymbol("effects"), LingoList(),LingoSymbol("emPos"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("editeffect"), LingoNumber(0),LingoSymbol("selectediteffect"), LingoNumber(0),LingoSymbol("mode"), "createNew",LingoSymbol("brushsize"), LingoNumber(5))        self._movieScript.gLightEProps = LingoPropertyList(LingoSymbol("pos"), LingoGlobal.point(LingoGlobal.op_div(LingoNumber(1040),LingoNumber(2)),LingoGlobal.op_div(LingoNumber(800),LingoNumber(2))),LingoSymbol("rot"), LingoNumber(0),LingoSymbol("sz"), LingoGlobal.point(LingoNumber(50),LingoNumber(70)),LingoSymbol("col"), LingoNumber(1),LingoSymbol("keys"), LingoNumber(0),LingoSymbol("lastkeys"), LingoNumber(0),LingoSymbol("lasttm"), LingoNumber(0),LingoSymbol("lightangle"), LingoNumber(180),LingoSymbol("flatness"), LingoNumber(1),LingoSymbol("lightrect"), LingoGlobal.rect(LingoNumber(1000),LingoNumber(1000),-LingoNumber(1000),-LingoNumber(1000)),LingoSymbol("paintshape"), "pxl")        self._movieScript.gLOprops = LingoPropertyList(LingoSymbol("mouse"), LingoNumber(0),LingoSymbol("lastmouse"), LingoNumber(0),LingoSymbol("mouseclick"), LingoNumber(0),LingoSymbol("pal"), LingoNumber(1),LingoSymbol("pals"), LingoList(LingoPropertyList(LingoSymbol("detcol"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)))),LingoSymbol("ecol1"), LingoNumber(1),LingoSymbol("ecol2"), LingoNumber(2),LingoSymbol("totecols"), LingoNumber(5),LingoSymbol("tileseed"), self._global.random(LingoNumber(400)),LingoSymbol("colglows"), LingoList(LingoNumber(0),LingoNumber(0)),LingoSymbol("size"), LingoGlobal.point(cols,rows),LingoSymbol("extratiles"), LingoList(LingoNumber(12),LingoNumber(3),LingoNumber(12),LingoNumber(5)),LingoSymbol("light"), LingoNumber(1))        self._global.new_script("levelEdit_parentscript",LingoList(LingoNumber(1)))        self._global.new_script("levelEdit_parentscript",LingoList(LingoNumber(2)))        self._movieScript.gCameraProps = LingoPropertyList(LingoSymbol("cameras"), LingoList(LingoGlobal.op_sub(LingoGlobal.point(LingoGlobal.op_mul(self._movieScript.gLOprops.size.loch,LingoNumber(10)),LingoGlobal.op_mul(self._movieScript.gLOprops.size.locv,LingoNumber(10))),LingoGlobal.point(LingoGlobal.op_mul(LingoNumber(35),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoNumber(20))))),LingoSymbol("selectedcamera"), LingoNumber(0),LingoSymbol("quads"), LingoList(LingoList(LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)))),LingoSymbol("keys"), LingoPropertyList(LingoSymbol("n"), LingoNumber(0),LingoSymbol("d"), LingoNumber(0),LingoSymbol("e"), LingoNumber(0),LingoSymbol("p"), LingoNumber(0)),LingoSymbol("lastkeys"), LingoPropertyList(LingoSymbol("n"), LingoNumber(0),LingoSymbol("d"), LingoNumber(0),LingoSymbol("e"), LingoNumber(0),LingoSymbol("p"), LingoNumber(0)))        self._movieScript.gSEprops = LingoPropertyList(LingoSymbol("sounds"), LingoGlobal.VOID,LingoSymbol("ambientsounds"), LingoList(),LingoSymbol("songs"), LingoList(),LingoSymbol("rects"), LingoList(),LingoSymbol("pickedupsound"), "NONE")        for tmp_mem in LingoList("rainBowMask","blackOutImg1","blackOutImg2"):             mem = tmp_mem            self._global.member(mem).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))                    self._global.member("lightImage").image = self._global.image(LingoGlobal.op_add(LingoGlobal.op_mul(self._movieScript.gLOprops.size.loch,LingoNumber(20)),LingoNumber(300)),LingoGlobal.op_add(LingoGlobal.op_mul(self._movieScript.gLOprops.size.locv,LingoNumber(20)),LingoNumber(300)),LingoNumber(1))        tmp_i = LingoNumber(0)        while tmp_i.IntValue < LingoNumber(29):             i = tmp_i            self._global.member(LingoGlobal.concat("layer",i)).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("layer",i,"sh")).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("gradientA",i)).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("gradientB",i)).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("layer",i,"dc")).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member("dumpImage").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member("finalDecalImage").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member("GradientOutput").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            tmp_i = i            tmp_i += LingoNumber(1)                    if LingoGlobal.ToBool(self._movieScript.getboolconfig("Large trash debug log")):             tmp_tr = LingoNumber(1)            while tmp_tr.IntValue < self._movieScript.gTrashPropOptions.count:                 tr = tmp_tr                self._global.member("DEBUGTR").text = LingoGlobal.concat(self._global.member("DEBUGTR").text,LingoGlobal.RETURN,self._movieScript.gProps[self._movieScript.gTrashPropOptions[tr].loch].prps[self._movieScript.gTrashPropOptions[tr].locv].nm)                tmp_tr = tr                tmp_tr += LingoNumber(1)                            fileopener = self._global.new(self._global.xtra("fileio"))            fileopener.openfile(LingoGlobal.concat(self._global.the_moviePath,"largeTrashLog.txt"),LingoNumber(0))            fileopener.writestr(self._global.member("DEBUGTR").text)            fileopener.writereturn(LingoSymbol("windows"))                return None            