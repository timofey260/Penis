from Drizzle.Runtime import *## Behavior script: saveFile#class saveFile(LingoBehaviorScript):     def __init__(self):         super().__init__()            def exitframe(self):         props = None        ok = None        if ((LingoGlobal.ToBool(_global._key.keypressed(LingoNumber(56))) and LingoGlobal.ToBool(_global._key.keypressed(LingoNumber(48)))) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):             _global._player.appminimize()        if LingoGlobal.ToBool(_movieScript.checkexit()):             _global._player.quit()        props = LingoPropertyList(dict("image" = _global.member("finalImage").image,"filename" = LingoGlobal.concat(_global._movie.path,"Levels/",_movieScript.gLoadedName,"_",_movieScript.gCurrentRenderCamera,".png")))        ok = _movieScript.gImgXtra.ix_saveimage(props)        if _movieScript.gCurrentRenderCamera < _movieScript.gCameraProps.cameras.count:             _global.put(LingoGlobal.concat_space("sendback",_movieScript.gCurrentRenderCamera))
            _global._movie.go(LingoNumber(44))        else:            _movieScript.newmakelevel(_movieScript.gLoadedName)                return None            def changetoplaymatrix(self):         nmtrx = None        q = None        l = None        c = None        cell = None        nmtrx = LingoList()        for tmp_q in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gLOprops.size.loch):             q = tmp_q            l = LingoList()            for tmp_c in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gLOprops.size.locv):                 c = tmp_c                cell = LingoList(_movieScript.gLEProps.matrix[q][c][LingoNumber(1)].duplicate(),LingoList(LingoGlobal.op_mul(LingoGlobal.op_gt(LingoList(LingoNumber(1),LingoNumber(9)).getpos(_movieScript.gLEProps.matrix[q][c][LingoNumber(2)][LingoNumber(1)]),LingoNumber(0)),LingoGlobal.op_eq(_movieScript.gLEProps.matrix[q][c][LingoNumber(2)][LingoNumber(2)].getpos(LingoNumber(11)),LingoNumber(0))),LingoList()))                if LingoGlobal.op_eq_b(cell[LingoNumber(1)][LingoNumber(1)], LingoNumber(9)):                     cell[LingoNumber(1)][LingoNumber(1)] = LingoNumber(1)                    cell[LingoNumber(1)][LingoNumber(2)].add(LingoNumber(8))                if (((cell[LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(6)) > LingoNumber(0) or cell[LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(7)) > LingoNumber(0)) or cell[LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(19)) > LingoNumber(0)) or cell[LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(21)) > LingoNumber(0)):                     if LingoGlobal.op_eq_b(cell[LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(5)), LingoNumber(0)):                         cell[LingoNumber(1)][LingoNumber(2)].add(LingoNumber(5))                                    if cell[LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(11)) > LingoNumber(0):                     cell[LingoNumber(1)][LingoNumber(1)] = LingoNumber(0)                    if c > LingoNumber(1):                         if ((((LingoGlobal.op_eq_b(_movieScript.gLEProps.matrix[q][LingoGlobal.op_sub(c,LingoNumber(1))][LingoNumber(1)][LingoNumber(1)], LingoNumber(0)) and LingoGlobal.op_eq_b(_movieScript.gLEProps.matrix[LingoGlobal.op_sub(q,LingoNumber(1))][c][LingoNumber(1)][LingoNumber(1)], LingoNumber(1))) and LingoGlobal.op_eq_b(_movieScript.gLEProps.matrix[LingoGlobal.op_sub(q,LingoNumber(1))][c][LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(11)), LingoNumber(0))) and LingoGlobal.op_eq_b(_movieScript.gLEProps.matrix[LingoGlobal.op_add(q,LingoNumber(1))][c][LingoNumber(1)][LingoNumber(1)], LingoNumber(1))) and LingoGlobal.op_eq_b(_movieScript.gLEProps.matrix[LingoGlobal.op_add(q,LingoNumber(1))][c][LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(11)), LingoNumber(0))):                             cell[LingoNumber(1)][LingoNumber(1)] = LingoNumber(6)                                                                                        l.add(cell)
                tmp_c = c                            nmtrx.add(l)
            tmp_q = q                    return nmtrx                    