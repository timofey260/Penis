from Drizzle.Runtime import *## Movie script: levelRendering#class MovieScript:     def __init__(self):         super().__init__()            def renderlevel(self):         tm = None        render = None        cols = None        rows = None        if ((LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(56))) and LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(48)))) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):             self._global._player.appminimize()        if LingoGlobal.ToBool(self.checkexit()):             self._global._player.quit()        tm = self._global._system.milliseconds        self.gSkyColor = self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))        self.gTinySignsDrawn = LingoNumber(0)        self.gRenderTrashProps = LingoList()        render = LingoNumber(0)        cols = LingoNumber(100)        rows = LingoNumber(60)        self._global.member("finalImage").image = self._global.image(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20)),LingoNumber(32))        self._global.the_randomSeed = self.gLOprops.tileseed        self.setuplayer(LingoNumber(3))
        self.setuplayer(LingoNumber(2))
        self.setuplayer(LingoNumber(1))
        self.gLastImported = ""        self._global.put(LingoGlobal.concat_space(self.gLoadedName,"rendered in",LingoGlobal.op_sub(self._global._system.milliseconds,tm)))        return None            def setuplayer(self, layer):         cols = None        rows = None        tlset = None        dpt = None        frntimg = None        mdlfrntimg = None        mdlbckimg = None        polecol = None        drawlatertiles = None        drawlasttiles = None        shortcutentrences = None        shortcuts = None        q = None        c = None        ps = None        tp = None        t = None        rct = None        dt = None        drawmaterials = None        indxer = None        nc = None        tl = None        savseed = None        afa = None        block = None        mem = None        d = None        q2 = None        c2 = None        dir = None        z = None        r = None        rnd = None        cols = LingoNumber(100)        rows = LingoNumber(60)        tlset = self._global.member("tileSet1").image.duplicate()        if LingoGlobal.op_eq_b(layer, LingoNumber(1)):             dpt = LingoNumber(0)                    elif LingoGlobal.op_eq_b(layer, LingoNumber(2)):             dpt = LingoNumber(10)                    else:            dpt = LingoNumber(20)                    self._global.member("vertImg").image = self._global.image(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20)),LingoNumber(32))        self._global.member("horiImg").image = self._global.image(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20)),LingoNumber(32))        frntimg = self._global.image(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20)),LingoNumber(32))        mdlfrntimg = self._global.image(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20)),LingoNumber(32))        mdlbckimg = self._global.image(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20)),LingoNumber(32))        polecol = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))        drawlatertiles = LingoList()        drawlasttiles = LingoList()        shortcutentrences = LingoList()        shortcuts = LingoList()        tmp_q=int(LingoNumber(1))        while tmp_q < cols:             q = LingoNumber(tmp_q)            tmp_c=int(LingoNumber(1))            while tmp_c < rows:                 c = LingoNumber(tmp_c)                if (((LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch) > LingoNumber(0) and LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch) <= self.gLOprops.size.loch) and LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv) > LingoNumber(0)) and LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv) <= self.gLOprops.size.locv):                     ps = LingoGlobal.op_add(LingoGlobal.point(q,c),self.gRenderCameraTilePos)                    tp = self.gLEProps.matrix[ps.loch][ps.locv][layer][LingoNumber(1)]                    for tmp_t in self.gLEProps.matrix[ps.loch][ps.locv][layer][LingoNumber(2)]:                         t = LingoNumber(tmp_t)                        match t if t is not None else 9999999999:                             case 1:                                rct = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.rect(LingoNumber(0),LingoNumber(8),LingoNumber(0),-LingoNumber(8)))                                mdlfrntimg.copypixels(LingoImage.Pxl,rct,LingoImage.Pxl.rect,LingoPropertyList(LingoSymbol("color"), polecol))                            case 2:                                rct = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.rect(LingoNumber(8),LingoNumber(0),-LingoNumber(8),LingoNumber(0)))                                mdlfrntimg.copypixels(LingoImage.Pxl,rct,LingoImage.Pxl.rect,LingoPropertyList(LingoSymbol("color"), polecol))                            case 3:                                pass                                                            case 4:                                tp = LingoNumber(1)                                                                                                        if (LingoGlobal.op_eq_b(self.gLEProps.matrix[ps.loch][ps.locv][LingoNumber(1)][LingoNumber(1)], LingoNumber(7)) and LingoGlobal.op_eq_b(layer, LingoNumber(1))):                         shortcutentrences.add(LingoList(self._global.random(LingoNumber(1000)),ps.loch,ps.locv))                    else:                        if LingoGlobal.op_ne_b(self.gLEProps.matrix[ps.loch][ps.locv][LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(5)), LingoNumber(0)):                             if LingoGlobal.op_eq_b(layer, LingoNumber(1)):                                 if LingoGlobal.op_eq_b(self.gLEProps.matrix[ps.loch][ps.locv][LingoNumber(1)][LingoNumber(1)], LingoNumber(1)):                                     if LingoGlobal.op_ne_b(LingoList("material","default").getpos(self.gTEprops.tlmatrix[ps.loch][ps.locv][layer].tp), LingoNumber(0)):                                         shortcuts.add(LingoGlobal.point(ps.loch,ps.locv))                                                                                                elif LingoGlobal.op_eq_b(layer, LingoNumber(2)):                                 if LingoGlobal.op_eq_b(self.gLEProps.matrix[ps.loch][ps.locv][LingoNumber(2)][LingoNumber(1)], LingoNumber(1)):                                     if LingoGlobal.op_ne_b(self.gLEProps.matrix[ps.loch][ps.locv][LingoNumber(1)][LingoNumber(1)], LingoNumber(1)):                                         if LingoGlobal.op_ne_b(LingoList("material","default").getpos(self.gTEprops.tlmatrix[ps.loch][ps.locv][layer].tp), LingoNumber(0)):                                             shortcuts.add(LingoGlobal.point(ps.loch,ps.locv))                                                                                                                                                                if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[ps.loch][ps.locv][layer].tp, "tileHead"):                             dt = self.gTEprops.tlmatrix[ps.loch][ps.locv][layer].data                            if LingoGlobal.op_ne_b(self.gTiles[dt[LingoNumber(1)].loch].tls[dt[LingoNumber(1)].locv].tags.getpos("drawLast"), LingoNumber(0)):                                 drawlasttiles.add(LingoList(self._global.random(LingoNumber(999)),ps.loch,ps.locv))                            else:                                drawlatertiles.add(LingoList(self._global.random(LingoNumber(999)),ps.loch,ps.locv))                                                    elif LingoGlobal.op_ne_b(self.gTEprops.tlmatrix[ps.loch][ps.locv][layer].tp, "tileBody"):                             drawlatertiles.add(LingoList(self._global.random(LingoNumber(999)),ps.loch,ps.locv))                                                            tmp_c = int(c)                tmp_c += 1                            tmp_q = int(q)            tmp_q += 1                    drawlatertiles.sort()
        drawmaterials = LingoList()        indxer = LingoList()        tmp_nc=int(LingoNumber(1))        while tmp_nc < self.getlastmatcat():             nc = LingoNumber(tmp_nc)            tmp_q=int(LingoNumber(1))            while tmp_q < self.gTiles[nc].tls.count:                 q = LingoNumber(tmp_q)                indxer.add(self.gTiles[nc].tls[q].nm)
                drawmaterials.add(LingoList(self.gTiles[nc].tls[q].nm,LingoList(),self.gTiles[nc].tls[q].rendertype))
                tmp_q = int(q)                tmp_q += 1                            tmp_nc = int(nc)            tmp_nc += 1                    for tmp_tl in drawlatertiles:             tl = LingoNumber(tmp_tl)            savseed = self._global.the_randomSeed            self._global.the_randomSeed = self.seedfortile(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),LingoGlobal.op_add(self.gLOprops.tileseed,layer))            match self.gTEprops.tlmatrix[tl[LingoNumber(2)]][tl[LingoNumber(3)]][layer].tp.lower():                 case "material":                    if LingoGlobal.op_ne_b(indxer.getpos(self.gTEprops.tlmatrix[tl[LingoNumber(2)]][tl[LingoNumber(3)]][layer].data), LingoGlobal.VOID):                         drawmaterials[indxer.getpos(self.gTEprops.tlmatrix[tl[LingoNumber(2)]][tl[LingoNumber(3)]][layer].data)][LingoNumber(2)].add(tl)                                    case "default":                    drawmaterials[indxer.getpos(self.gTEprops.defaultmaterial)][LingoNumber(2)].add(tl)                case "tilehead":                    if LingoGlobal.op_ne_b(self.gTEprops.tlmatrix[tl[LingoNumber(2)]][tl[LingoNumber(3)]][layer].data, LingoGlobal.VOID):                         dt = self.gTEprops.tlmatrix[tl[LingoNumber(2)]][tl[LingoNumber(3)]][layer].data                        frntimg = self.drawatiletile(tl[LingoNumber(2)],tl[LingoNumber(3)],layer,self.gTiles[dt[LingoNumber(1)].loch].tls[dt[LingoNumber(1)].locv],frntimg,dt)                                                                        self._global.the_randomSeed = savseed                    tmp_q=int(LingoNumber(1))        while tmp_q < drawmaterials.count:             q = LingoNumber(tmp_q)            savseed = self._global.the_randomSeed            self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)            if drawmaterials[q][LingoNumber(2)].count > LingoNumber(0):                 match drawmaterials[q][LingoNumber(3)].lower():                     case "invisiblei":                        if LingoGlobal.op_eq_b(self.gDRInvI, LingoGlobal.FALSE):                             for tmp_tl in drawmaterials[q][LingoNumber(2)]:                                 tl = LingoNumber(tmp_tl)                                frntimg = self.drawatilematerial(tl[LingoNumber(2)],tl[LingoNumber(3)],layer,drawmaterials[q][LingoNumber(1)],frntimg)                                                                                                        case "unified":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            frntimg = self.drawatilematerial(tl[LingoNumber(2)],tl[LingoNumber(3)],layer,drawmaterials[q][LingoNumber(1)],frntimg)                                                                        case "customunified":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            afa = self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                            if (((LingoGlobal.op_ne_b(afa, LingoNumber(0)) and LingoGlobal.op_ne_b(afa, LingoNumber(7))) and LingoGlobal.op_ne_b(afa, LingoNumber(8))) and LingoGlobal.op_ne_b(afa, LingoNumber(9))):                                 self.ldrawatilematerial(tl[LingoNumber(2)],tl[LingoNumber(3)],layer,drawmaterials[q][LingoNumber(1)])                                                                        case "tiles":                        frntimg = self.rendertilematerial(layer,drawmaterials[q][LingoNumber(1)],frntimg)                                            case "pipetype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(0)):                                 self.drawpipetypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                                                                        case "rocktype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(0)):                                 self.drawrocktypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,LingoGlobal.FALSE)                                                                        case "largetrashtype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if (LingoGlobal.ToBool(self.gDRMatFixes) and ((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6)))):                                 self.drawpipetypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                            if (LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)) or (LingoGlobal.ToBool(self.gDRMatFixes) and ((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6))))):                                 self.drawlargetrashtypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "roughrock":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if ((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6))):                                 match drawmaterials[q][LingoNumber(1)].lower():                                     case "rough rock":                                        self.drawrocktypetile("Rocks",LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,LingoGlobal.TRUE)                                    case "sandy dirt":                                        self.drawpipetypetile("Sandy Dirt",LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                                                                                                if LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)):                                 self.drawroughrocktile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "megatrashtype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if ((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6))):                                 self.drawpipetypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                            if (((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6))):                                 self.drawmegatrashtypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "dirttype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if (LingoGlobal.ToBool(self.gDRMatFixes) and ((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6)))):                                 self.drawpipetypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                            if LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)):                                 self.drawdirttypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "sandy":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            block = self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                            if (((LingoGlobal.op_ne_b(block, LingoNumber(0)) and LingoGlobal.op_ne_b(block, LingoNumber(7))) and LingoGlobal.op_ne_b(block, LingoNumber(8))) and LingoGlobal.op_ne_b(block, LingoNumber(9))):                                 self.drawsandytypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg,LingoNumber(4),LingoList(LingoNumber(40),LingoNumber(28),LingoNumber(24),LingoNumber(16),LingoNumber(10)),LingoList(LingoNumber(0),LingoNumber(40),LingoNumber(68),LingoNumber(92),LingoNumber(108)),LingoNumber(30))                                                                        case "wv":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if (((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(0)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(7))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(8))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(9))):                                 self.drawwvtypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer)                                                                        case "ridgetype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)):                                 self.drawridgetypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "densepipetype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(0)):                                 self.drawdpttile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "randompipestype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(0)):                                 self.drawrandompipesmat(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "ceramictype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if ((LingoGlobal.ToBool(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]).inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))) and LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1))):                                 frntimg = self.drawatilematerial(tl[LingoNumber(2)],tl[LingoNumber(3)],layer,"Standard",frntimg)                                                            elif (((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6))):                                 self.drawceramictypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "ceramicatype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if (((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6))):                                 self.drawceramicatypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                        case "ceramicbtype":                        for tmp_tl in drawmaterials[q][LingoNumber(2)]:                             tl = LingoNumber(tmp_tl)                            if (((((LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(1)) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(2))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(3))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(4))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(5))) or LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer), LingoNumber(6))):                                 self.drawceramicbtypetile(drawmaterials[q][LingoNumber(1)],LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),layer,frntimg)                                                                                                    self._global.the_randomSeed = savseed            tmp_q = int(q)            tmp_q += 1                    for tmp_tl in shortcuts:             tl = LingoNumber(tmp_tl)            if (shortcuts.getpos(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))) > LingoNumber(0) and shortcuts.getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0)))) > LingoNumber(0)):                 self.drawatiletile(tl.loch,tl.locv,layer,LingoPropertyList(LingoSymbol("nm"), "shortCutHorizontal",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(),LingoSymbol("specs2"), LingoGlobal.VOID,LingoSymbol("tp"), "voxelStruct",LingoSymbol("repeatl"), LingoList(LingoNumber(1),LingoNumber(9)),LingoSymbol("bftiles"), LingoNumber(0),LingoSymbol("rnd"), LingoNumber(1),LingoSymbol("ptpos"), LingoNumber(0),LingoSymbol("tags"), LingoList()),frntimg)            elif (shortcuts.getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1)))) > LingoNumber(0) and shortcuts.getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1)))) > LingoNumber(0)):                 self.drawatiletile(tl.loch,tl.locv,layer,LingoPropertyList(LingoSymbol("nm"), "shortCutVertical",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(),LingoSymbol("specs2"), LingoGlobal.VOID,LingoSymbol("tp"), "voxelStruct",LingoSymbol("repeatl"), LingoList(LingoNumber(1),LingoNumber(9)),LingoSymbol("bftiles"), LingoNumber(0),LingoSymbol("rnd"), LingoNumber(1),LingoSymbol("ptpos"), LingoNumber(0),LingoSymbol("tags"), LingoList()),frntimg)            else:                self.drawatiletile(tl.loch,tl.locv,layer,LingoPropertyList(LingoSymbol("nm"), "shortCutTile",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(),LingoSymbol("specs2"), LingoGlobal.VOID,LingoSymbol("tp"), "voxelStruct",LingoSymbol("repeatl"), LingoList(LingoNumber(1),LingoNumber(9)),LingoSymbol("bftiles"), LingoNumber(0),LingoSymbol("rnd"), LingoNumber(1),LingoSymbol("ptpos"), LingoNumber(0),LingoSymbol("tags"), LingoList()),frntimg)                    for tmp_tl in drawlasttiles:             tl = LingoNumber(tmp_tl)            dt = self.gTEprops.tlmatrix[tl[LingoNumber(2)]][tl[LingoNumber(3)]][layer].data            frntimg = self.drawatiletile(tl[LingoNumber(2)],tl[LingoNumber(3)],layer,self.gTiles[dt[LingoNumber(1)].loch].tls[dt[LingoNumber(1)].locv],frntimg)                    shortcutentrences.sort()
        for tmp_tl in shortcutentrences:             tl = LingoNumber(tmp_tl)            tp = "shortCut"            if self.gShortcuts.indexl.getpos(LingoGlobal.op_sub(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),self.gRenderCameraTilePos)) > LingoNumber(0):                 tp = self.gShortcuts.scs[self.gShortcuts.indexl.getpos(LingoGlobal.op_sub(LingoGlobal.point(tl[LingoNumber(2)],tl[LingoNumber(3)]),self.gRenderCameraTilePos))]                            mem = "shortCut"            if LingoGlobal.op_eq_b(tp, "shortCut"):                 mem = "shortCutArrows"                            elif LingoGlobal.op_eq_b(tp, "playerHole"):                 mem = "shortCutDots"                            self.drawatiletile(tl[LingoNumber(2)],tl[LingoNumber(3)],LingoNumber(1),LingoPropertyList(LingoSymbol("nm"), mem,LingoSymbol("sz"), LingoGlobal.point(LingoNumber(3),LingoNumber(3)),LingoSymbol("specs"), LingoList(),LingoSymbol("specs2"), LingoList(),LingoSymbol("tp"), "voxelStruct",LingoSymbol("repeatl"), LingoList(LingoNumber(1),LingoNumber(7),LingoNumber(12)),LingoSymbol("bftiles"), LingoNumber(1),LingoSymbol("rnd"), -LingoNumber(1),LingoSymbol("ptpos"), LingoNumber(0),LingoSymbol("tags"), LingoList()),frntimg)        tmp_q=int(LingoNumber(0))        while tmp_q < cols:             q = LingoNumber(tmp_q)            self.drawverticalsurface(q,dpt)
            tmp_q = int(q)            tmp_q += 1                    tmp_q=int(LingoNumber(0))        while tmp_q < rows:             q = LingoNumber(tmp_q)            self.drawhorizontalsurface(q,dpt)
            tmp_q = int(q)            tmp_q += 1                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dpt,LingoNumber(5))))).image.copypixels(mdlbckimg,mdlbckimg.rect,mdlbckimg.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
        self._global.member(LingoGlobal.concat("layer",self._global.str(dpt))).image.copypixels(frntimg,frntimg.rect,frntimg.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
        d = LingoNumber(0)        if LingoGlobal.op_eq_b(layer, LingoNumber(2)):             d = LingoNumber(10)                    elif LingoGlobal.op_eq_b(layer, LingoNumber(3)):             d = LingoNumber(20)                    tmp_q=int(LingoNumber(1))        while tmp_q < cols:             q = LingoNumber(tmp_q)            tmp_c=int(LingoNumber(1))            while tmp_c < rows:                 c = LingoNumber(tmp_c)                q2 = LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch)                c2 = LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv)                if (((q2 > LingoNumber(1) and q2 < self.gLOprops.size.loch) and c2 > LingoNumber(1)) and c2 < self.gLOprops.size.locv):                     if self.gLEProps.matrix[q2][c2][layer][LingoNumber(2)].getpos(LingoNumber(11)) > LingoNumber(0):                         rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                        if (((self.gLEProps.matrix[LingoGlobal.op_sub(q2,LingoNumber(1))][c2][layer][LingoNumber(2)].getpos(LingoNumber(11)) > LingoNumber(0) or LingoGlobal.op_eq_b(self.gLEProps.matrix[LingoGlobal.op_sub(q2,LingoNumber(1))][c2][layer][LingoNumber(1)], LingoNumber(0))) or self.gLEProps.matrix[LingoGlobal.op_add(q2,LingoNumber(1))][c2][layer][LingoNumber(2)].getpos(LingoNumber(11)) > LingoNumber(0)) or LingoGlobal.op_eq_b(self.gLEProps.matrix[LingoGlobal.op_add(q2,LingoNumber(1))][c2][layer][LingoNumber(1)], LingoNumber(0))):                             rct = LingoGlobal.op_add(rct,LingoGlobal.rect(-LingoNumber(10),LingoNumber(0),LingoNumber(10),LingoNumber(0)))                                                    else:                            rct = LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(5),LingoNumber(0),-LingoNumber(5),LingoNumber(0)))                                                    if (((self.gLEProps.matrix[q2][LingoGlobal.op_sub(c2,LingoNumber(1))][layer][LingoNumber(2)].getpos(LingoNumber(11)) > LingoNumber(0) or LingoGlobal.op_eq_b(self.gLEProps.matrix[q2][LingoGlobal.op_sub(c2,LingoNumber(1))][layer][LingoNumber(1)], LingoNumber(0))) or self.gLEProps.matrix[q2][LingoGlobal.op_add(c2,LingoNumber(1))][layer][LingoNumber(2)].getpos(LingoNumber(11)) > LingoNumber(0)) or LingoGlobal.op_eq_b(self.gLEProps.matrix[q2][LingoGlobal.op_add(c2,LingoNumber(1))][layer][LingoNumber(1)], LingoNumber(0))):                             rct = LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),-LingoNumber(10),LingoNumber(0),LingoNumber(10)))                                                    else:                            rct = LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(5),LingoNumber(0),-LingoNumber(5)))                                                    for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                             dir = LingoNumber(tmp_dir)                            if LingoGlobal.op_ne_b(self.gLEProps.matrix[LingoGlobal.op_add(q2,dir.loch)][LingoGlobal.op_add(c2,dir.locv)][layer][LingoNumber(1)], LingoNumber(1)):                                 tmp_z=int(d)                                while tmp_z < LingoGlobal.op_add(d,LingoNumber(8)):                                     z = LingoNumber(tmp_z)                                    tmp_r=int(LingoNumber(1))                                    while tmp_r < LingoNumber(3):                                         r = LingoNumber(tmp_r)                                        rnd = self._global.random(LingoNumber(4))                                        self._global.member(LingoGlobal.concat("layer",self._global.str(z))).image.copypixels(self._global.member(LingoGlobal.concat("rubbleGraf",self._global.str(rnd))).image,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.rect(LingoGlobal.op_mul(dir,LingoNumber(10)),LingoGlobal.op_mul(dir,LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_sub(self._global.random(LingoNumber(3)),self._global.random(LingoNumber(8))),LingoGlobal.op_sub(z,d)),LingoGlobal.op_add(LingoGlobal.op_sub(self._global.random(LingoNumber(3)),self._global.random(LingoNumber(8))),LingoGlobal.op_sub(z,d)),LingoGlobal.op_sub(LingoGlobal.op_sub(self._global.random(LingoNumber(8)),self._global.random(LingoNumber(3))),LingoGlobal.op_sub(z,d)),LingoGlobal.op_sub(LingoGlobal.op_sub(self._global.random(LingoNumber(8)),self._global.random(LingoNumber(3))),LingoGlobal.op_sub(z,d)))),self._global.member(LingoGlobal.concat("rubbleGraf",self._global.str(rnd))).image.rect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("ink"), LingoNumber(36)))
                                        tmp_r = int(r)                                        tmp_r += 1                                                                            tmp_z = int(z)                                    tmp_z += 1                                                                                                                        tmp_z=int(d)                        while tmp_z < LingoGlobal.op_add(d,LingoNumber(8)):                             z = LingoNumber(tmp_z)                            tmp_r=int(LingoNumber(1))                            while tmp_r < LingoNumber(4):                                 r = LingoNumber(tmp_r)                                if ((self._global.random(LingoNumber(8)) > LingoGlobal.op_sub(z,d) and self._global.random(LingoNumber(3)) > LingoNumber(1)) or LingoGlobal.op_eq_b(self._global.random(LingoNumber(5)), LingoNumber(1))):                                     rnd = self._global.random(LingoNumber(4))                                    self._global.member(LingoGlobal.concat("layer",self._global.str(z))).image.copypixels(self._global.member(LingoGlobal.concat("rubbleGraf",self._global.str(rnd))).image,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_sub(self._global.random(LingoNumber(8)),self._global.random(LingoNumber(8))),LingoGlobal.op_sub(z,d)),LingoGlobal.op_add(LingoGlobal.op_sub(self._global.random(LingoNumber(8)),self._global.random(LingoNumber(8))),LingoGlobal.op_sub(z,d)),LingoGlobal.op_sub(LingoGlobal.op_sub(self._global.random(LingoNumber(8)),self._global.random(LingoNumber(8))),LingoGlobal.op_sub(z,d)),LingoGlobal.op_sub(LingoGlobal.op_sub(self._global.random(LingoNumber(8)),self._global.random(LingoNumber(8))),LingoGlobal.op_sub(z,d)))),self._global.member(LingoGlobal.concat("rubbleGraf",self._global.str(rnd))).image.rect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("ink"), LingoNumber(36)))                                tmp_r = int(r)                                tmp_r += 1                                                            tmp_z = int(z)                            tmp_z += 1                                                                                        tmp_c = int(c)                tmp_c += 1                            tmp_q = int(q)            tmp_q += 1                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dpt,LingoNumber(4))))).image.copypixels(mdlfrntimg,mdlfrntimg.rect,mdlfrntimg.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))        return None            def checkifatileissolidandsamematerial(self, tl, lr, mat):         rtrn = None        tl = LingoGlobal.point(self.restrict(tl.loch,LingoNumber(1),self.gLOprops.size.loch),self.restrict(tl.locv,LingoNumber(1),self.gLOprops.size.locv))        rtrn = LingoNumber(0)        if LingoGlobal.op_eq_b(self.gLEProps.matrix[tl.loch][tl.locv][lr][LingoNumber(1)], LingoNumber(1)):             if (LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[tl.loch][tl.locv][lr].tp, "material") and LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[tl.loch][tl.locv][lr].data, mat)):                 rtrn = LingoNumber(1)                            elif (LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[tl.loch][tl.locv][lr].tp, "default") and LingoGlobal.op_eq_b(self.gTEprops.defaultmaterial, mat)):                 rtrn = LingoNumber(1)                                    return rtrn                    def drawatilematerial(self, q, c, l, mat, frntimg):         dp = None        rct = None        mytileset = None        f = None        profl = None        gtatv = None        pstrect = None        id = None        dr = None        gtath = None        gtrect = None        d = None        slp = None        askdirs = None        myaskdirs = None        ad = None        matint = None        modder = None        imgload = None        var = None        clr1 = None        clr2 = None        q2 = None        c2 = None        nav = None        vj = None        v6 = None        rnd = None        dep = None        if LingoGlobal.op_eq_b(l, LingoNumber(1)):             dp = LingoNumber(0)                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):             dp = LingoNumber(10)                    else:            dp = LingoNumber(20)                    rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))        mytileset = mat        if (LingoGlobal.op_eq_b(mat, "Scaffolding") and LingoGlobal.ToBool(self.gDRMatFixes)):             mytileset = LingoGlobal.concat(mat,"DR")                    elif LingoGlobal.op_eq_b(mat, "Invisible"):             mytileset = "SuperStructure"                    match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:             case 1:                tmp_f=int(LingoNumber(1))                while tmp_f < LingoNumber(4):                     f = LingoNumber(tmp_f)                    match f if f is not None else 9999999999:                         case 1:                            profl = LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)))                            gtatv = LingoNumber(2)                            pstrect = LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),-LingoNumber(10),-LingoNumber(10)))                                                    case 2:                            profl = LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)))                            gtatv = LingoNumber(4)                            pstrect = LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(10),LingoNumber(0),LingoNumber(0),-LingoNumber(10)))                                                    case 3:                            profl = LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)))                            gtatv = LingoNumber(6)                            pstrect = LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(10),LingoNumber(10),LingoNumber(0),LingoNumber(0)))                                                    case _:                             profl = LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)))                            gtatv = LingoNumber(8)                            pstrect = LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(10),-LingoNumber(10),LingoNumber(0)))                                                                        id = ""                    for tmp_dr in profl:                         dr = LingoNumber(tmp_dr)                        id = LingoGlobal.concat(id,self._global.str(self.ismytilesetopentothistile(mat,LingoGlobal.op_add(LingoGlobal.point(q,c),dr),l)))                                            if LingoGlobal.op_eq_b(id, "11"):                         if LingoList(LingoNumber(1),LingoNumber(2),LingoNumber(3),LingoNumber(4),LingoNumber(5)).getpos(self.ismytilesetopentothistile(mat,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.point(q,c),profl[LingoNumber(1)]),profl[LingoNumber(2)]),l)) > LingoNumber(0):                             gtath = LingoNumber(10)                            gtatv = LingoNumber(2)                                                    else:                            gtath = LingoNumber(8)                                                                        else:                        gtath = LingoList(LingoNumber(0),"00",LingoNumber(0),"01",LingoNumber(0),"10").getpos(id)                                            if LingoGlobal.op_eq_b(gtath, LingoNumber(4)):                         if LingoGlobal.op_eq_b(gtatv, LingoNumber(6)):                             gtatv = LingoNumber(4)                                                    elif LingoGlobal.op_eq_b(gtatv, LingoNumber(8)):                             gtatv = LingoNumber(2)                                                                        elif LingoGlobal.op_eq_b(gtath, LingoNumber(6)):                         if (LingoGlobal.op_eq_b(gtatv, LingoNumber(4)) or LingoGlobal.op_eq_b(gtatv, LingoNumber(8))):                             gtatv = LingoGlobal.op_sub(gtatv,LingoNumber(2))                                                                        gtrect = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(gtath,LingoNumber(1)),LingoNumber(10)),LingoGlobal.op_mul(LingoGlobal.op_sub(gtatv,LingoNumber(1)),LingoNumber(10)),LingoGlobal.op_mul(gtath,LingoNumber(10)),LingoGlobal.op_mul(gtatv,LingoNumber(10))),LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5)))                    pstrect = LingoGlobal.op_sub(pstrect,LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    if LingoGlobal.op_ne_b(mat, "Sand Block"):                         frntimg.copypixels(self._global.member(LingoGlobal.concat("tileSet",self._global.str(mytileset))).image,LingoGlobal.op_add(pstrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                        tmp_d=int(LingoGlobal.op_add(dp,LingoNumber(1)))                        while tmp_d < LingoGlobal.op_add(dp,LingoNumber(9)):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(self._global.member(LingoGlobal.concat("tileSet",self._global.str(mytileset))).image,LingoGlobal.op_add(pstrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoNumber(120),LingoNumber(0),LingoNumber(120),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                            tmp_d = int(d)                            tmp_d += 1                                                                        tmp_f = int(f)                    tmp_f += 1                                                case 2 | 3 | 4 | 5:                slp = self.gLEProps.matrix[q][c][l][LingoNumber(1)]                if LingoGlobal.ToBool(self.gDRMatFixes):                     askdirs = LingoList(LingoNumber(0),LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),LingoList(LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0))))                                    else:                    askdirs = LingoList(LingoNumber(0),LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))),LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1))))                                    myaskdirs = askdirs[slp]                pstrect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                tmp_ad=int(LingoNumber(1))                while tmp_ad < myaskdirs.count:                     ad = LingoNumber(tmp_ad)                    gtrect = LingoGlobal.op_add(LingoGlobal.rect(LingoNumber(10),LingoNumber(90),LingoNumber(30),LingoNumber(110)),LingoGlobal.rect(LingoGlobal.op_mul(LingoNumber(60),LingoGlobal.op_eq(ad,LingoNumber(2))),LingoGlobal.op_mul(LingoNumber(30),LingoGlobal.op_sub(slp,LingoNumber(2))),LingoGlobal.op_mul(LingoNumber(60),LingoGlobal.op_eq(ad,LingoNumber(2))),LingoGlobal.op_mul(LingoNumber(30),LingoGlobal.op_sub(slp,LingoNumber(2)))))                    if LingoGlobal.ToBool(self.ismytilesetopentothistile(mat,LingoGlobal.op_add(LingoGlobal.point(q,c),myaskdirs[ad]),l)):                         gtrect = LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoNumber(30),LingoNumber(0),LingoNumber(30),LingoNumber(0)))                                            if (LingoGlobal.op_eq_b(mat, "Scaffolding") and LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE)):                         tmp_d=int(LingoGlobal.op_add(dp,LingoNumber(5)))                        while tmp_d < LingoGlobal.op_add(dp,LingoNumber(6)):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(self._global.member(LingoGlobal.concat("tileSet",self._global.str(mytileset))).image,LingoGlobal.op_add(pstrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.rect(LingoNumber(120),LingoNumber(0),LingoNumber(120),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                            tmp_d = int(d)                            tmp_d += 1                                                    tmp_d=int(LingoGlobal.op_add(dp,LingoNumber(8)))                        while tmp_d < LingoGlobal.op_add(dp,LingoNumber(9)):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(self._global.member(LingoGlobal.concat("tileSet",self._global.str(mytileset))).image,LingoGlobal.op_add(pstrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.rect(LingoNumber(120),LingoNumber(0),LingoNumber(120),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                            tmp_d = int(d)                            tmp_d += 1                                                                        elif LingoGlobal.op_ne_b(mat, "Sand Block"):                         frntimg.copypixels(self._global.member(LingoGlobal.concat("tileSet",self._global.str(mytileset))).image,LingoGlobal.op_add(pstrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.op_add(gtrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                        tmp_d=int(LingoGlobal.op_add(dp,LingoNumber(1)))                        while tmp_d < LingoGlobal.op_add(dp,LingoNumber(9)):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(self._global.member(LingoGlobal.concat("tileSet",self._global.str(mytileset))).image,LingoGlobal.op_add(pstrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),LingoNumber(5),LingoNumber(5))),LingoGlobal.rect(LingoNumber(120),LingoNumber(0),LingoNumber(120),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                            tmp_d = int(d)                            tmp_d += 1                                                                        tmp_ad = int(ad)                    tmp_ad += 1                                                case 6:                if LingoGlobal.op_ne_b(mat, "Invisible"):                     pstrect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    if LingoGlobal.op_eq_b(mat, "Stained Glass"):                         self.drawatiletile(q,c,l,LingoPropertyList(LingoSymbol("nm"), "SGFL",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(),LingoSymbol("specs2"), LingoGlobal.VOID,LingoSymbol("tp"), "voxelStruct",LingoSymbol("repeatl"), LingoList(LingoNumber(10)),LingoSymbol("bftiles"), LingoNumber(0),LingoSymbol("rnd"), LingoNumber(1),LingoSymbol("ptpos"), LingoNumber(0),LingoSymbol("tags"), LingoList()),frntimg)                    elif (LingoGlobal.ToBool(self.gDRMatFixes) or ((LingoGlobal.op_ne_b(mat, "Sand Block") and LingoGlobal.op_ne_b(mat, "Scaffolding")) and LingoGlobal.op_ne_b(mat, "Tiny Signs"))):                         self.drawatiletile(q,c,l,LingoPropertyList(LingoSymbol("nm"), LingoGlobal.concat("tileSet",self._global.str(mytileset),"Floor"),LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(),LingoSymbol("specs2"), LingoGlobal.VOID,LingoSymbol("tp"), "voxelStruct",LingoSymbol("repeatl"), LingoList(LingoNumber(6),LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1)),LingoSymbol("bftiles"), LingoNumber(1),LingoSymbol("rnd"), LingoNumber(1),LingoSymbol("ptpos"), LingoNumber(0),LingoSymbol("tags"), LingoList()),frntimg)                    else:                        self.drawatiletile(q,c,l,LingoPropertyList(LingoSymbol("nm"), "tileSetBigMetalFloor",LingoSymbol("sz"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("specs"), LingoList(),LingoSymbol("specs2"), LingoGlobal.VOID,LingoSymbol("tp"), "voxelStruct",LingoSymbol("repeatl"), LingoList(LingoNumber(6),LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1)),LingoSymbol("bftiles"), LingoNumber(1),LingoSymbol("rnd"), LingoNumber(1),LingoSymbol("ptpos"), LingoNumber(0),LingoSymbol("tags"), LingoList()),frntimg)                                                        matint = LingoList("Concrete","RainStone","Bricks","Tiny Signs","Cliff","Non-Slip Metal","BulkMetal","MassiveBulkMetal","Asphalt").getpos(mat)        if matint > LingoNumber(0):             modder = LingoList(LingoNumber(45),LingoNumber(6),LingoNumber(1),LingoNumber(10),LingoNumber(45),LingoNumber(5),LingoNumber(5),LingoNumber(10),LingoNumber(45))[matint]            gtrect = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_mod(q,modder),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_mod(c,modder),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mod(q,modder),LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mod(c,modder),LingoNumber(1)),LingoNumber(20)))            if LingoGlobal.op_eq_b(mat, "Bricks"):                 gtrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20))                            if (LingoGlobal.op_eq_b(mat, "Tiny Signs") and LingoGlobal.op_eq_b(self.gTinySignsDrawn, LingoNumber(0))):                 self.drawtinysigns()
                self.gTinySignsDrawn = LingoNumber(1)                            match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:                 case 1:                    pstrect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Texture")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                case 2 | 3 | 4 | 5:                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Texture")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:                         case 5:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.left,rct.bottom))                                                    case 4:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.right,rct.bottom))                                                    case 3:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.left,rct.top))                                                    case 2:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.right,rct.top))                                                                        rct = LingoGlobal.op_sub(rct,LingoGlobal.op_mul(LingoList(self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(LingoImage.Pxl,rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))                                    if LingoList("Stained Glass").getpos(mat) > LingoNumber(0):             matint = LingoList("Stained Glass").getpos(mat)            modder = LingoList(LingoNumber(1))[matint]            imgload = "SG"            gtrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20))            var = "1"            clr1 = "A"            clr2 = "B"            q2 = LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch)            c2 = LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv)            tmp_nav=int(LingoNumber(1))            while tmp_nav < self.gEEprops.effects.count:                 nav = LingoNumber(tmp_nav)                if LingoGlobal.op_eq_b(self.gEEprops.effects[nav].nm, "Stained Glass Properties"):                     if self.gEEprops.effects[nav].mtrx[q][c] >= LingoNumber(1):                         match self.gEEprops.effects[nav].options[LingoNumber(2)][LingoNumber(3)].lower():                             case "1":                                var = "1"                                                            case "2":                                var = "2"                                                            case "3":                                var = "3"                                                            case _:                                 var = "1"                                                                                    match self.gEEprops.effects[nav].options[LingoNumber(3)][LingoNumber(3)].lower():                             case "effectcolor1":                                clr1 = "A"                                                            case "effectcolor2":                                clr1 = "B"                                                            case "none":                                clr1 = "C"                                                            case _:                                 clr1 = "A"                                                                                    match self.gEEprops.effects[nav].options[LingoNumber(4)][LingoNumber(3)].lower():                             case "effectcolor1":                                clr2 = "A"                                                            case "effectcolor2":                                clr2 = "B"                                                            case "none":                                clr2 = "C"                                                            case _:                                 clr2 = "B"                                                                                                                        tmp_nav = int(nav)                tmp_nav += 1                            match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:                 case 1:                    pstrect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Socket")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Socket")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,clr1,clr2)).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Grad")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Grad")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                case 2 | 3 | 4 | 5:                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Socket")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Socket")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,clr1,clr2)).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Grad")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Grad")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:                         case 5:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.left,rct.bottom))                                                    case 4:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.right,rct.bottom))                                                    case 3:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.left,rct.top))                                                    case 2:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.right,rct.top))                                                                        rct = LingoGlobal.op_sub(rct,LingoGlobal.op_mul(LingoList(self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    tmp_vj=int(LingoNumber(0))                    while tmp_vj < LingoNumber(1):                         vj = LingoNumber(tmp_vj)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,vj)))).image.copypixels(LingoImage.Pxl,rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                        tmp_vj = int(vj)                        tmp_vj += 1                                                            case 6:                    pstrect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Socket")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Socket")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,clr1,clr2)).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Grad")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat(imgload,var,"Grad")).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:                         case 6:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoNumber(10)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.right,rct.top))                                                                        rct = LingoGlobal.op_sub(rct,LingoGlobal.op_mul(LingoList(self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    tmp_v6=int(LingoNumber(0))                    while tmp_v6 < LingoNumber(1):                         v6 = LingoNumber(tmp_v6)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,v6)))).image.copypixels(LingoImage.Pxl,rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                        tmp_v6 = int(v6)                        tmp_v6 += 1                                                                                if LingoList("Sand Block").getpos(mat) > LingoNumber(0):             matint = LingoList("Sand Block").getpos(mat)            modder = LingoList(LingoNumber(28))[matint]            gtrect = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_mod(q,modder),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_mod(c,modder),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mod(q,modder),LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mod(c,modder),LingoNumber(1)),LingoNumber(20)))            match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:                 case 1:                    pstrect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20))),LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    rnd = self._global.random(LingoNumber(4))                    tmp_dep=int(LingoNumber(0))                    while tmp_dep < LingoNumber(9):                         dep = LingoNumber(tmp_dep)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,dep)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Texture",self._global.str(self._global.random(LingoNumber(4))))).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                        tmp_dep = int(dep)                        tmp_dep += 1                                                            case 2 | 3 | 4 | 5:                    rnd = self._global.random(LingoNumber(4))                    tmp_dep=int(LingoNumber(0))                    while tmp_dep < LingoNumber(9):                         dep = LingoNumber(tmp_dep)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,dep)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Texture",self._global.str(self._global.random(LingoNumber(4))))).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                        tmp_dep = int(dep)                        tmp_dep += 1                                            match self.gLEProps.matrix[q][c][l][LingoNumber(1)] if self.gLEProps.matrix[q][c][l][LingoNumber(1)] is not None else 9999999999:                         case 5:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.left,rct.bottom))                                                    case 4:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.right,rct.bottom))                                                    case 3:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(rct.left,rct.top))                                                    case 2:                            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_mul(c,LingoNumber(20)))                            rct = LingoList(LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(rct.right,rct.top))                                                                        rct = LingoGlobal.op_sub(rct,LingoGlobal.op_mul(LingoList(self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    tmp_dep=int(LingoNumber(0))                    while tmp_dep < LingoNumber(9):                         dep = LingoNumber(tmp_dep)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,dep)))).image.copypixels(LingoImage.Pxl,rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                        tmp_dep = int(dep)                        tmp_dep += 1                                                            case 6:                    pstrect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(q,LingoNumber(20)),LingoGlobal.op_sub(LingoGlobal.op_mul(c,LingoNumber(20)),LingoNumber(10))),LingoGlobal.op_mul(LingoGlobal.rect(self.gRenderCameraTilePos,self.gRenderCameraTilePos),LingoNumber(20)))                    tmp_dep=int(LingoNumber(0))                    while tmp_dep < LingoNumber(9):                         dep = LingoNumber(tmp_dep)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,dep)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Texture",self._global.str(self._global.random(LingoNumber(4))))).image,pstrect,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                        tmp_dep = int(dep)                        tmp_dep += 1                                                                                return frntimg                    def ismytilesetopentothistile(self, mat, tl, l):         if LingoGlobal.ToBool(tl.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self.gLOprops.size.locv,LingoNumber(1))))):             if LingoList(LingoNumber(1),LingoNumber(2),LingoNumber(3),LingoNumber(4),LingoNumber(5)).getpos(self.gLEProps.matrix[tl.loch][tl.locv][l][LingoNumber(1)]) > LingoNumber(0):                 if (LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[tl.loch][tl.locv][l].tp, "material") and LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[tl.loch][tl.locv][l].data, mat)):                     return LingoNumber(1)                                    elif (LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[tl.loch][tl.locv][l].tp, "default") and LingoGlobal.op_eq_b(self.gTEprops.defaultmaterial, mat)):                     return LingoNumber(1)                                                        elif LingoGlobal.op_eq_b(self.gTEprops.defaultmaterial, mat):             return LingoNumber(1)                    return LingoNumber(0)                    def drawridgetypetile(self, mat, tl, layer, frntimg):         savseed = None        distancetoair = None        dist = None        dir = None        layrb = None        dp = None        dsct = None        pos = None        var = None        rct = None        q = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        distancetoair = -LingoNumber(1)        tmp_dist=int(LingoNumber(1))        while tmp_dist < LingoNumber(5):             dist = LingoNumber(tmp_dist)            for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                 dir = LingoNumber(tmp_dir)                if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1)):                     distancetoair = dist                    break                                                if LingoGlobal.op_ne_b(distancetoair, -LingoNumber(1)):                 break                            tmp_dist = int(dist)            tmp_dist += 1                    if LingoGlobal.op_eq_b(distancetoair, -LingoNumber(1)):             distancetoair = LingoNumber(5)                    if distancetoair >= LingoNumber(1):             layrb = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))            dp = layrb            dsct = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))            pos = dsct            if LingoGlobal.op_eq_b(distancetoair, LingoNumber(1)):                 self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(layrb,LingoNumber(2))))).image.copypixels(self._global.member("ridgeBase").image,LingoGlobal.rect(LingoGlobal.op_sub(pos.loch,LingoNumber(10)),LingoGlobal.op_sub(pos.locv,LingoNumber(10)),LingoGlobal.op_add(pos.loch,LingoNumber(10)),LingoGlobal.op_add(pos.locv,LingoNumber(10))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(22),LingoNumber(22)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))            if self._global.random(LingoNumber(5)) <= distancetoair:                 var = self._global.random(LingoNumber(30))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)))                frntimg.copypixels(self._global.member("ridgeRocks").image,self.rotatetoquad(rct,self._global.random(LingoNumber(15))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(52)),LingoNumber(1),LingoGlobal.op_mul(var,LingoNumber(52)),LingoNumber(53)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))            tmp_q=int(LingoNumber(1))            while tmp_q < distancetoair:                 q = LingoNumber(tmp_q)                if LingoGlobal.op_eq_b(distancetoair, LingoNumber(1)):                     dp = LingoGlobal.op_sub(LingoGlobal.op_add(layrb,self._global.random(LingoNumber(2))),LingoNumber(1))                                    else:                    dp = LingoGlobal.op_sub(LingoGlobal.op_add(layrb,self._global.random(LingoNumber(10))),LingoNumber(1))                                    pos = LingoGlobal.op_add(dsct,LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                var = self._global.random(LingoNumber(30))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)))                self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("ridgeRocks").image,self.rotatetoquad(rct,self._global.random(LingoNumber(15))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(52)),LingoNumber(1),LingoGlobal.op_mul(var,LingoNumber(52)),LingoNumber(53)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_q = int(q)                tmp_q += 1                                    self._global.the_randomSeed = savseed                return None            def drawatiletile(self, q, c, l, tl, frntimg, dt):         tileimage = None        mdpnt = None        strt = None        colored = None        effectcolora = None        effectcolorb = None        nmoftiles = None        n = None        g = None        h = None        rct = None        getrct = None        getrect = None        rnd = None        dp = None        gtrect = None        dir = None        d = None        ps = None        ps2n = None        seed = None        dsplcpoint = None        gtrect1 = None        gtrect2 = None        rct1 = None        rct2 = None        tag = None        ps1 = None        ps2 = None        steps = None        dr = None        ornt = None        degdir = None        stp = None        pos = None        dpsl = None        dp1 = None        pnt = None        img = None        r = None        mdpoint = None        lst = None        tlt = None        tilecat = None        a = None        actualtlps = None        nextisfloor = None        previsfloor = None        b = None        blnd = None        if LingoGlobal.ToBool(self.checkdrinternal(tl.nm)):             tileimage = self._global.member(tl.nm).image                    else:            tileimage = self.cacheloadimage(LingoGlobal.concat("Graphics",self._global.the_dirSeparator,tl.nm,".png"))                    q = LingoGlobal.op_sub(q,self.gRenderCameraTilePos.loch)        c = LingoGlobal.op_sub(c,self.gRenderCameraTilePos.locv)        mdpnt = LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(0.5000)),LingoNumber(0.4999)).integer,LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(0.5000)),LingoNumber(0.4999)).integer)        strt = LingoGlobal.op_add(LingoGlobal.op_sub(LingoGlobal.point(q,c),mdpnt),LingoGlobal.point(LingoNumber(1),LingoNumber(1)))        colored = LingoGlobal.op_gt(tl.tags.getpos("colored"),LingoNumber(0))        if LingoGlobal.ToBool(colored):             self.gAnyDecals = LingoNumber(1)                    effectcolora = LingoGlobal.op_gt(tl.tags.getpos("effectColorA"),LingoNumber(0))        effectcolorb = LingoGlobal.op_gt(tl.tags.getpos("effectColorB"),LingoNumber(0))        match tl.tp.lower():             case "box":                nmoftiles = LingoGlobal.op_mul(tl.sz.loch,tl.sz.locv)                n = LingoNumber(1)                tmp_g=int(strt.loch)                while tmp_g < LingoGlobal.op_sub(LingoGlobal.op_add(strt.loch,tl.sz.loch),LingoNumber(1)):                     g = LingoNumber(tmp_g)                    tmp_h=int(strt.locv)                    while tmp_h < LingoGlobal.op_sub(LingoGlobal.op_add(strt.locv,tl.sz.locv),LingoNumber(1)):                         h = LingoNumber(tmp_h)                        rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(g,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(h,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(g,LingoNumber(20)),LingoGlobal.op_mul(h,LingoNumber(20)))                        getrct = LingoGlobal.rect(LingoNumber(20),LingoGlobal.op_mul(LingoGlobal.op_sub(n,LingoNumber(1)),LingoNumber(20)),LingoNumber(40),LingoGlobal.op_mul(n,LingoNumber(20)))                        self._global.member("vertImg").image.copypixels(tileimage,rct,getrct,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                        getrct = LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_sub(n,LingoNumber(1)),LingoNumber(20)),LingoNumber(20),LingoGlobal.op_mul(n,LingoNumber(20)))                        self._global.member("horiImg").image.copypixels(tileimage,rct,getrct,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                        n = LingoGlobal.op_add(n,LingoNumber(1))                        tmp_h = int(h)                        tmp_h += 1                                            tmp_g = int(g)                    tmp_g += 1                                    rct = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(strt,LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(strt,tl.sz),LingoNumber(20))),LingoGlobal.rect(LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles))),LingoGlobal.rect(-LingoNumber(20),-LingoNumber(20),-LingoNumber(20),-LingoNumber(20)))                getrect = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(tl.sz.locv,LingoNumber(20))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles))),LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(nmoftiles,LingoNumber(20)),LingoNumber(0),LingoGlobal.op_mul(nmoftiles,LingoNumber(20))))                rnd = self._global.random(tl.rnd)                getrect = LingoGlobal.op_add(getrect,LingoGlobal.rect(LingoGlobal.op_mul(getrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(getrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0)))                frntimg.copypixels(tileimage,rct,getrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))            case "voxelstruct":                if LingoGlobal.op_eq_b(l, LingoNumber(1)):                     dp = LingoNumber(0)                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                     dp = LingoNumber(10)                                    else:                    dp = LingoNumber(20)                                    rct = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(strt,LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(strt,tl.sz),LingoNumber(20))),LingoGlobal.rect(LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles))),LingoGlobal.rect(-LingoNumber(20),-LingoNumber(20),-LingoNumber(20),-LingoNumber(20)))                gtrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)))                if LingoGlobal.op_eq_b(tl.rnd, -LingoNumber(1)):                     rnd = LingoNumber(1)                    for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                         dir = LingoNumber(tmp_dir)                        if LingoGlobal.op_ne_b(LingoList(LingoNumber(0),LingoNumber(6)).getpos(self.afamvlvledit(LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.point(q,c),dir),self.gRenderCameraTilePos),LingoNumber(1))), LingoNumber(0)):                             break                                                    else:                            rnd = LingoGlobal.op_add(rnd,LingoNumber(1))                                                                                        else:                    rnd = self._global.random(tl.rnd)                                    if LingoGlobal.op_ne_b(tl.tags.getpos("ramp"), LingoNumber(0)):                     rnd = LingoNumber(2)                    if LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.op_add(LingoGlobal.point(q,c),self.gRenderCameraTilePos),LingoNumber(1)), LingoNumber(3)):                         rnd = LingoNumber(1)                                                            frntimg.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                d = -LingoNumber(1)                tmp_ps=int(LingoNumber(1))                while tmp_ps < tl.repeatl.count:                     ps = LingoNumber(tmp_ps)                    tmp_ps2n=int(LingoNumber(1))                    while tmp_ps2n < tl.repeatl[ps]:                         ps2n = LingoNumber(tmp_ps2n)                        d = LingoGlobal.op_add(d,LingoNumber(1))                        if LingoGlobal.op_add(d,dp) > LingoNumber(29):                             break                                                    else:                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                            if LingoGlobal.ToBool(colored):                                 if (LingoGlobal.op_eq_b(tl.tags.getpos("effectColorA"), LingoNumber(0)) and LingoGlobal.op_eq_b(tl.tags.getpos("effectColorB"), LingoNumber(0))):                                     self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,dp)),"dc")).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                                                            if LingoGlobal.ToBool(effectcolora):                                 self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            if LingoGlobal.ToBool(effectcolorb):                                 self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                                                    tmp_ps2n = int(ps2n)                        tmp_ps2n += 1                                            tmp_ps = int(ps)                    tmp_ps += 1                                                case "voxelstructrandomdisplacehorizontal" | "voxelstructrandomdisplacevertical":                if LingoGlobal.op_eq_b(l, LingoNumber(1)):                     dp = LingoNumber(0)                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                     dp = LingoNumber(10)                                    else:                    dp = LingoNumber(20)                                    rct = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(strt,LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(strt,tl.sz),LingoNumber(20))),LingoGlobal.rect(LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles))),LingoGlobal.rect(-LingoNumber(20),-LingoNumber(20),-LingoNumber(20),-LingoNumber(20)))                gtrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)))                seed = self._global.the_randomSeed                if LingoGlobal.op_eq_b(tl.tp, "voxelStructRandomDisplaceVertical"):                     self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,q)                    dsplcpoint = self._global.random(gtrect.height)                    gtrect1 = LingoGlobal.rect(gtrect.left,gtrect.top,gtrect.right,LingoGlobal.op_add(gtrect.top,dsplcpoint))                    gtrect2 = LingoGlobal.rect(gtrect.left,LingoGlobal.op_add(gtrect.top,dsplcpoint),gtrect.right,gtrect.bottom)                    rct1 = LingoGlobal.rect(rct.left,LingoGlobal.op_sub(rct.bottom,dsplcpoint),rct.right,rct.bottom)                    rct2 = LingoGlobal.rect(rct.left,rct.top,rct.right,LingoGlobal.op_sub(rct.bottom,dsplcpoint))                                    else:                    self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,c)                    dsplcpoint = self._global.random(gtrect.width)                    gtrect1 = LingoGlobal.rect(gtrect.left,gtrect.top,LingoGlobal.op_add(gtrect.left,dsplcpoint),gtrect.bottom)                    gtrect2 = LingoGlobal.rect(LingoGlobal.op_add(gtrect.left,dsplcpoint),gtrect.top,gtrect.right,gtrect.bottom)                    rct1 = LingoGlobal.rect(LingoGlobal.op_sub(rct.right,dsplcpoint),rct.top,rct.right,rct.bottom)                    rct2 = LingoGlobal.rect(rct.left,rct.top,LingoGlobal.op_sub(rct.right,dsplcpoint),rct.bottom)                                    self._global.the_randomSeed = seed                frntimg.copypixels(tileimage,rct1,LingoGlobal.op_add(gtrect1,LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                frntimg.copypixels(tileimage,rct2,LingoGlobal.op_add(gtrect2,LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                d = -LingoNumber(1)                tmp_ps=int(LingoNumber(1))                while tmp_ps < tl.repeatl.count:                     ps = LingoNumber(tmp_ps)                    tmp_ps2n=int(LingoNumber(1))                    while tmp_ps2n < tl.repeatl[ps]:                         ps2n = LingoNumber(tmp_ps2n)                        d = LingoGlobal.op_add(d,LingoNumber(1))                        if LingoGlobal.op_add(d,dp) > LingoNumber(29):                             break                                                    else:                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct1,LingoGlobal.op_add(LingoGlobal.op_add(gtrect1,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                            if LingoGlobal.ToBool(colored):                                 if (LingoGlobal.op_eq_b(tl.tags.getpos("effectColorA"), LingoNumber(0)) and LingoGlobal.op_eq_b(tl.tags.getpos("effectColorB"), LingoNumber(0))):                                     self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,dp)),"dc")).image.copypixels(tileimage,rct1,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect1,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                                                            if LingoGlobal.ToBool(effectcolora):                                 self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct1,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect1,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            if LingoGlobal.ToBool(effectcolorb):                                 self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct1,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect1,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct2,LingoGlobal.op_add(LingoGlobal.op_add(gtrect2,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                            if LingoGlobal.ToBool(colored):                                 if (LingoGlobal.op_eq_b(tl.tags.getpos("effectColorA"), LingoNumber(0)) and LingoGlobal.op_eq_b(tl.tags.getpos("effectColorB"), LingoNumber(0))):                                     self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,dp)),"dc")).image.copypixels(tileimage,rct2,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect2,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                                                            if LingoGlobal.ToBool(effectcolora):                                 self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct2,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect2,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            if LingoGlobal.ToBool(effectcolorb):                                 self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(d,dp)))).image.copypixels(tileimage,rct2,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect2,LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.height,LingoGlobal.op_sub(ps,LingoNumber(1))))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                                                    tmp_ps2n = int(ps2n)                        tmp_ps2n += 1                                            tmp_ps = int(ps)                    tmp_ps += 1                                                case "voxelstructrocktype":                if LingoGlobal.op_eq_b(l, LingoNumber(1)):                     dp = LingoNumber(0)                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                     dp = LingoNumber(10)                                    else:                    dp = LingoNumber(20)                                    rct = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(strt,LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(strt,tl.sz),LingoNumber(20))),LingoGlobal.rect(LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles))),LingoGlobal.rect(-LingoNumber(20),-LingoNumber(20),-LingoNumber(20),-LingoNumber(20)))                gtrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)))                rnd = self._global.random(tl.rnd)                tmp_d=int(dp)                while tmp_d < self.restrict(LingoGlobal.op_add(LingoGlobal.op_add(dp,LingoNumber(9)),LingoGlobal.op_mul(LingoNumber(10),LingoGlobal.op_ne(tl.specs2,LingoGlobal.VOID))),LingoNumber(0),LingoNumber(29)):                     d = LingoNumber(tmp_d)                    if LingoGlobal.ToBool(LingoList(LingoNumber(12),LingoNumber(8),LingoNumber(4)).getpos(d)):                         rnd = self._global.random(tl.rnd)                                            self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    if LingoGlobal.ToBool(colored):                         if (LingoGlobal.op_eq_b(tl.tags.getpos("effectColorA"), LingoNumber(0)) and LingoGlobal.op_eq_b(tl.tags.getpos("effectColorB"), LingoNumber(0))):                             self._global.member(LingoGlobal.concat("layer",self._global.str(d),"dc")).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                                            if LingoGlobal.ToBool(effectcolora):                         self._global.member(LingoGlobal.concat("gradientA",self._global.str(d))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                    if LingoGlobal.ToBool(effectcolorb):                         self._global.member(LingoGlobal.concat("gradientB",self._global.str(d))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                    tmp_d = int(d)                    tmp_d += 1                                                case "voxelstructsandtype":                if LingoGlobal.op_eq_b(l, LingoNumber(1)):                     dp = LingoNumber(1)                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                     dp = LingoNumber(11)                                    else:                    dp = LingoNumber(21)                                    rct = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(strt,LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(strt,tl.sz),LingoNumber(20))),LingoGlobal.rect(LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(-LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles),LingoGlobal.op_mul(LingoNumber(20),tl.bftiles))),LingoGlobal.rect(-LingoNumber(20),-LingoNumber(20),-LingoNumber(20),-LingoNumber(20)))                gtrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)))                tmp_d=int(dp)                while tmp_d < self.restrict(LingoGlobal.op_add(LingoGlobal.op_add(dp,LingoNumber(9)),LingoGlobal.op_mul(LingoNumber(10),LingoGlobal.op_ne(tl.specs2,LingoGlobal.VOID))),LingoNumber(1),LingoNumber(29)):                     d = LingoNumber(tmp_d)                    rnd = self._global.random(tl.rnd)                    self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    if LingoGlobal.ToBool(colored):                         if (LingoGlobal.op_eq_b(effectcolora, LingoGlobal.FALSE) and LingoGlobal.op_eq_b(effectcolorb, LingoGlobal.FALSE)):                             self._global.member(LingoGlobal.concat("layer",self._global.str(d),"dc")).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                                            if LingoGlobal.ToBool(effectcolora):                         self._global.member(LingoGlobal.concat("gradientA",self._global.str(d))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                    if LingoGlobal.ToBool(effectcolorb):                         self._global.member(LingoGlobal.concat("gradientB",self._global.str(d))).image.copypixels(tileimage,rct,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_add(gtrect,LingoGlobal.rect(LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(gtrect.width,LingoGlobal.op_sub(rnd,LingoNumber(1))),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(40),tl.bftiles)),tl.rnd),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                    tmp_d = int(d)                    tmp_d += 1                                                        for tmp_tag in tl.tags:             tag = LingoNumber(tmp_tag)            match tag.lower():                 case "chain holder":                    if dt.count > LingoNumber(2):                         if LingoGlobal.op_ne_b(dt[LingoNumber(3)], "NONE"):                             ps1 = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10.1000),LingoNumber(10.1000)))                            ps2 = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(dt[LingoNumber(3)],self.gRenderCameraTilePos)),LingoGlobal.point(LingoNumber(10.1000),LingoNumber(10.1000)))                            if LingoGlobal.op_eq_b(l, LingoNumber(1)):                                 dp = LingoNumber(2)                                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                                 dp = LingoNumber(12)                                                            else:                                dp = LingoNumber(22)                                                            steps = LingoGlobal.op_add(LingoGlobal.op_div(self.diag(ps1,ps2),LingoNumber(12.0000)),LingoNumber(0.4999)).integer                            dr = self.movetopoint(ps1,ps2,LingoNumber(1.0000))                            ornt = LingoGlobal.op_sub(self._global.random(LingoNumber(2)),LingoNumber(1))                            degdir = self.lookatpoint(ps1,ps2)                            stp = LingoGlobal.op_mul(self._global.random(LingoNumber(100)),LingoNumber(0.0100))                            tmp_q=int(LingoNumber(1))                            while tmp_q < steps:                                 q = LingoNumber(tmp_q)                                pos = LingoGlobal.op_add(ps1,LingoGlobal.op_mul(LingoGlobal.op_mul(dr,LingoNumber(12)),LingoGlobal.op_sub(q,stp)))                                if LingoGlobal.ToBool(ornt):                                     rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(6),-LingoNumber(10),LingoNumber(6),LingoNumber(10)))                                    gtrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(12),LingoNumber(20))                                    ornt = LingoNumber(0)                                                                    else:                                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(2),-LingoNumber(10),LingoNumber(2),LingoNumber(10)))                                    gtrect = LingoGlobal.rect(LingoNumber(13),LingoNumber(0),LingoNumber(16),LingoNumber(20))                                    ornt = LingoNumber(1)                                                                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("bigChainSegment").image,self.rotatetoquad(rct,degdir),gtrect,LingoPropertyList(LingoSymbol("color"), self.gLOprops.pals[self.gLOprops.pal].detcol,LingoSymbol("ink"), LingoNumber(36)))
                                tmp_q = int(q)                                tmp_q += 1                                                                                                                        case "fanblade":                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(10)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(20)                                            else:                        dp = LingoNumber(25)                                            rct = LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(23),-LingoNumber(23),LingoNumber(23),LingoNumber(23)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c))))                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_sub(dp,LingoNumber(2))))).image.copypixels(self._global.member("fanBlade").image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),self._global.member("fanBlade").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("fanBlade").image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),self._global.member("fanBlade").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))                case "big wheel":                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dpsl = LingoList(LingoNumber(0),LingoNumber(7))                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dpsl = LingoList(LingoNumber(9),LingoNumber(17))                                            else:                        dpsl = LingoList(LingoNumber(19),LingoNumber(27))                                            rct = LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(90),-LingoNumber(90),LingoNumber(90),LingoNumber(90)),LingoGlobal.rect(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10)))))                    for tmp_dp1 in dpsl:                         dp1 = LingoNumber(tmp_dp1)                        rnd = self._global.random(LingoNumber(360))                        for tmp_dp in LingoList(dp1,LingoGlobal.op_add(dp1,LingoNumber(1)),LingoGlobal.op_add(dp1,LingoNumber(2))):                             dp = LingoNumber(tmp_dp)                            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("Big Wheel Graf").image,self.rotatetoquad(rct,LingoGlobal.op_add(rnd,LingoNumber(0.0010))),self._global.member("Big Wheel Graf").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))                                                            case "sawblades":                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dpsl = LingoList(LingoNumber(0),LingoNumber(7))                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dpsl = LingoList(LingoNumber(9),LingoNumber(17))                                            else:                        dpsl = LingoList(LingoNumber(19),LingoNumber(27))                                            rct = LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(90),-LingoNumber(90),LingoNumber(90),LingoNumber(90)),LingoGlobal.rect(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10)))))                    for tmp_dp1 in dpsl:                         dp1 = LingoNumber(tmp_dp1)                        rnd = self._global.random(LingoNumber(360))                        for tmp_dp in LingoList(dp1):                             dp = LingoNumber(tmp_dp)                            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("sawbladeGraf").image,self.rotatetoquad(rct,LingoGlobal.op_add(rnd,LingoNumber(0.0010))),self._global.member("sawbladeGraf").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))                                                            case "randomcords":                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = self._global.random(LingoNumber(9))                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoGlobal.op_add(LingoNumber(10),self._global.random(LingoNumber(9)))                                            else:                        dp = LingoGlobal.op_add(LingoNumber(20),self._global.random(LingoNumber(9)))                                            pnt = self.givemiddleoftile(LingoGlobal.point(q,LingoGlobal.op_add(c,LingoGlobal.op_div(tl.sz.locv,LingoNumber(2)))))                    rct = LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(50),-LingoNumber(50),LingoNumber(50),LingoNumber(50)),LingoGlobal.rect(pnt,pnt))                    rnd = self._global.random(LingoNumber(7))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("randomCords").image,self.rotatetoquad(rct,LingoGlobal.op_add(-LingoNumber(30),self._global.random(LingoNumber(60)))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(100)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(100)),LingoNumber(100)),LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                case "big sign":                    img = self._global.image(LingoNumber(60),LingoNumber(60),LingoNumber(1))                    rnd = self._global.random(LingoNumber(20))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(3),LingoNumber(29),LingoNumber(33))                    img.copypixels(self._global.member("bigSigns1").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(26)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(26)),LingoNumber(30)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    rnd = self._global.random(LingoNumber(20))                    rct = LingoGlobal.rect(LingoGlobal.op_add(LingoNumber(3),LingoNumber(28)),LingoNumber(3),LingoGlobal.op_add(LingoNumber(29),LingoNumber(28)),LingoNumber(33))                    img.copypixels(self._global.member("bigSigns1").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(26)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(26)),LingoNumber(30)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(35),LingoGlobal.op_add(LingoNumber(3),LingoNumber(55)),LingoGlobal.op_add(LingoNumber(35),LingoNumber(24)))                    img.copypixels(self._global.member("bigSigns2").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(55)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(55)),LingoNumber(24)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)))):                         r = LingoNumber(tmp_r)                        frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                    self.copypixelstoeffectcolor("A",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(30),-LingoNumber(30))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(30),LingoNumber(30)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1.0000))                case "big sign b":                    img = self._global.image(LingoNumber(60),LingoNumber(60),LingoNumber(1))                    rnd = self._global.random(LingoNumber(20))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(3),LingoNumber(29),LingoNumber(33))                    img.copypixels(self._global.member("bigSigns1").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(26)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(26)),LingoNumber(30)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    rnd = self._global.random(LingoNumber(20))                    rct = LingoGlobal.rect(LingoGlobal.op_add(LingoNumber(3),LingoNumber(28)),LingoNumber(3),LingoGlobal.op_add(LingoNumber(29),LingoNumber(28)),LingoNumber(33))                    img.copypixels(self._global.member("bigSigns1").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(26)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(26)),LingoNumber(30)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(35),LingoGlobal.op_add(LingoNumber(3),LingoNumber(55)),LingoGlobal.op_add(LingoNumber(35),LingoNumber(24)))                    img.copypixels(self._global.member("bigSigns2").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(55)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(55)),LingoNumber(24)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)))):                         r = LingoNumber(tmp_r)                        frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                    self.copypixelstoeffectcolor("B",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(30),-LingoNumber(30))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(30),LingoNumber(30)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1.0000))                case "big western sign" | "big western sign tilted":                    img = self._global.image(LingoNumber(36),LingoNumber(48),LingoNumber(1))                    rnd = self._global.random(LingoNumber(20))                    img.copypixels(self._global.member("bigWesternSigns").image,img.rect,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(36)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(36)),LingoNumber(48)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    mdpoint = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(0)))                    lst = LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))                    if LingoGlobal.op_eq_b(tag, "Big Western Sign Tilted"):                         tlt = LingoGlobal.op_add(-LingoNumber(45.1000),self._global.random(LingoNumber(90)))                        for tmp_r in lst:                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(mdpoint,mdpoint),LingoGlobal.rect(-LingoNumber(18),-LingoNumber(24),LingoNumber(18),LingoNumber(24))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),tlt),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(36),LingoNumber(48)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                                            else:                        for tmp_r in lst:                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(mdpoint,mdpoint),LingoGlobal.rect(-LingoNumber(18),-LingoNumber(24),LingoNumber(18),LingoNumber(24))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(36),LingoNumber(48)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                                            if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            self.copypixelstoeffectcolor("A",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpoint,LingoGlobal.point(-LingoNumber(25),-LingoNumber(30))),LingoGlobal.op_add(mdpoint,LingoGlobal.point(LingoNumber(25),LingoNumber(30)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1))                case "big western sign b" | "big western sign tilted b":                    img = self._global.image(LingoNumber(36),LingoNumber(48),LingoNumber(1))                    rnd = self._global.random(LingoNumber(20))                    img.copypixels(self._global.member("bigWesternSigns").image,img.rect,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(36)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(36)),LingoNumber(48)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    mdpoint = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(0)))                    lst = LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))                    if LingoGlobal.op_eq_b(tag, "Big Western Sign Tilted B"):                         tlt = LingoGlobal.op_add(-LingoNumber(45.1000),self._global.random(LingoNumber(90)))                        for tmp_r in lst:                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(mdpoint,mdpoint),LingoGlobal.rect(-LingoNumber(18),-LingoNumber(24),LingoNumber(18),LingoNumber(24))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),tlt),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(36),LingoNumber(48)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                                            else:                        for tmp_r in lst:                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(mdpoint,mdpoint),LingoGlobal.rect(-LingoNumber(18),-LingoNumber(24),LingoNumber(18),LingoNumber(24))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(36),LingoNumber(48)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                                            if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            self.copypixelstoeffectcolor("B",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpoint,LingoGlobal.point(-LingoNumber(25),-LingoNumber(30))),LingoGlobal.op_add(mdpoint,LingoGlobal.point(LingoNumber(25),LingoNumber(30)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1))                case "small asian sign" | "small asian sign on wall":                    img = self._global.image(LingoNumber(20),LingoNumber(20),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(20),LingoNumber(18))                    img.copypixels(self._global.member("smallAsianSigns").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(20)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(20)),LingoNumber(17)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(tag, "Small Asian Sign"):                         for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(0)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(10)                                                    else:                            dp = LingoNumber(20)                                                    mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("A",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1))                    else:                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(8)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(18)                                                    else:                            dp = LingoNumber(28)                                                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("A",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1))                                    case "small asian sign b" | "small asian sign on wall b":                    img = self._global.image(LingoNumber(20),LingoNumber(20),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(20),LingoNumber(18))                    img.copypixels(self._global.member("smallAsianSigns").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(20)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(20)),LingoNumber(17)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(tag, "Small Asian Sign B"):                         for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(0)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(10)                                                    else:                            dp = LingoNumber(20)                                                    mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("B",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1))                    else:                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(8)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(18)                                                    else:                            dp = LingoNumber(28)                                                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("B",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1))                                    case "small asian sign station" | "small asian sign on wall station":                    img = self._global.image(LingoNumber(20),LingoNumber(20),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(20),LingoNumber(18))                    img.copypixels(self._global.member("smallAsianSignsStation").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(20)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(20)),LingoNumber(17)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(tag, "Small Asian Sign Station"):                         for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(0)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(10)                                                    else:                            dp = LingoNumber(20)                                                    mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("A",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1))                    else:                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(8)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(18)                                                    else:                            dp = LingoNumber(28)                                                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("A",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1))                                    case "small asian sign station b" | "small asian sign on wall station b":                    img = self._global.image(LingoNumber(20),LingoNumber(20),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(20),LingoNumber(18))                    img.copypixels(self._global.member("smallAsianSignsStation").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(20)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(20)),LingoNumber(17)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(tag, "Small Asian Sign Station B"):                         for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(0)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(10)                                                    else:                            dp = LingoNumber(20)                                                    mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("B",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1))                    else:                        if LingoGlobal.op_eq_b(l, LingoNumber(1)):                             dp = LingoNumber(8)                                                    elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                             dp = LingoNumber(18)                                                    else:                            dp = LingoNumber(28)                                                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255)))):                             r = LingoNumber(tmp_r)                            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c)))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                        mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))                        self.copypixelstoeffectcolor("B",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(13),-LingoNumber(13))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(13),LingoNumber(13)))),"bigSignGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(60),LingoNumber(60)),LingoNumber(1),LingoNumber(1))                                    case "glass":                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         rct = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(-LingoNumber(10),tl.sz.loch),LingoGlobal.op_mul(-LingoNumber(10),tl.sz.locv),LingoGlobal.op_mul(LingoNumber(10),tl.sz.loch),LingoGlobal.op_mul(LingoNumber(10),tl.sz.locv)),LingoGlobal.rect(self.givemiddleoftile(LingoGlobal.point(q,c)),self.givemiddleoftile(LingoGlobal.point(q,c))))                        self._global.member("glassImage").image.copypixels(LingoImage.Pxl,rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                                    case "harvester":                    self.renderharvesterdetails(q,c,l,tl,frntimg,dt)                case "temple floor":                    tilecat = LingoNumber(0)                    tmp_a=int(LingoNumber(1))                    while tmp_a < self.gTiles.count:                         a = LingoNumber(tmp_a)                        if LingoGlobal.op_eq_b(self.gTiles[a].nm, "Temple Stone"):                             tilecat = a                            break                                                    tmp_a = int(a)                        tmp_a += 1                                            actualtlps = LingoGlobal.op_add(LingoGlobal.point(q,c),self.gRenderCameraTilePos)                    nextisfloor = LingoNumber(0)                    if LingoGlobal.op_add(actualtlps.loch,LingoNumber(8)) <= self.gTEprops.tlmatrix.count:                         if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[LingoGlobal.op_add(actualtlps.loch,LingoNumber(8))][actualtlps.locv][l].tp, "tileHead"):                             if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[LingoGlobal.op_add(actualtlps.loch,LingoNumber(8))][actualtlps.locv][l].data[LingoNumber(2)], "Temple Floor"):                                 nextisfloor = LingoNumber(1)                                                                                                        previsfloor = LingoNumber(0)                    if LingoGlobal.op_sub(actualtlps.loch,LingoNumber(8)) > LingoNumber(0):                         if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[LingoGlobal.op_sub(actualtlps.loch,LingoNumber(8))][actualtlps.locv][l].tp, "tileHead"):                             if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[LingoGlobal.op_sub(actualtlps.loch,LingoNumber(8))][actualtlps.locv][l].data[LingoNumber(2)], "Temple Floor"):                                 previsfloor = LingoNumber(1)                                                                                                        if LingoGlobal.ToBool(previsfloor):                         frntimg = self.drawatiletile(LingoGlobal.op_sub(LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch),LingoNumber(4)),LingoGlobal.op_sub(LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv),LingoNumber(1)),l,self.gTiles[tilecat].tls[LingoNumber(13)],frntimg)                                            else:                        frntimg = self.drawatiletile(LingoGlobal.op_sub(LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch),LingoNumber(3)),LingoGlobal.op_sub(LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv),LingoNumber(1)),l,self.gTiles[tilecat].tls[LingoNumber(7)],frntimg)                                            if LingoGlobal.op_eq_b(nextisfloor, LingoNumber(0)):                         frntimg = self.drawatiletile(LingoGlobal.op_add(LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch),LingoNumber(4)),LingoGlobal.op_sub(LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv),LingoNumber(1)),l,self.gTiles[tilecat].tls[LingoNumber(8)],frntimg)                                                            case "larger sign":                    img = self._global.image(LingoGlobal.op_add(LingoNumber(80),LingoNumber(6)),LingoGlobal.op_add(LingoNumber(100),LingoNumber(6)),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(3),LingoNumber(83),LingoNumber(103))                    img.copypixels(self._global.member("largerSigns").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(80)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(80)),LingoNumber(100)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            mdpnt = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(0)))                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)))):                         r = LingoNumber(tmp_r)                        tmp_d=int(LingoNumber(0))                        while tmp_d < LingoNumber(1):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,d)))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            tmp_d = int(d)                            tmp_d += 1                                                                        self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member("largeSignGrad2").image.copypixels(self._global.member("largeSignGrad").image,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)))
                    tmp_a=int(LingoNumber(0))                    while tmp_a < LingoNumber(6):                         a = LingoNumber(tmp_a)                        tmp_b=int(LingoNumber(0))                        while tmp_b < LingoNumber(13):                             b = LingoNumber(tmp_b)                            rct = LingoGlobal.rect(LingoGlobal.op_sub(LingoGlobal.op_mul(a,LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(b,LingoNumber(8)),LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(a,LingoNumber(1)),LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(b,LingoNumber(1)),LingoNumber(8)),LingoNumber(1)))                            if LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 blnd = self._global.random(self._global.random(LingoNumber(100)))                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))
                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))                            elif LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)),LingoSymbol("blend"), self._global.random(self._global.random(LingoNumber(60)))))                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,rct.top,rct.right,LingoGlobal.op_add(rct.top,LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,LingoGlobal.op_add(rct.top,LingoNumber(1)),LingoGlobal.op_add(rct.left,LingoNumber(1)),rct.bottom),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            tmp_b = int(b)                            tmp_b += 1                                                    tmp_a = int(a)                        tmp_a += 1                                            self.copypixelstoeffectcolor("A",LingoGlobal.op_add(dp,LingoNumber(1)),LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(43),-LingoNumber(53))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(43),LingoNumber(53)))),"largeSignGrad2",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoNumber(1),LingoNumber(1.0000))                case "larger sign b":                    img = self._global.image(LingoGlobal.op_add(LingoNumber(80),LingoNumber(6)),LingoGlobal.op_add(LingoNumber(100),LingoNumber(6)),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(3),LingoNumber(83),LingoNumber(103))                    img.copypixels(self._global.member("largerSigns").image,rct,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(80)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(80)),LingoNumber(100)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            mdpnt = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(0)))                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)))):                         r = LingoNumber(tmp_r)                        tmp_d=int(LingoNumber(0))                        while tmp_d < LingoNumber(1):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,d)))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            tmp_d = int(d)                            tmp_d += 1                                                                        self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member("largeSignGrad2").image.copypixels(self._global.member("largeSignGrad").image,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)))
                    tmp_a=int(LingoNumber(0))                    while tmp_a < LingoNumber(6):                         a = LingoNumber(tmp_a)                        tmp_b=int(LingoNumber(0))                        while tmp_b < LingoNumber(13):                             b = LingoNumber(tmp_b)                            rct = LingoGlobal.rect(LingoGlobal.op_sub(LingoGlobal.op_mul(a,LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(b,LingoNumber(8)),LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(a,LingoNumber(1)),LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(b,LingoNumber(1)),LingoNumber(8)),LingoNumber(1)))                            if LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 blnd = self._global.random(self._global.random(LingoNumber(100)))                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))
                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))                            elif LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)),LingoSymbol("blend"), self._global.random(self._global.random(LingoNumber(60)))))                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,rct.top,rct.right,LingoGlobal.op_add(rct.top,LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,LingoGlobal.op_add(rct.top,LingoNumber(1)),LingoGlobal.op_add(rct.left,LingoNumber(1)),rct.bottom),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            tmp_b = int(b)                            tmp_b += 1                                                    tmp_a = int(a)                        tmp_a += 1                                            self.copypixelstoeffectcolor("B",LingoGlobal.op_add(dp,LingoNumber(1)),LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(43),-LingoNumber(53))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(43),LingoNumber(53)))),"largeSignGrad2",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoNumber(1),LingoNumber(1.0000))                case "station larger sign":                    img = self._global.image(LingoGlobal.op_add(LingoNumber(80),LingoNumber(6)),LingoGlobal.op_add(LingoNumber(100),LingoNumber(6)),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(3),LingoNumber(83),LingoNumber(103))                    img.copypixels(self._global.member("largerSignsStation").image,rct,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(80)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(80)),LingoNumber(100)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            mdpnt = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(0)))                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)))):                         r = LingoNumber(tmp_r)                        tmp_d=int(LingoNumber(0))                        while tmp_d < LingoNumber(1):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,d)))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            tmp_d = int(d)                            tmp_d += 1                                                                        self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member("largeSignGrad2").image.copypixels(self._global.member("largeSignGrad").image,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)))
                    tmp_a=int(LingoNumber(0))                    while tmp_a < LingoNumber(6):                         a = LingoNumber(tmp_a)                        tmp_b=int(LingoNumber(0))                        while tmp_b < LingoNumber(13):                             b = LingoNumber(tmp_b)                            rct = LingoGlobal.rect(LingoGlobal.op_sub(LingoGlobal.op_mul(a,LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(b,LingoNumber(8)),LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(a,LingoNumber(1)),LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(b,LingoNumber(1)),LingoNumber(8)),LingoNumber(1)))                            if LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 blnd = self._global.random(self._global.random(LingoNumber(100)))                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))
                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))                            elif LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)),LingoSymbol("blend"), self._global.random(self._global.random(LingoNumber(60)))))                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,rct.top,rct.right,LingoGlobal.op_add(rct.top,LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,LingoGlobal.op_add(rct.top,LingoNumber(1)),LingoGlobal.op_add(rct.left,LingoNumber(1)),rct.bottom),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            tmp_b = int(b)                            tmp_b += 1                                                    tmp_a = int(a)                        tmp_a += 1                                            self.copypixelstoeffectcolor("A",LingoGlobal.op_add(dp,LingoNumber(1)),LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(43),-LingoNumber(53))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(43),LingoNumber(53)))),"largeSignGrad2",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoNumber(1),LingoNumber(1.0000))                case "station larger sign b":                    img = self._global.image(LingoGlobal.op_add(LingoNumber(80),LingoNumber(6)),LingoGlobal.op_add(LingoNumber(100),LingoNumber(6)),LingoNumber(1))                    rnd = self._global.random(LingoNumber(14))                    rct = LingoGlobal.rect(LingoNumber(3),LingoNumber(3),LingoNumber(83),LingoNumber(103))                    img.copypixels(self._global.member("largerSignsStation").image,rct,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(80)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(80)),LingoNumber(100)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(0)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(10)                                            else:                        dp = LingoNumber(20)                                            mdpnt = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(0)))                    for tmp_r in LingoList(LingoList(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(-LingoNumber(3),-LingoNumber(3)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))),LingoList(LingoGlobal.point(LingoNumber(3),LingoNumber(3)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(2),-LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))),LingoList(LingoGlobal.point(LingoNumber(2),LingoNumber(2)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)))):                         r = LingoNumber(tmp_r)                        tmp_d=int(LingoNumber(0))                        while tmp_d < LingoNumber(1):                             d = LingoNumber(tmp_d)                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,d)))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))
                            tmp_d = int(d)                            tmp_d += 1                                                                        self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(dp,LingoNumber(1))))).image.copypixels(img,LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(43),-LingoNumber(53),LingoNumber(43),LingoNumber(53)),LingoGlobal.rect(mdpnt,mdpnt)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member("largeSignGrad2").image.copypixels(self._global.member("largeSignGrad").image,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(80),LingoNumber(100)))
                    tmp_a=int(LingoNumber(0))                    while tmp_a < LingoNumber(6):                         a = LingoNumber(tmp_a)                        tmp_b=int(LingoNumber(0))                        while tmp_b < LingoNumber(13):                             b = LingoNumber(tmp_b)                            rct = LingoGlobal.rect(LingoGlobal.op_sub(LingoGlobal.op_mul(a,LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(b,LingoNumber(8)),LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(a,LingoNumber(1)),LingoNumber(16)),LingoNumber(6)),LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_add(b,LingoNumber(1)),LingoNumber(8)),LingoNumber(1)))                            if LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 blnd = self._global.random(self._global.random(LingoNumber(100)))                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))
                                self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoGlobal.op_div(blnd,LingoNumber(2))))                            elif LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                                 self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(0),LingoNumber(0))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)),LingoSymbol("blend"), self._global.random(self._global.random(LingoNumber(60)))))                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,rct.top,rct.right,LingoGlobal.op_add(rct.top,LingoNumber(1))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            self._global.member("largeSignGrad2").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(rct.left,LingoGlobal.op_add(rct.top,LingoNumber(1)),LingoGlobal.op_add(rct.left,LingoNumber(1)),rct.bottom),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("blend"), LingoNumber(20)))
                            tmp_b = int(b)                            tmp_b += 1                                                    tmp_a = int(a)                        tmp_a += 1                                            self.copypixelstoeffectcolor("B",LingoGlobal.op_add(dp,LingoNumber(1)),LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(43),-LingoNumber(53))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(43),LingoNumber(53)))),"largeSignGrad2",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(86),LingoNumber(106)),LingoNumber(1),LingoNumber(1.0000))                case "station lamp":                    img = self._global.image(LingoNumber(40),LingoNumber(20),LingoNumber(1))                    rnd = self._global.random(LingoNumber(1))                    rct = LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(39),LingoNumber(19))                    img.copypixels(self._global.member("StationLamp").image,img.rect,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(rnd,LingoNumber(1)),LingoNumber(40)),LingoNumber(0),LingoGlobal.op_mul(rnd,LingoNumber(40)),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0))))
                    for tmp_r in LingoList(LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)))):                         r = LingoNumber(tmp_r)                        frntimg.copypixels(img,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(20),-LingoNumber(10),LingoNumber(20),LingoNumber(10)),LingoGlobal.rect(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(11),LingoNumber(1))),LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(11),LingoNumber(1))))),LingoGlobal.rect(r[LingoNumber(1)],r[LingoNumber(1)])),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(40),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), r[LingoNumber(2)]))                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(1)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(11)                                            else:                        dp = LingoNumber(21)                                            mdpnt = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(11),LingoNumber(1)))                    self.copypixelstoeffectcolor("A",dp,LingoGlobal.rect(LingoGlobal.op_add(mdpnt,LingoGlobal.point(-LingoNumber(20),-LingoNumber(10))),LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoNumber(20),LingoNumber(10)))),"StationLampGradient",LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(40),LingoNumber(20)),LingoNumber(1))                case "lumiaireh":                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(7)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(17)                                            else:                        dp = LingoNumber(27)                                            rct = LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(29),-LingoNumber(11),LingoNumber(29),LingoNumber(11)),LingoGlobal.rect(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10)))))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("LumiaireH").image,rct,self._global.member("LumiaireH").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(dp))).image.copypixels(self._global.member("LumHGrad").image,rct,self._global.member("LumHGrad").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                case "lumiairev":                    if LingoGlobal.op_eq_b(l, LingoNumber(1)):                         dp = LingoNumber(7)                                            elif LingoGlobal.op_eq_b(l, LingoNumber(2)):                         dp = LingoNumber(17)                                            else:                        dp = LingoNumber(27)                                            rct = LingoGlobal.op_add(LingoGlobal.rect(-LingoNumber(11),-LingoNumber(29),LingoNumber(11),LingoNumber(29)),LingoGlobal.rect(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.point(q,c)),LingoGlobal.point(LingoNumber(10),LingoNumber(10)))))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("LumiaireV").image,rct,self._global.member("LumiaireV").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(dp))).image.copypixels(self._global.member("LumVGrad").image,rct,self._global.member("LumVGrad").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                                    return frntimg                    def drawhorizontalsurface(self, row, dpt):         pnt1 = None        pnt2 = None        q = None        dp = None        pnt1 = LingoGlobal.point(LingoNumber(0),LingoGlobal.op_mul(row,LingoNumber(20)))        pnt2 = LingoGlobal.point(LingoGlobal.op_mul(self.gLOprops.size.loch,LingoNumber(20)),LingoGlobal.op_mul(row,LingoNumber(20)))        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(10):             q = LingoNumber(tmp_q)            dp = LingoGlobal.op_sub(LingoGlobal.op_add(dpt,LingoNumber(10)),q)            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("horiImg").image,LingoGlobal.rect(LingoGlobal.op_add(pnt1,LingoGlobal.point(LingoNumber(0),LingoNumber(15))),LingoGlobal.op_add(pnt2,LingoGlobal.point(LingoNumber(0),LingoNumber(20)))),LingoGlobal.op_add(LingoGlobal.rect(pnt1,pnt2),LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_sub(LingoNumber(20),q),LingoNumber(0),LingoGlobal.op_sub(LingoNumber(21),q))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
            tmp_q = int(q)            tmp_q += 1                    pnt1 = LingoGlobal.point(LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_sub(row,LingoNumber(1)),LingoNumber(20)))        pnt2 = LingoGlobal.point(LingoGlobal.op_mul(self.gLOprops.size.loch,LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(row,LingoNumber(1)),LingoNumber(20)))        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(10):             q = LingoNumber(tmp_q)            dp = LingoGlobal.op_sub(LingoGlobal.op_add(dpt,LingoNumber(10)),q)            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("horiImg").image,LingoGlobal.rect(LingoGlobal.op_add(pnt1,LingoGlobal.point(LingoNumber(0),LingoNumber(0))),LingoGlobal.op_add(pnt2,LingoGlobal.point(LingoNumber(0),LingoNumber(5)))),LingoGlobal.op_add(LingoGlobal.rect(pnt1,pnt2),LingoGlobal.rect(LingoNumber(0),q,LingoNumber(0),LingoGlobal.op_add(q,LingoNumber(1)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
            tmp_q = int(q)            tmp_q += 1                            return None            def drawverticalsurface(self, col, dpt):         pnt1 = None        pnt2 = None        q = None        dp = None        pnt1 = LingoGlobal.point(LingoGlobal.op_mul(col,LingoNumber(20)),LingoNumber(0))        pnt2 = LingoGlobal.point(LingoGlobal.op_mul(col,LingoNumber(20)),LingoGlobal.op_mul(self.gLOprops.size.locv,LingoNumber(20)))        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(10):             q = LingoNumber(tmp_q)            dp = LingoGlobal.op_sub(LingoGlobal.op_add(dpt,LingoNumber(10)),q)            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("vertImg").image,LingoGlobal.rect(LingoGlobal.op_add(pnt1,LingoGlobal.point(LingoNumber(15),LingoNumber(0))),LingoGlobal.op_add(pnt2,LingoGlobal.point(LingoNumber(20),LingoNumber(0)))),LingoGlobal.op_add(LingoGlobal.rect(pnt1,pnt2),LingoGlobal.rect(LingoGlobal.op_sub(LingoNumber(20),q),LingoNumber(0),LingoGlobal.op_sub(LingoNumber(21),q),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
            tmp_q = int(q)            tmp_q += 1                    pnt1 = LingoGlobal.point(LingoGlobal.op_mul(LingoGlobal.op_sub(col,LingoNumber(1)),LingoNumber(20)),LingoNumber(0))        pnt2 = LingoGlobal.point(LingoGlobal.op_mul(LingoGlobal.op_sub(col,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(self.gLOprops.size.locv,LingoNumber(20)))        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(10):             q = LingoNumber(tmp_q)            dp = LingoGlobal.op_sub(LingoGlobal.op_add(dpt,LingoNumber(10)),q)            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("vertImg").image,LingoGlobal.rect(LingoGlobal.op_add(pnt1,LingoGlobal.point(LingoNumber(0),LingoNumber(0))),LingoGlobal.op_add(pnt2,LingoGlobal.point(LingoNumber(5),LingoNumber(0)))),LingoGlobal.op_add(LingoGlobal.rect(pnt1,pnt2),LingoGlobal.rect(q,LingoNumber(0),LingoGlobal.op_add(q,LingoNumber(1)),LingoNumber(0))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
            tmp_q = int(q)            tmp_q += 1                            return None            def givedptfromcol(self, col):         val = None        q = None        val = LingoNumber(255)        tmp_q=int(LingoNumber(0))        while tmp_q < LingoNumber(19):             q = LingoNumber(tmp_q)            self._global.put(val)
            val = LingoGlobal.op_mul(val,LingoNumber(0.9000)).integer            tmp_q = int(q)            tmp_q += 1                            return None            def drawpipetypetile(self, mat, tl, layer):         savseed = None        gtpos = None        nbrs = None        dir = None        mem = None        startlayer = None        rct = None        d = None        q = None        gt = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        gtpos = LingoGlobal.point(LingoNumber(0),LingoNumber(0))        match self.gLEProps.matrix[tl.loch][tl.locv][layer][LingoNumber(1)] if self.gLEProps.matrix[tl.loch][tl.locv][layer][LingoNumber(1)] is not None else 9999999999:             case 1:                nbrs = ""                for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                     dir = LingoNumber(tmp_dir)                    if (LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)) and LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.op_add(tl,dir),layer), LingoNumber(1))):                         nbrs = LingoGlobal.concat(nbrs,"1")                                            else:                        nbrs = LingoGlobal.concat(nbrs,self._global.str(self.ismytilesetopentothistile(mat,LingoGlobal.op_add(tl,dir),layer)))                                                            match nbrs.lower():                     case "0101":                        gtpos = LingoGlobal.point(LingoNumber(2),LingoNumber(2))                                            case "1010":                        gtpos = LingoGlobal.point(LingoNumber(4),LingoNumber(2))                                            case "1111":                        gtpos = LingoGlobal.point(LingoNumber(6),LingoNumber(2))                                            case "0111":                        gtpos = LingoGlobal.point(LingoNumber(8),LingoNumber(2))                                            case "1101":                        gtpos = LingoGlobal.point(LingoNumber(10),LingoNumber(2))                                            case "1110":                        gtpos = LingoGlobal.point(LingoNumber(12),LingoNumber(2))                                            case "1011":                        gtpos = LingoGlobal.point(LingoNumber(14),LingoNumber(2))                                            case "0011":                        gtpos = LingoGlobal.point(LingoNumber(16),LingoNumber(2))                                            case "1001":                        gtpos = LingoGlobal.point(LingoNumber(18),LingoNumber(2))                                            case "1100":                        gtpos = LingoGlobal.point(LingoNumber(20),LingoNumber(2))                                            case "0110":                        gtpos = LingoGlobal.point(LingoNumber(22),LingoNumber(2))                                            case "1000":                        gtpos = LingoGlobal.point(LingoNumber(24),LingoNumber(2))                                            case "0010":                        gtpos = LingoGlobal.point(LingoNumber(26),LingoNumber(2))                                            case "0100":                        gtpos = LingoGlobal.point(LingoNumber(28),LingoNumber(2))                                            case "0001":                        gtpos = LingoGlobal.point(LingoNumber(30),LingoNumber(2))                                            case "0000":                        if LingoGlobal.ToBool(self.gDRMatFixes):                             gtpos = LingoGlobal.point(LingoNumber(40),LingoNumber(2))                                                                                        if LingoGlobal.op_eq_b(mat, "small Pipes"):                     self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(5))))).image.copypixels(self._global.member("frameWork").image,LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.loch,LingoNumber(1)),self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.locv,LingoNumber(1)),self.gRenderCameraTilePos.locv),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.loch,self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.locv,self.gRenderCameraTilePos.locv),LingoNumber(20))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(20),LingoNumber(20)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                            case 3:                gtpos = LingoGlobal.point(LingoNumber(32),LingoNumber(2))                            case 2:                gtpos = LingoGlobal.point(LingoNumber(34),LingoNumber(2))                            case 4:                gtpos = LingoGlobal.point(LingoNumber(36),LingoNumber(2))                            case 5:                gtpos = LingoGlobal.point(LingoNumber(38),LingoNumber(2))                            case 6:                if LingoGlobal.ToBool(self.gDRMatFixes):                     gtpos = LingoGlobal.point(LingoNumber(42),LingoNumber(2))                                                case 9:                if LingoGlobal.ToBool(self.gDRMatFixes):                     gtpos = LingoGlobal.point(LingoNumber(44),LingoNumber(2))                                                        match mat.lower():             case "small pipes":                mem = "pipeTiles2"                            case "trash":                mem = "trashTiles3"                            case "largetrash":                mem = "largeTrashTiles"                            case "megatrash":                mem = "largeTrashTiles"                            case "dirt":                mem = "dirtTiles"                            case "sandy dirt":                mem = "sandyDirtTiles"                                    for tmp_startLayer in LingoList(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(2)),LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(7))):             startlayer = LingoNumber(tmp_startLayer)            gtpos.locv = LingoList(LingoNumber(2),LingoNumber(4),LingoNumber(6),LingoNumber(8))[self._global.random(LingoNumber(4))]            rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.loch,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.locv,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(gtpos.loch,LingoNumber(20)),LingoGlobal.op_mul(gtpos.locv,LingoNumber(20)))            tmp_d=int(startlayer)            while tmp_d < LingoGlobal.op_add(startlayer,LingoNumber(1)):                 d = LingoNumber(tmp_d)                self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(self._global.member(mem).image,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.loch,LingoNumber(1)),self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.locv,LingoNumber(1)),self.gRenderCameraTilePos.locv),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.loch,self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.locv,self.gRenderCameraTilePos.locv),LingoNumber(20))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_d = int(d)                tmp_d += 1                                    match mat.lower():             case "trash":                if (LingoGlobal.op_ne_b(self.gLEProps.matrix[tl.loch][tl.locv][layer][LingoNumber(1)], LingoNumber(9)) or LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE)):                     tmp_q=int(LingoNumber(1))                    while tmp_q < LingoNumber(3):                         q = LingoNumber(tmp_q)                        d = LingoGlobal.op_sub(LingoGlobal.op_add(LingoList(LingoNumber(1),LingoNumber(11),LingoNumber(21))[layer],self._global.random(LingoNumber(9))),LingoNumber(1))                        gt = self._global.random(LingoNumber(48))                        gt = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoNumber(50),LingoGlobal.op_sub(gt,LingoNumber(1))),LingoNumber(0),LingoGlobal.op_mul(LingoNumber(50),gt),LingoNumber(50)),LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1)))                        rct = LingoGlobal.op_add(LingoGlobal.op_sub(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoNumber(11),LingoNumber(11))),LingoGlobal.point(self._global.random(LingoNumber(21)),self._global.random(LingoNumber(21))))                        rct = LingoGlobal.rect(LingoGlobal.op_sub(rct,LingoGlobal.point(LingoNumber(25),LingoNumber(25))),LingoGlobal.op_add(rct,LingoGlobal.point(LingoNumber(25),LingoNumber(25))))                        self._global.member(LingoGlobal.concat("layer",self._global.str(d))).image.copypixels(self._global.member("assortedTrash").image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),gt,LingoPropertyList(LingoSymbol("color"), LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)))[self._global.random(LingoNumber(3))],LingoSymbol("ink"), LingoNumber(36)))
                        tmp_q = int(q)                        tmp_q += 1                                                                                self._global.the_randomSeed = savseed                return None            def drawwvtypetile(self, mat, tl, layer):         pos = None        img = None        xpos = None        lr = None        d = None        rct = None        pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))        img = LingoGlobal.concat(mat,"WVTile")        xpos = LingoGlobal.op_mul(LingoGlobal.op_sub(self.afamvlvledit(tl,layer),LingoNumber(1)),LingoNumber(20))        lr = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))        tmp_d=int(LingoNumber(0))        while tmp_d < LingoNumber(9):             d = LingoNumber(tmp_d)            rct = LingoGlobal.rect(xpos,LingoGlobal.op_mul(d,LingoNumber(20)),LingoGlobal.op_add(xpos,LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_add(d,LingoNumber(1)),LingoNumber(20)))            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(lr,d)))).image.copypixels(self._global.member(img).image,LingoGlobal.rect(LingoGlobal.op_sub(pos.loch,LingoNumber(10)),LingoGlobal.op_sub(pos.locv,LingoNumber(10)),LingoGlobal.op_add(pos.loch,LingoNumber(10)),LingoGlobal.op_add(pos.locv,LingoNumber(10))),LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
            tmp_d = int(d)            tmp_d += 1                            return None            def drawrocktypetile(self, mat, tl, layer, trbool):         savseed = None        gtpos = None        nbrs = None        dir = None        mem = None        d = None        rct = None        rg = None        rd = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        gtpos = LingoGlobal.point(LingoNumber(0),LingoNumber(0))        match self.gLEProps.matrix[tl.loch][tl.locv][layer][LingoNumber(1)] if self.gLEProps.matrix[tl.loch][tl.locv][layer][LingoNumber(1)] is not None else 9999999999:             case 1:                nbrs = ""                for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                     dir = LingoNumber(tmp_dir)                    if (LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)) and LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.op_add(tl,dir),layer), LingoNumber(1))):                         nbrs = LingoGlobal.concat(nbrs,"1")                                            else:                        nbrs = LingoGlobal.concat(nbrs,self._global.str(self.ismytilesetopentothistile(mat,LingoGlobal.op_add(tl,dir),layer)))                                                            match nbrs.lower():                     case "0101":                        gtpos = LingoGlobal.point(LingoNumber(2),LingoNumber(2))                                            case "1010":                        gtpos = LingoGlobal.point(LingoNumber(4),LingoNumber(2))                                            case "1111":                        gtpos = LingoGlobal.point(LingoNumber(6),LingoNumber(2))                                            case "0111":                        gtpos = LingoGlobal.point(LingoNumber(8),LingoNumber(2))                                            case "1101":                        gtpos = LingoGlobal.point(LingoNumber(10),LingoNumber(2))                                            case "1110":                        gtpos = LingoGlobal.point(LingoNumber(12),LingoNumber(2))                                            case "1011":                        gtpos = LingoGlobal.point(LingoNumber(14),LingoNumber(2))                                            case "0011":                        gtpos = LingoGlobal.point(LingoNumber(16),LingoNumber(2))                                            case "1001":                        gtpos = LingoGlobal.point(LingoNumber(18),LingoNumber(2))                                            case "1100":                        gtpos = LingoGlobal.point(LingoNumber(20),LingoNumber(2))                                            case "0110":                        gtpos = LingoGlobal.point(LingoNumber(22),LingoNumber(2))                                            case "1000":                        gtpos = LingoGlobal.point(LingoNumber(24),LingoNumber(2))                                            case "0010":                        gtpos = LingoGlobal.point(LingoNumber(26),LingoNumber(2))                                            case "0100":                        gtpos = LingoGlobal.point(LingoNumber(28),LingoNumber(2))                                            case "0001":                        gtpos = LingoGlobal.point(LingoNumber(30),LingoNumber(2))                                            case "0000":                        gtpos = LingoGlobal.point(LingoNumber(40),LingoNumber(2))                                                                        case 3:                gtpos = LingoGlobal.point(LingoNumber(32),LingoNumber(2))                            case 2:                gtpos = LingoGlobal.point(LingoNumber(34),LingoNumber(2))                            case 4:                gtpos = LingoGlobal.point(LingoNumber(36),LingoNumber(2))                            case 5:                gtpos = LingoGlobal.point(LingoNumber(38),LingoNumber(2))                            case 6:                gtpos = LingoGlobal.point(LingoNumber(42),LingoNumber(2))                            case 9:                gtpos = LingoGlobal.point(LingoNumber(44),LingoNumber(2))                                    match mat.lower():             case "rocks":                mem = "rockTiles"                                    d = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))        gtpos.locv = LingoList(LingoNumber(2),LingoNumber(4),LingoNumber(6),LingoNumber(8),LingoNumber(10),LingoNumber(12),LingoNumber(14),LingoNumber(16),LingoNumber(18),LingoNumber(20),LingoNumber(22),LingoNumber(24),LingoNumber(26),LingoNumber(28),LingoNumber(30),LingoNumber(32))[self._global.random(LingoNumber(16))]        rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.loch,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.locv,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(gtpos.loch,LingoNumber(20)),LingoGlobal.op_mul(gtpos.locv,LingoNumber(20)))        if LingoGlobal.ToBool(trbool):             tmp_rg=int(LingoNumber(1))            while tmp_rg < LingoNumber(4):                 rg = LingoNumber(tmp_rg)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,rg)))).image.copypixels(self._global.member(mem).image,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.loch,LingoNumber(1)),self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.locv,LingoNumber(1)),self.gRenderCameraTilePos.locv),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.loch,self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.locv,self.gRenderCameraTilePos.locv),LingoNumber(20))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_rg = int(rg)                tmp_rg += 1                                    else:            tmp_rg=int(LingoNumber(0))            while tmp_rg < LingoNumber(4):                 rg = LingoNumber(tmp_rg)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,rg)))).image.copypixels(self._global.member(mem).image,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.loch,LingoNumber(1)),self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.locv,LingoNumber(1)),self.gRenderCameraTilePos.locv),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.loch,self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.locv,self.gRenderCameraTilePos.locv),LingoNumber(20))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_rg = int(rg)                tmp_rg += 1                                    gtpos.locv = LingoList(LingoNumber(2),LingoNumber(4),LingoNumber(6),LingoNumber(8),LingoNumber(10),LingoNumber(12),LingoNumber(14),LingoNumber(16),LingoNumber(18),LingoNumber(20),LingoNumber(22),LingoNumber(24),LingoNumber(26),LingoNumber(28),LingoNumber(30),LingoNumber(32))[self._global.random(LingoNumber(16))]        rct = LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.loch,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.locv,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(gtpos.loch,LingoNumber(20)),LingoGlobal.op_mul(gtpos.locv,LingoNumber(20)))        tmp_rd=int(LingoNumber(5))        while tmp_rd < LingoNumber(9):             rd = LingoNumber(tmp_rd)            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(d,rd)))).image.copypixels(self._global.member(mem).image,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.loch,LingoNumber(1)),self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(tl.locv,LingoNumber(1)),self.gRenderCameraTilePos.locv),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.loch,self.gRenderCameraTilePos.loch),LingoNumber(20)),LingoGlobal.op_mul(LingoGlobal.op_sub(tl.locv,self.gRenderCameraTilePos.locv),LingoNumber(20))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
            tmp_rd = int(rd)            tmp_rd += 1                    self._global.the_randomSeed = savseed                return None            def drawlargetrashtypetile(self, mat, tl, layer, frntimg):         savseed = None        distancetoair = None        dist = None        dir = None        q = None        dp = None        pos = None        propaddress = None        prop = None        rct = None        var = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        distancetoair = -LingoNumber(1)        tmp_dist=int(LingoNumber(1))        while tmp_dist < LingoNumber(5):             dist = LingoNumber(tmp_dist)            for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                 dir = LingoNumber(tmp_dir)                if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1)):                     distancetoair = dist                    break                                                if LingoGlobal.op_ne_b(distancetoair, -LingoNumber(1)):                 break                            tmp_dist = int(dist)            tmp_dist += 1                    if LingoGlobal.op_eq_b(distancetoair, -LingoNumber(1)):             distancetoair = LingoNumber(5)                    if distancetoair < LingoNumber(5):             self.drawpipetypetile("trash",tl,layer)        if distancetoair < LingoNumber(3):             tmp_q=int(LingoNumber(1))            while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(distancetoair,self._global.random(LingoNumber(2))),LingoNumber(1)):                 q = LingoNumber(tmp_q)                dp = self.restrict(LingoGlobal.op_add(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(self._global.random(LingoNumber(10)))),LingoNumber(1)),self._global.random(LingoNumber(3))),LingoNumber(0),LingoNumber(29))                pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))                pos = LingoGlobal.op_add(pos,LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                if LingoGlobal.op_ne_b(self.gTrashPropOptions.count, LingoNumber(0)):                     propaddress = self.gTrashPropOptions[self._global.random(self.gTrashPropOptions.count)]                    prop = self.gProps[propaddress.loch].prps[propaddress.locv]                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_mul(-prop.sz.loch,LingoNumber(10)),LingoGlobal.op_mul(-prop.sz.locv,LingoNumber(10)),LingoGlobal.op_mul(prop.sz.loch,LingoNumber(10)),LingoGlobal.op_mul(prop.sz.locv,LingoNumber(10))))                    self.gRenderTrashProps.add(LingoList(-dp,prop.nm,propaddress,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoPropertyList(LingoSymbol("settings"), LingoPropertyList(LingoSymbol("rendertime"), LingoNumber(0),LingoSymbol("seed"), self._global.random(LingoNumber(1000))))))                tmp_q = int(q)                tmp_q += 1                                    if distancetoair > LingoNumber(2):             dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))            pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))            if self._global.random(LingoNumber(5)) <= distancetoair:                 self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(LingoImage.Pxl,LingoGlobal.rect(LingoGlobal.op_sub(pos.loch,LingoNumber(10)),LingoGlobal.op_sub(pos.locv,LingoNumber(10)),LingoGlobal.op_add(pos.loch,LingoNumber(10)),LingoGlobal.op_add(pos.locv,LingoNumber(10))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
                var = self._global.random(LingoNumber(14))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)))                frntimg.copypixels(self._global.member("bigJunk").image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(60)),LingoNumber(0),LingoGlobal.op_mul(var,LingoNumber(60)),LingoNumber(60)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))            tmp_q=int(LingoNumber(1))            while tmp_q < distancetoair:                 q = LingoNumber(tmp_q)                dp = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(LingoNumber(10))),LingoNumber(1))                pos = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                var = self._global.random(LingoNumber(14))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)))                self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("bigJunk").image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(60)),LingoNumber(0),LingoGlobal.op_mul(var,LingoNumber(60)),LingoNumber(60)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_q = int(q)                tmp_q += 1                                    self._global.the_randomSeed = savseed                return None            def drawroughrocktile(self, mat, tl, layer, frntimg):         imgr = None        szr = None        intop = None        savseed = None        distancetoair = None        dist = None        dir = None        dp = None        pos = None        var = None        fat = None        rct = None        q = None        imgr = "Not Found"        szr = LingoNumber(0)        intop = LingoNumber(1)        match mat.lower():             case "rough rock":                imgr = "roughRock"                szr = LingoNumber(60)                intop = LingoNumber(6)                            case "sandy dirt":                szr = LingoNumber(20)                imgr = "sandRR"                intop = LingoNumber(2)                                    savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        distancetoair = -LingoNumber(1)        tmp_dist=int(LingoNumber(1))        while tmp_dist < LingoNumber(5):             dist = LingoNumber(tmp_dist)            for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                 dir = LingoNumber(tmp_dir)                if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1)):                     distancetoair = dist                    break                                                if LingoGlobal.op_ne_b(distancetoair, -LingoNumber(1)):                 break                            tmp_dist = int(dist)            tmp_dist += 1                    if LingoGlobal.op_eq_b(distancetoair, -LingoNumber(1)):             distancetoair = LingoNumber(5)                    if LingoGlobal.ToBool(self.gRRSpreadsMore):             distancetoair = LingoGlobal.op_add(distancetoair,LingoNumber(1))                    if distancetoair < LingoNumber(5):             match mat.lower():                 case "rough rock":                    self.drawrocktypetile("Rocks",tl,layer,LingoGlobal.TRUE)                case "sandy dirt":                    self.drawpipetypetile("Sandy Dirt",tl,layer)
                    distancetoair = LingoGlobal.op_add(distancetoair,LingoNumber(1))                                                        if distancetoair > LingoNumber(2):             dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))            pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))            if self._global.random(LingoNumber(5)) <= distancetoair:                 self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(LingoImage.Pxl,LingoGlobal.rect(LingoGlobal.op_sub(pos.loch,LingoNumber(10)),LingoGlobal.op_sub(pos.locv,LingoNumber(10)),LingoGlobal.op_add(pos.loch,LingoNumber(10)),LingoGlobal.op_add(pos.locv,LingoNumber(10))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
                var = self._global.random(intop)                fat = LingoList(LingoNumber(1),LingoNumber(1.0500),LingoNumber(1.1000))[self._global.random(LingoNumber(3))]                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(szr,fat),LingoGlobal.op_mul(szr,fat)))                frntimg.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),szr),LingoNumber(2)),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_mul(var,szr),LingoNumber(2)),LingoGlobal.op_mul(szr,LingoNumber(2))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))            dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))            pos = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))            var = self._global.random(intop)            fat = LingoList(LingoNumber(1),LingoNumber(1.0500),LingoNumber(1.1000))[self._global.random(LingoNumber(3))]            rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(szr,fat),LingoGlobal.op_mul(szr,fat)))            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),szr),LingoNumber(2)),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_mul(var,szr),LingoNumber(2)),LingoGlobal.op_mul(szr,LingoNumber(2))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
            tmp_q=int(LingoNumber(1))            while tmp_q < distancetoair:                 q = LingoNumber(tmp_q)                dp = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(LingoNumber(10))),LingoNumber(1))                pos = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                var = self._global.random(intop)                fat = LingoList(LingoNumber(1),LingoNumber(1.0500),LingoNumber(1.1000))[self._global.random(LingoNumber(3))]                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(szr,fat),LingoGlobal.op_mul(szr,fat)))                self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),szr),LingoNumber(2)),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_mul(var,szr),LingoNumber(2)),LingoGlobal.op_mul(szr,LingoNumber(2))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_q = int(q)                tmp_q += 1                            if (LingoGlobal.op_eq_b(mat, "Sandy Dirt") and LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1))):                 dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))                pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))                if self._global.random(LingoNumber(5)) <= distancetoair:                     self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(LingoImage.Pxl,LingoGlobal.rect(LingoGlobal.op_sub(pos.loch,LingoNumber(10)),LingoGlobal.op_sub(pos.locv,LingoNumber(10)),LingoGlobal.op_add(pos.loch,LingoNumber(10)),LingoGlobal.op_add(pos.locv,LingoNumber(10))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
                    var = self._global.random(intop)                    fat = LingoList(LingoNumber(1),LingoNumber(1.0500),LingoNumber(1.1000))[self._global.random(LingoNumber(3))]                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(szr,fat),LingoGlobal.op_mul(szr,fat)))                    frntimg.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),szr),LingoNumber(2)),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_mul(var,szr),LingoNumber(2)),LingoGlobal.op_mul(szr,LingoNumber(2))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                tmp_q=int(LingoNumber(1))                while tmp_q < distancetoair:                     q = LingoNumber(tmp_q)                    dp = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(LingoNumber(10))),LingoNumber(1))                    pos = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                    var = self._global.random(intop)                    fat = LingoList(LingoNumber(1),LingoNumber(1.0500),LingoNumber(1.1000))[self._global.random(LingoNumber(3))]                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(-szr,fat),LingoGlobal.op_mul(szr,fat),LingoGlobal.op_mul(szr,fat)))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),szr),LingoNumber(2)),LingoNumber(0),LingoGlobal.op_mul(LingoGlobal.op_mul(var,szr),LingoNumber(2)),LingoGlobal.op_mul(szr,LingoNumber(2))),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    tmp_q = int(q)                    tmp_q += 1                                                        self._global.the_randomSeed = savseed                return None            def drawsandytypetile(self, mat, tl, layer, frntimg, vars, szlist, haddlist, slopesz):         savseed = None        imgr = None        block = None        distancetoair = None        dist = None        dir = None        fatfac = None        rep = None        dp = None        pos = None        var = None        fatside = None        fatadd = None        halfside = None        rct = None        q = None        fatd = None        fatdd = None        lr = None        ptadd = None        rn = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        imgr = LingoGlobal.concat(mat,"STile")        block = self.afamvlvledit(tl,layer)        if LingoGlobal.op_eq_b(block, LingoNumber(1)):             distancetoair = -LingoNumber(1)            tmp_dist=int(LingoNumber(1))            while tmp_dist < LingoNumber(5):                 dist = LingoNumber(tmp_dist)                for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                     dir = LingoNumber(tmp_dir)                    if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1)):                         distancetoair = dist                        break                                                            if LingoGlobal.op_ne_b(distancetoair, -LingoNumber(1)):                     break                                    tmp_dist = int(dist)                tmp_dist += 1                            if LingoGlobal.op_eq_b(distancetoair, -LingoNumber(1)):                 distancetoair = LingoNumber(5)                            fatfac = LingoNumber(1)            if distancetoair < LingoNumber(5):                 fatfac = LingoNumber(2)                            elif distancetoair < LingoNumber(4):                 fatfac = LingoNumber(3)                            elif distancetoair < LingoNumber(3):                 fatfac = LingoNumber(4)                            elif distancetoair < LingoNumber(2):                 fatfac = LingoNumber(5)                            tmp_rep=int(LingoNumber(1))            while tmp_rep < LingoGlobal.op_add(fatfac,LingoNumber(4)):                 rep = LingoNumber(tmp_rep)                dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))                pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))                if self._global.random(LingoNumber(5)) <= distancetoair:                     var = self._global.random(vars)                    fatside = szlist[fatfac]                    fatadd = haddlist[fatfac]                    halfside = LingoGlobal.op_div(fatside,LingoNumber(2))                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-halfside,-halfside,halfside,halfside))                    frntimg.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,LingoGlobal.op_sub(self._global.random(LingoNumber(45)),self._global.random(LingoNumber(45)))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(fatside,LingoGlobal.op_sub(var,LingoNumber(1))),fatadd,LingoGlobal.op_mul(fatside,var),LingoGlobal.op_add(fatadd,fatside)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                tmp_q=int(LingoNumber(1))                while tmp_q < distancetoair:                     q = LingoNumber(tmp_q)                    dp = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(LingoNumber(10))),LingoNumber(1))                    fatd = LingoGlobal.op_mul(fatfac,LingoNumber(3))                    fatdd = LingoGlobal.op_sub(LingoGlobal.op_mul(fatd,LingoNumber(2)),LingoNumber(1))                    pos = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-fatd,self._global.random(fatdd)),LingoGlobal.op_add(-fatd,self._global.random(fatdd))))                    var = self._global.random(vars)                    fatside = szlist[fatfac]                    fatadd = haddlist[fatfac]                    halfside = LingoGlobal.op_div(fatside,LingoNumber(2))                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-halfside,-halfside,halfside,halfside))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,LingoGlobal.op_sub(self._global.random(LingoNumber(45)),self._global.random(LingoNumber(45)))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(fatside,LingoGlobal.op_sub(var,LingoNumber(1))),fatadd,LingoGlobal.op_mul(fatside,var),LingoGlobal.op_add(fatadd,fatside)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    tmp_q = int(q)                    tmp_q += 1                                    tmp_rep = int(rep)                tmp_rep += 1                                    elif LingoGlobal.op_eq_b(block, LingoNumber(6)):             lr = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))            tmp_rep=int(LingoNumber(1))            while tmp_rep < LingoGlobal.op_add(szlist.count,LingoNumber(2)):                 rep = LingoNumber(tmp_rep)                tmp_dp=int(LingoGlobal.op_add(lr,LingoNumber(5)))                while tmp_dp < LingoGlobal.op_add(lr,LingoNumber(9)):                     dp = LingoNumber(tmp_dp)                    ptadd = LingoGlobal.point(LingoGlobal.op_sub(self._global.random(LingoNumber(8)),self._global.random(LingoNumber(8))),-LingoNumber(10))                    pos = LingoGlobal.op_add(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(2),self._global.random(LingoNumber(3))),LingoGlobal.op_add(-LingoNumber(2),self._global.random(LingoNumber(3))))),ptadd)                    var = self._global.random(vars)                    rn = self._global.random(LingoNumber(2))                    fatside = szlist[LingoList(szlist.count,LingoGlobal.op_sub(szlist.count,LingoNumber(1)))[rn]]                    fatadd = haddlist[LingoList(haddlist.count,LingoGlobal.op_sub(haddlist.count,LingoNumber(1)))[rn]]                    halfside = LingoGlobal.op_div(fatside,LingoNumber(2))                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-halfside,-halfside,halfside,halfside))                    self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,LingoGlobal.op_sub(self._global.random(LingoNumber(10)),self._global.random(LingoNumber(10)))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(fatside,LingoGlobal.op_sub(var,LingoNumber(1))),fatadd,LingoGlobal.op_mul(fatside,var),LingoGlobal.op_add(fatadd,fatside)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    tmp_dp = int(dp)                    tmp_dp += 1                                    tmp_rep = int(rep)                tmp_rep += 1                                    elif (((LingoGlobal.op_eq_b(block, LingoNumber(2)) or LingoGlobal.ToBool(LingoNumber(3))) or LingoGlobal.ToBool(LingoNumber(4))) or LingoGlobal.ToBool(LingoNumber(5))):             lr = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))            tmp_dp=int(lr)            while tmp_dp < LingoGlobal.op_add(lr,LingoNumber(9)):                 dp = LingoNumber(tmp_dp)                ptadd = LingoGlobal.point(LingoNumber(0),LingoNumber(0))                match block if block is not None else 9999999999:                     case 2:                        ptadd = LingoGlobal.point(-LingoNumber(4),LingoNumber(4))                                            case 3:                        ptadd = LingoGlobal.point(LingoNumber(4),LingoNumber(4))                                            case 4:                        ptadd = LingoGlobal.point(-LingoNumber(4),-LingoNumber(4))                                            case 5:                        ptadd = LingoGlobal.point(LingoNumber(4),-LingoNumber(4))                                                            pos = LingoGlobal.op_add(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(2),self._global.random(LingoNumber(3))),LingoGlobal.op_add(-LingoNumber(2),self._global.random(LingoNumber(3))))),ptadd)                var = LingoGlobal.op_sub(block,LingoNumber(1))                fatadd = LingoGlobal.op_add(haddlist[haddlist.count],szlist[szlist.count])                halfside = LingoGlobal.op_div(slopesz,LingoNumber(2))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-halfside,-halfside,halfside,halfside))                self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(imgr).image,self.rotatetoquad(rct,LingoGlobal.op_sub(self._global.random(LingoNumber(10)),self._global.random(LingoNumber(10)))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(slopesz,LingoGlobal.op_sub(var,LingoNumber(1))),fatadd,LingoGlobal.op_mul(slopesz,var),LingoGlobal.op_add(fatadd,slopesz)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_dp = int(dp)                tmp_dp += 1                                    self._global.the_randomSeed = savseed                return None            def drawmegatrashtypetile(self, mat, tl, layer, frntimg):         savseed = None        distancetoair = None        dist = None        dir = None        q = None        dp = None        pos = None        propaddress = None        prop = None        rct = None        var = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        distancetoair = -LingoNumber(1)        tmp_dist=int(LingoNumber(1))        while tmp_dist < LingoNumber(5):             dist = LingoNumber(tmp_dist)            for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):                 dir = LingoNumber(tmp_dir)                if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1)):                     distancetoair = dist                    break                                                if LingoGlobal.op_ne_b(distancetoair, -LingoNumber(1)):                 break                            tmp_dist = int(dist)            tmp_dist += 1                    if LingoGlobal.op_eq_b(distancetoair, -LingoNumber(1)):             distancetoair = LingoNumber(5)                    if distancetoair < LingoNumber(5):             self.drawpipetypetile("trash",tl,layer)        if distancetoair < LingoNumber(3):             tmp_q=int(LingoNumber(1))            while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(distancetoair,self._global.random(LingoNumber(2))),LingoNumber(1)):                 q = LingoNumber(tmp_q)                dp = self.restrict(LingoGlobal.op_add(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(self._global.random(LingoNumber(10)))),LingoNumber(1)),self._global.random(LingoNumber(3))),LingoNumber(0),LingoNumber(29))                pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))                pos = LingoGlobal.op_add(pos,LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                if LingoGlobal.op_ne_b(self.gMegaTrash.count, LingoNumber(0)):                     propaddress = self.gMegaTrash[self._global.random(self.gMegaTrash.count)]                    prop = self.gProps[propaddress.loch].prps[propaddress.locv]                    rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_mul(-prop.sz.loch,LingoNumber(10)),LingoGlobal.op_mul(-prop.sz.locv,LingoNumber(10)),LingoGlobal.op_mul(prop.sz.loch,LingoNumber(10)),LingoGlobal.op_mul(prop.sz.locv,LingoNumber(10))))                    self.gRenderTrashProps.add(LingoList(-dp,prop.nm,propaddress,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoPropertyList(LingoSymbol("settings"), LingoPropertyList(LingoSymbol("rendertime"), LingoNumber(0),LingoSymbol("seed"), self._global.random(LingoNumber(1000))))))                tmp_q = int(q)                tmp_q += 1                                    if distancetoair > LingoNumber(2):             dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))            pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))            if self._global.random(LingoNumber(5)) <= distancetoair:                 self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(LingoImage.Pxl,LingoGlobal.rect(LingoGlobal.op_sub(pos.loch,LingoNumber(10)),LingoGlobal.op_sub(pos.locv,LingoNumber(10)),LingoGlobal.op_add(pos.loch,LingoNumber(10)),LingoGlobal.op_add(pos.locv,LingoNumber(10))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
                var = self._global.random(LingoNumber(14))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)))                frntimg.copypixels(self._global.member("bigJunk").image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(60)),LingoNumber(0),LingoGlobal.op_mul(var,LingoNumber(60)),LingoNumber(60)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))            tmp_q=int(LingoNumber(1))            while tmp_q < distancetoair:                 q = LingoNumber(tmp_q)                dp = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(LingoNumber(10))),LingoNumber(1))                pos = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                var = self._global.random(LingoNumber(14))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(30),-LingoNumber(30),LingoNumber(30),LingoNumber(30)))                self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member("bigJunk").image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(60)),LingoNumber(0),LingoGlobal.op_mul(var,LingoNumber(60)),LingoNumber(60)),LingoGlobal.rect(LingoNumber(0),LingoNumber(1),LingoNumber(0),LingoNumber(1))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_q = int(q)                tmp_q += 1                                    self._global.the_randomSeed = savseed                return None            def drawdirttypetile(self, mat, tl, layer, frntimg):         savseed = None        dp = None        pos = None        optout = None        var = None        rct = None        distancetoair = None        ext = None        dist = None        dir = None        amnt = None        q = None        dpadd = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))        pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))        optout = LingoGlobal.FALSE        if layer > LingoNumber(1):             optout = LingoGlobal.op_eq(self.afamvlvledit(tl,LingoGlobal.op_sub(layer,LingoNumber(1))),LingoNumber(1))                    if LingoGlobal.ToBool(optout):             self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(14),-LingoNumber(14),LingoNumber(14),LingoNumber(14))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
            var = self._global.random(LingoNumber(4))            rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(18),-LingoNumber(18),LingoNumber(18),LingoNumber(18)))            self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(LingoGlobal.concat("rubbleGraf",var)).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),self._global.member(LingoGlobal.concat("rubbleGraf",var)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))        else:            distancetoair = LingoNumber(6)            ext = LingoNumber(0)            tmp_dist=int(LingoNumber(1))            while tmp_dist < LingoNumber(5):                 dist = LingoNumber(tmp_dist)                for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(-LingoNumber(1),LingoNumber(1))):                     dir = LingoNumber(tmp_dir)                    if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1)):                         distancetoair = dist                        ext = LingoNumber(1)                        break                                                            if LingoGlobal.ToBool(ext):                     break                                    tmp_dist = int(dist)                tmp_dist += 1                            distancetoair = LingoGlobal.op_add(LingoGlobal.op_add(distancetoair,-LingoNumber(2)),self._global.random(LingoNumber(3)))            if distancetoair >= LingoNumber(5):                 self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(14),-LingoNumber(14),LingoNumber(14),LingoNumber(14))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                var = self._global.random(LingoNumber(4))                rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(18),-LingoNumber(18),LingoNumber(18),LingoNumber(18)))                self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(self._global.member(LingoGlobal.concat("rubbleGraf",var)).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),self._global.member(LingoGlobal.concat("rubbleGraf",var)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))            else:                amnt = LingoGlobal.op_mul(self.lerp(distancetoair,LingoNumber(3),LingoNumber(0.5000)),LingoNumber(15))                if layer > LingoNumber(1):                     amnt = LingoGlobal.op_mul(distancetoair,LingoNumber(10))                                    tmp_q=int(LingoNumber(1))                while tmp_q < amnt:                     q = LingoNumber(tmp_q)                    dp = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(LingoNumber(10))),LingoNumber(1))                    pos = LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21)))))                    var = self._global.random(LingoNumber(4))                    self.drawdirtclot(pos,dp,var,layer,distancetoair)
                    tmp_q = int(q)                    tmp_q += 1                                    if layer < LingoNumber(3):                     tmp_dist=int(LingoNumber(1))                    while tmp_dist < LingoNumber(3):                         dist = LingoNumber(tmp_dist)                        for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(-LingoNumber(1),LingoNumber(1))):                             dir = LingoNumber(tmp_dir)                            if (LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),LingoGlobal.op_add(layer,LingoNumber(1))), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1))):                                 tmp_q=int(LingoNumber(1))                                while tmp_q < LingoNumber(10):                                     q = LingoNumber(tmp_q)                                    if LingoGlobal.op_eq_b(layer, LingoNumber(1)):                                         dpadd = LingoGlobal.op_add(LingoNumber(6),self._global.random(LingoNumber(4)))                                                                            else:                                        dpadd = LingoGlobal.op_add(LingoNumber(2),self._global.random(LingoNumber(8)))                                                                            pos = LingoGlobal.op_add(LingoGlobal.op_add(self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))),LingoGlobal.op_add(-LingoNumber(11),self._global.random(LingoNumber(21))))),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(dir,dist),dist),dpadd),self._global.random(LingoNumber(85))),LingoNumber(0.0100)))                                    var = self._global.random(LingoNumber(4))                                    self.drawdirtclot(pos,LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),dpadd),var,layer,distancetoair)
                                    tmp_q = int(q)                                    tmp_q += 1                                                                                                                        tmp_dist = int(dist)                        tmp_dist += 1                                                                                self._global.the_randomSeed = savseed                return None            def drawdirtclot(self, pos, dp, var, layer, distancetoair):         szadd = None        d = None        sz = None        pstdp = None        rct = None        szadd = LingoGlobal.op_sub(self._global.random(LingoGlobal.op_add(distancetoair,LingoNumber(1))),LingoNumber(1))        tmp_d=int(LingoNumber(0))        while tmp_d < LingoNumber(2):             d = LingoNumber(tmp_d)            sz = LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(5),szadd),LingoGlobal.op_mul(d,LingoNumber(2)))            pstdp = self.restrict(LingoGlobal.op_add(LingoGlobal.op_sub(dp,LingoNumber(1)),d),LingoNumber(0),LingoNumber(29))            rct = LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-sz,-sz,sz,sz))            self._global.member(LingoGlobal.concat("layer",self._global.str(pstdp))).image.copypixels(self._global.member(LingoGlobal.concat("rubbleGraf",var)).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),self._global.member(LingoGlobal.concat("rubbleGraf",var)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
            tmp_d = int(d)            tmp_d += 1                    if ((self._global.random(LingoNumber(6)) > distancetoair and LingoGlobal.op_eq_b(self._global.random(LingoNumber(3)), LingoNumber(1))) or ((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(self.givegridpos(LingoGlobal.op_add(pos,LingoGlobal.point(-LingoNumber(10),-LingoNumber(10)))),self.gRenderCameraTilePos),layer), LingoNumber(1)) and LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.op_add(self.givegridpos(LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),self.gRenderCameraTilePos),layer), LingoNumber(1))) or LingoGlobal.op_eq_b(layer, LingoNumber(2)))):             tmp_d=int(LingoNumber(0))            while tmp_d < LingoNumber(2):                 d = LingoNumber(tmp_d)                sz = LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(2),LingoGlobal.op_mul(szadd,LingoNumber(0.5000))),LingoGlobal.op_mul(d,LingoNumber(2)))                pstdp = self.restrict(LingoGlobal.op_add(LingoGlobal.op_sub(dp,LingoNumber(1)),d),LingoNumber(0),LingoNumber(29))                rct = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-sz,-sz,sz,sz)),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),LingoGlobal.point(LingoGlobal.op_mul(-LingoNumber(2),d),LingoGlobal.op_mul(-LingoNumber(2),d))),LingoGlobal.op_add(LingoGlobal.point(-LingoNumber(4),-LingoNumber(4)),LingoGlobal.point(LingoGlobal.op_mul(-LingoNumber(2),d),LingoGlobal.op_mul(-LingoNumber(2),d)))))                self._global.member(LingoGlobal.concat("layer",self._global.str(pstdp))).image.copypixels(self._global.member(LingoGlobal.concat("rubbleGraf",var)).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),self._global.member(LingoGlobal.concat("rubbleGraf",var)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                tmp_d = int(d)                tmp_d += 1                                    if ((self._global.random(LingoNumber(6)) > distancetoair and LingoGlobal.op_eq_b(self._global.random(LingoNumber(3)), LingoNumber(1))) or ((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(self.givegridpos(LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),self.gRenderCameraTilePos),layer), LingoNumber(1)) and LingoGlobal.op_eq_b(self.afamvlvledit(LingoGlobal.op_add(self.givegridpos(LingoGlobal.op_add(pos,LingoGlobal.point(-LingoNumber(10),-LingoNumber(10)))),self.gRenderCameraTilePos),layer), LingoNumber(1))) or LingoGlobal.op_eq_b(layer, LingoNumber(2)))):             tmp_d=int(LingoNumber(0))            while tmp_d < LingoNumber(2):                 d = LingoNumber(tmp_d)                sz = LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(2),LingoGlobal.op_mul(szadd,LingoNumber(0.5000))),LingoGlobal.op_mul(d,LingoNumber(2)))                pstdp = self.restrict(LingoGlobal.op_add(LingoGlobal.op_sub(dp,LingoNumber(1)),d),LingoNumber(0),LingoNumber(29))                rct = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-sz,-sz,sz,sz)),LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),LingoGlobal.point(LingoGlobal.op_mul(LingoNumber(2),d),LingoGlobal.op_mul(LingoNumber(2),d))),LingoGlobal.op_add(LingoGlobal.point(LingoNumber(4),LingoNumber(4)),LingoGlobal.point(LingoGlobal.op_mul(LingoNumber(2),d),LingoGlobal.op_mul(LingoNumber(2),d)))))                self._global.member(LingoGlobal.concat("layer",self._global.str(pstdp))).image.copypixels(self._global.member(LingoGlobal.concat("rubbleGraf",var)).image,self.rotatetoquad(rct,self._global.random(LingoNumber(360))),self._global.member(LingoGlobal.concat("rubbleGraf",var)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
                tmp_d = int(d)                tmp_d += 1                                            return None            def drawceramictypetile(self, mat, tl, layer, frntimg):         savseed = None        chaos = None        docolor = None        q = None        dmin = None        dmax = None        dp = None        pos = None        clr = None        lft = None        rght = None        tp = None        bttm = None        h = None        h2 = None        f = None        a = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        chaos = LingoNumber(0)        docolor = LingoNumber(0)        tmp_q=int(LingoNumber(1))        while tmp_q < self.gEEprops.effects.count:             q = LingoNumber(tmp_q)            if LingoGlobal.op_eq_b(self.gEEprops.effects[q].nm, "Ceramic Chaos"):                 match self.gEEprops.effects[q].options[LingoNumber(3)][LingoNumber(3)].lower():                     case "1":                        dmin = LingoNumber(1)                        dmax = LingoNumber(1)                                            case "2":                        dmin = LingoNumber(2)                        dmax = LingoNumber(2)                                            case "3":                        dmin = LingoNumber(3)                        dmax = LingoNumber(3)                                            case "1:st and 2:nd":                        dmin = LingoNumber(1)                        dmax = LingoNumber(2)                                            case "2:nd and 3:rd":                        dmin = LingoNumber(2)                        dmax = LingoNumber(3)                                            case _:                         dmin = LingoNumber(1)                        dmax = LingoNumber(3)                                                            if (layer >= dmin and layer <= dmax):                     if self.gEEprops.effects[q].mtrx[tl.loch][tl.locv] > chaos:                         chaos = self.gEEprops.effects[q].mtrx[tl.loch][tl.locv]                                                            if LingoGlobal.op_eq_b(self.gEEprops.effects[q].options[LingoNumber(2)][LingoNumber(3)], "Colored"):                     docolor = LingoGlobal.TRUE                                                tmp_q = int(q)            tmp_q += 1                    if LingoGlobal.ToBool(docolor):             self.gAnyDecals = LingoGlobal.TRUE                    chaos = LingoGlobal.op_mul(chaos,LingoNumber(0.0100))        dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))        pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))        clr = self._global.color(LingoNumber(239),LingoNumber(234),LingoNumber(224))        lft = LingoNumber(0)        rght = LingoNumber(0)        tp = LingoNumber(0)        bttm = LingoNumber(0)        if (LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(1)) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or ((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(2)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(6))))):             lft = LingoNumber(1)                    if (LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(1)) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or ((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(2)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(6))))):             rght = LingoNumber(1)                    if (LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(1)) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or ((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(2)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(6))))):             tp = LingoNumber(1)                    if (LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(1)) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or ((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(2)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(6))))):             bttm = LingoNumber(1)                    h = self.afamvlvledit(tl,layer)        match h if h is not None else 9999999999:             case 1:                h2 = ""                            case 2:                h2 = "NE"                            case 3:                h2 = "NW"                            case 4:                h2 = "SE"                            case 5:                h2 = "SW"                                    if ((((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(3))) or LingoGlobal.op_eq_b(h, LingoNumber(4))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):             if LingoGlobal.op_eq_b(h, LingoNumber(1)):                 tmp_q=int(LingoNumber(1))                while tmp_q < LingoNumber(9):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_sub(LingoNumber(10),bttm))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoGlobal.op_mul(LingoNumber(255),LingoGlobal.op_sub(LingoNumber(1),docolor)),LingoGlobal.op_mul(LingoNumber(255),docolor),LingoNumber(0))))
                    tmp_q = int(q)                    tmp_q += 1                                                else:                tmp_q=int(LingoNumber(1))                while tmp_q < LingoNumber(9):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilhCP",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_sub(LingoNumber(10),bttm))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoGlobal.op_mul(LingoNumber(255),LingoGlobal.op_sub(LingoNumber(1),docolor)),LingoGlobal.op_mul(LingoNumber(255),docolor),LingoNumber(0))))
                    tmp_q = int(q)                    tmp_q += 1                                                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSocket",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(8),-LingoNumber(8),LingoNumber(8),LingoNumber(8))),self._global.member(LingoGlobal.concat("ceramicTileSocket",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoGlobal.op_mul(LingoNumber(255),docolor),LingoGlobal.op_mul(LingoNumber(255),LingoGlobal.op_sub(LingoNumber(1),docolor)),LingoNumber(0))))
            if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(4))):                 if (LingoGlobal.ToBool(lft) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                        if LingoGlobal.ToBool(docolor):                             self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)),"dc")).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(3))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):                 if (LingoGlobal.ToBool(rght) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                        if LingoGlobal.ToBool(docolor):                             self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)),"dc")).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(4))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):                 if (LingoGlobal.ToBool(tp) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),-LingoNumber(8),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                        if LingoGlobal.ToBool(docolor):                             self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)),"dc")).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(3))):                 if (LingoGlobal.ToBool(bttm) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),LingoNumber(9),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),-LingoNumber(8),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                        if LingoGlobal.ToBool(docolor):                             self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)),"dc")).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),LingoNumber(9),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                        tmp_q = int(q)                        tmp_q += 1                                                                        pos = LingoGlobal.op_add(pos,LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13))),LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13)))),chaos),chaos),chaos),self._global.random(LingoNumber(100))),LingoNumber(0.0100)))            if (LingoGlobal.op_eq_b(chaos, LingoNumber(0)) or self._global.random(LingoGlobal.op_sub(LingoNumber(300),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(298),chaos),chaos),chaos))) > LingoNumber(1)):                 if self._global.random(LingoNumber(100)) < LingoGlobal.op_mul(chaos,LingoNumber(100)):                     f = LingoGlobal.op_mul(self._global.random(LingoGlobal.op_add(LingoNumber(1000),LingoGlobal.op_mul(LingoNumber(4000),chaos))),chaos).integer                    tmp_a=int(LingoNumber(1))                    while tmp_a < LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(1.0000),chaos),LingoNumber(4)):                         a = LingoNumber(tmp_a)                        f = self._global.random(f)                        if LingoGlobal.op_eq_b(f, LingoNumber(1)):                             break                                                    tmp_a = int(a)                        tmp_a += 1                                                            else:                    f = LingoNumber(1)                                    if LingoGlobal.abs(f) > LingoNumber(1):                     f = LingoGlobal.op_sub(f,LingoNumber(1))                    if LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):                         f = LingoGlobal.op_mul(f,-LingoNumber(1))                                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTile",h2)).image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member(LingoGlobal.concat("ceramicTile",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    if LingoGlobal.ToBool(docolor):                         self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))),"dc")).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                                    else:                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTile",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),self._global.member(LingoGlobal.concat("ceramicTile",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    if LingoGlobal.ToBool(docolor):                         self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))),"dc")).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                                                self._global.the_randomSeed = savseed                    elif LingoGlobal.op_eq_b(h, LingoNumber(6)):             tmp_q=int(LingoNumber(1))            while tmp_q < LingoNumber(9):                 q = LingoNumber(tmp_q)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(self._global.member("ceramicTileSilhCPFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_div(LingoGlobal.op_sub(LingoNumber(10),bttm),LingoNumber(2)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoGlobal.op_mul(LingoNumber(255),LingoGlobal.op_sub(LingoNumber(1),docolor)),LingoGlobal.op_mul(LingoNumber(255),docolor),LingoNumber(0))))
                tmp_q = int(q)                tmp_q += 1                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(1))))).image.copypixels(self._global.member("ceramicTileSocketFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(8),-LingoNumber(8),LingoNumber(8),LingoGlobal.op_div(LingoNumber(8),LingoNumber(2)))),self._global.member("ceramicTileSocketFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoGlobal.op_mul(LingoNumber(255),docolor),LingoGlobal.op_mul(LingoNumber(255),LingoGlobal.op_sub(LingoNumber(1),docolor)),LingoNumber(0))))
            if (LingoGlobal.ToBool(lft) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                    if LingoGlobal.ToBool(docolor):                         self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)),"dc")).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                    tmp_q = int(q)                    tmp_q += 1                                                if (LingoGlobal.ToBool(rght) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                    if LingoGlobal.ToBool(docolor):                         self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)),"dc")).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                    tmp_q = int(q)                    tmp_q += 1                                                if (LingoGlobal.ToBool(tp) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),-LingoNumber(8),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
                    if LingoGlobal.ToBool(docolor):                         self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)),"dc")).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                    tmp_q = int(q)                    tmp_q += 1                                                pos = LingoGlobal.op_add(pos,LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13))),LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13)))),chaos),chaos),chaos),self._global.random(LingoNumber(100))),LingoNumber(0.0100)))            if (LingoGlobal.op_eq_b(chaos, LingoNumber(0)) or self._global.random(LingoGlobal.op_sub(LingoNumber(300),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(298),chaos),chaos),chaos))) > LingoNumber(1)):                 if self._global.random(LingoNumber(100)) < LingoGlobal.op_mul(chaos,LingoNumber(100)):                     f = LingoGlobal.op_mul(self._global.random(LingoGlobal.op_add(LingoNumber(1000),LingoGlobal.op_mul(LingoNumber(4000),chaos))),chaos).integer                    tmp_a=int(LingoNumber(1))                    while tmp_a < LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(1.0000),chaos),LingoNumber(4)):                         a = LingoNumber(tmp_a)                        f = self._global.random(f)                        if LingoGlobal.op_eq_b(f, LingoNumber(1)):                             break                                                    tmp_a = int(a)                        tmp_a += 1                                                            else:                    f = LingoNumber(1)                                    if LingoGlobal.abs(f) > LingoNumber(1):                     f = LingoGlobal.op_sub(f,LingoNumber(1))                    if LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):                         f = LingoGlobal.op_mul(f,-LingoNumber(1))                                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileFL").image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member("ceramicTileFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    if LingoGlobal.ToBool(docolor):                         self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))),"dc")).image.copypixels(self._global.member("ceramicTileSilhFL").image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                                    else:                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),self._global.member("ceramicTileFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    if LingoGlobal.ToBool(docolor):                         self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))),"dc")).image.copypixels(self._global.member("ceramicTileSilhFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), clr))                                                self._global.the_randomSeed = savseed                            return None            def drawceramicatypetile(self, mat, tl, layer, frntimg):         savseed = None        chaos = None        q = None        dmin = None        dmax = None        dp = None        pos = None        clr = None        lft = None        rght = None        tp = None        bttm = None        h = None        h2 = None        f = None        a = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        chaos = LingoNumber(0)        tmp_q=int(LingoNumber(1))        while tmp_q < self.gEEprops.effects.count:             q = LingoNumber(tmp_q)            if LingoGlobal.op_eq_b(self.gEEprops.effects[q].nm, "Ceramic Chaos"):                 match self.gEEprops.effects[q].options[LingoNumber(3)][LingoNumber(3)].lower():                     case "1":                        dmin = LingoNumber(1)                        dmax = LingoNumber(1)                                            case "2":                        dmin = LingoNumber(2)                        dmax = LingoNumber(2)                                            case "3":                        dmin = LingoNumber(3)                        dmax = LingoNumber(3)                                            case "1:st and 2:nd":                        dmin = LingoNumber(1)                        dmax = LingoNumber(2)                                            case "2:nd and 3:rd":                        dmin = LingoNumber(2)                        dmax = LingoNumber(3)                                            case _:                         dmin = LingoNumber(1)                        dmax = LingoNumber(3)                                                            if (layer >= dmin and layer <= dmax):                     if self.gEEprops.effects[q].mtrx[tl.loch][tl.locv] > chaos:                         chaos = self.gEEprops.effects[q].mtrx[tl.loch][tl.locv]                                                                        tmp_q = int(q)            tmp_q += 1                    chaos = LingoGlobal.op_mul(chaos,LingoNumber(0.0100))        dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))        pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))        clr = self._global.color(LingoNumber(239),LingoNumber(234),LingoNumber(224))        lft = LingoNumber(0)        rght = LingoNumber(0)        tp = LingoNumber(0)        bttm = LingoNumber(0)        if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(6))):             lft = LingoNumber(1)                    if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(6))):             rght = LingoNumber(1)                    if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(6))):             tp = LingoNumber(1)                    if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(6))):             bttm = LingoNumber(1)                    h = self.afamvlvledit(tl,layer)        match h if h is not None else 9999999999:             case 1:                h2 = ""                            case 2:                h2 = "NE"                            case 3:                h2 = "NW"                            case 4:                h2 = "SE"                            case 5:                h2 = "SW"                                    if ((((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(3))) or LingoGlobal.op_eq_b(h, LingoNumber(4))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):             if LingoGlobal.op_eq_b(h, LingoNumber(1)):                 tmp_q=int(LingoNumber(1))                while tmp_q < LingoNumber(9):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_sub(LingoNumber(10),bttm))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    tmp_q = int(q)                    tmp_q += 1                                                else:                tmp_q=int(LingoNumber(1))                while tmp_q < LingoNumber(9):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilhCP",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_sub(LingoNumber(10),bttm))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    tmp_q = int(q)                    tmp_q += 1                                                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSocket",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(8),-LingoNumber(8),LingoNumber(8),LingoNumber(8))),self._global.member(LingoGlobal.concat("ceramicTileSocket",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
            if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(4))):                 if (LingoGlobal.ToBool(lft) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(3))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):                 if (LingoGlobal.ToBool(rght) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(4))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):                 if (LingoGlobal.ToBool(tp) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),-LingoNumber(8),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(3))):                 if (LingoGlobal.ToBool(bttm) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),LingoNumber(9),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),-LingoNumber(8),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),LingoNumber(9),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        pos = LingoGlobal.op_add(pos,LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13))),LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13)))),chaos),chaos),chaos),self._global.random(LingoNumber(100))),LingoNumber(0.0100)))            if (LingoGlobal.op_eq_b(chaos, LingoNumber(0)) or self._global.random(LingoGlobal.op_sub(LingoNumber(300),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(298),chaos),chaos),chaos))) > LingoNumber(1)):                 if self._global.random(LingoNumber(100)) < LingoGlobal.op_mul(chaos,LingoNumber(100)):                     f = LingoGlobal.op_mul(self._global.random(LingoGlobal.op_add(LingoNumber(1000),LingoGlobal.op_mul(LingoNumber(4000),chaos))),chaos).integer                    tmp_a=int(LingoNumber(1))                    while tmp_a < LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(1.0000),chaos),LingoNumber(4)):                         a = LingoNumber(tmp_a)                        f = self._global.random(f)                        if LingoGlobal.op_eq_b(f, LingoNumber(1)):                             break                                                    tmp_a = int(a)                        tmp_a += 1                                                            else:                    f = LingoNumber(1)                                    if LingoGlobal.abs(f) > LingoNumber(1):                     f = LingoGlobal.op_sub(f,LingoNumber(1))                    if LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):                         f = LingoGlobal.op_mul(f,-LingoNumber(1))                                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                else:                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            self._global.the_randomSeed = savseed                    elif LingoGlobal.op_eq_b(h, LingoNumber(6)):             tmp_q=int(LingoNumber(1))            while tmp_q < LingoNumber(9):                 q = LingoNumber(tmp_q)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(self._global.member("ceramicTileSilhCPFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_div(LingoGlobal.op_sub(LingoNumber(10),bttm),LingoNumber(2)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                tmp_q = int(q)                tmp_q += 1                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(1))))).image.copypixels(self._global.member("ceramicTileSocketFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(8),-LingoNumber(8),LingoNumber(8),LingoGlobal.op_div(LingoNumber(8),LingoNumber(2)))),self._global.member("ceramicTileSocketFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
            if (LingoGlobal.ToBool(lft) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    tmp_q = int(q)                    tmp_q += 1                                                if (LingoGlobal.ToBool(rght) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    tmp_q = int(q)                    tmp_q += 1                                                if (LingoGlobal.ToBool(tp) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),-LingoNumber(8),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    tmp_q = int(q)                    tmp_q += 1                                                pos = LingoGlobal.op_add(pos,LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13))),LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13)))),chaos),chaos),chaos),self._global.random(LingoNumber(100))),LingoNumber(0.0100)))            if (LingoGlobal.op_eq_b(chaos, LingoNumber(0)) or self._global.random(LingoGlobal.op_sub(LingoNumber(300),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(298),chaos),chaos),chaos))) > LingoNumber(1)):                 if self._global.random(LingoNumber(100)) < LingoGlobal.op_mul(chaos,LingoNumber(100)):                     f = LingoGlobal.op_mul(self._global.random(LingoGlobal.op_add(LingoNumber(1000),LingoGlobal.op_mul(LingoNumber(4000),chaos))),chaos).integer                    tmp_a=int(LingoNumber(1))                    while tmp_a < LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(1.0000),chaos),LingoNumber(4)):                         a = LingoNumber(tmp_a)                        f = self._global.random(f)                        if LingoGlobal.op_eq_b(f, LingoNumber(1)):                             break                                                    tmp_a = int(a)                        tmp_a += 1                                                            else:                    f = LingoNumber(1)                                    if LingoGlobal.abs(f) > LingoNumber(1):                     f = LingoGlobal.op_sub(f,LingoNumber(1))                    if LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):                         f = LingoGlobal.op_mul(f,-LingoNumber(1))                                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilhFL").image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilh2FL").image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member("ceramicTileSilh2FL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                else:                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilhFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientA",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilh2FL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),self._global.member("ceramicTileSilh2FL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            self._global.the_randomSeed = savseed                            return None            def drawceramicbtypetile(self, mat, tl, layer, frntimg):         savseed = None        chaos = None        q = None        dmin = None        dmax = None        dp = None        pos = None        clr = None        lft = None        rght = None        tp = None        bttm = None        h = None        h2 = None        f = None        a = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        chaos = LingoNumber(0)        tmp_q=int(LingoNumber(1))        while tmp_q < self.gEEprops.effects.count:             q = LingoNumber(tmp_q)            if LingoGlobal.op_eq_b(self.gEEprops.effects[q].nm, "Ceramic Chaos"):                 match self.gEEprops.effects[q].options[LingoNumber(3)][LingoNumber(3)].lower():                     case "1":                        dmin = LingoNumber(1)                        dmax = LingoNumber(1)                                            case "2":                        dmin = LingoNumber(2)                        dmax = LingoNumber(2)                                            case "3":                        dmin = LingoNumber(3)                        dmax = LingoNumber(3)                                            case "1:st and 2:nd":                        dmin = LingoNumber(1)                        dmax = LingoNumber(2)                                            case "2:nd and 3:rd":                        dmin = LingoNumber(2)                        dmax = LingoNumber(3)                                            case _:                         dmin = LingoNumber(1)                        dmax = LingoNumber(3)                                                            if (layer >= dmin and layer <= dmax):                     if self.gEEprops.effects[q].mtrx[tl.loch][tl.locv] > chaos:                         chaos = self.gEEprops.effects[q].mtrx[tl.loch][tl.locv]                                                                        tmp_q = int(q)            tmp_q += 1                    chaos = LingoGlobal.op_mul(chaos,LingoNumber(0.0100))        dp = LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))        pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))        clr = self._global.color(LingoNumber(239),LingoNumber(234),LingoNumber(224))        lft = LingoNumber(0)        rght = LingoNumber(0)        tp = LingoNumber(0)        bttm = LingoNumber(0)        if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(6))):             lft = LingoNumber(1)                    if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(6))):             rght = LingoNumber(1)                    if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(6))):             tp = LingoNumber(1)                    if (((((LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(2))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(3))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(4))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(5))) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(6))):             bttm = LingoNumber(1)                    h = self.afamvlvledit(tl,layer)        match h if h is not None else 9999999999:             case 1:                h2 = ""                            case 2:                h2 = "NE"                            case 3:                h2 = "NW"                            case 4:                h2 = "SE"                            case 5:                h2 = "SW"                                    if ((((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(3))) or LingoGlobal.op_eq_b(h, LingoNumber(4))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):             if LingoGlobal.op_eq_b(h, LingoNumber(1)):                 tmp_q=int(LingoNumber(1))                while tmp_q < LingoNumber(9):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_sub(LingoNumber(10),bttm))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    tmp_q = int(q)                    tmp_q += 1                                                else:                tmp_q=int(LingoNumber(1))                while tmp_q < LingoNumber(9):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilhCP",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_sub(LingoNumber(10),bttm))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                    tmp_q = int(q)                    tmp_q += 1                                                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(1))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSocket",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(8),-LingoNumber(8),LingoNumber(8),LingoNumber(8))),self._global.member(LingoGlobal.concat("ceramicTileSocket",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
            if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(4))):                 if (LingoGlobal.ToBool(lft) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(3))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):                 if (LingoGlobal.ToBool(rght) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(4))) or LingoGlobal.op_eq_b(h, LingoNumber(5))):                 if (LingoGlobal.ToBool(tp) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),-LingoNumber(8),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        if ((LingoGlobal.op_eq_b(h, LingoNumber(1)) or LingoGlobal.op_eq_b(h, LingoNumber(2))) or LingoGlobal.op_eq_b(h, LingoNumber(3))):                 if (LingoGlobal.ToBool(bttm) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                     tmp_q=int(LingoNumber(2))                    while tmp_q < LingoNumber(8):                         q = LingoNumber(tmp_q)                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),LingoNumber(9),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),-LingoNumber(8),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                        self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),LingoNumber(9),LingoNumber(9),LingoNumber(11))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                        tmp_q = int(q)                        tmp_q += 1                                                                        pos = LingoGlobal.op_add(pos,LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13))),LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13)))),chaos),chaos),chaos),self._global.random(LingoNumber(100))),LingoNumber(0.0100)))            if (LingoGlobal.op_eq_b(chaos, LingoNumber(0)) or self._global.random(LingoGlobal.op_sub(LingoNumber(300),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(298),chaos),chaos),chaos))) > LingoNumber(1)):                 if self._global.random(LingoNumber(100)) < LingoGlobal.op_mul(chaos,LingoNumber(100)):                     f = LingoGlobal.op_mul(self._global.random(LingoGlobal.op_add(LingoNumber(1000),LingoGlobal.op_mul(LingoNumber(4000),chaos))),chaos).integer                    tmp_a=int(LingoNumber(1))                    while tmp_a < LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(1.0000),chaos),LingoNumber(4)):                         a = LingoNumber(tmp_a)                        f = self._global.random(f)                        if LingoGlobal.op_eq_b(f, LingoNumber(1)):                             break                                                    tmp_a = int(a)                        tmp_a += 1                                                            else:                    f = LingoNumber(1)                                    if LingoGlobal.abs(f) > LingoNumber(1):                     f = LingoGlobal.op_sub(f,LingoNumber(1))                    if LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):                         f = LingoGlobal.op_mul(f,-LingoNumber(1))                                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                else:                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),self._global.member(LingoGlobal.concat("ceramicTileSilh",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoNumber(9))),self._global.member(LingoGlobal.concat("ceramicTileSilh2",h2)).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            self._global.the_randomSeed = savseed                    elif LingoGlobal.op_eq_b(h, LingoNumber(6)):             tmp_q=int(LingoNumber(1))            while tmp_q < LingoNumber(9):                 q = LingoNumber(tmp_q)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(self._global.member("ceramicTileSilhCPFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoGlobal.op_add(-LingoNumber(10),lft),LingoGlobal.op_add(-LingoNumber(10),tp),LingoGlobal.op_sub(LingoNumber(10),rght),LingoGlobal.op_div(LingoGlobal.op_sub(LingoNumber(10),bttm),LingoNumber(2)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                tmp_q = int(q)                tmp_q += 1                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),LingoNumber(1))))).image.copypixels(self._global.member("ceramicTileSocketFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(8),-LingoNumber(8),LingoNumber(8),LingoGlobal.op_div(LingoNumber(8),LingoNumber(2)))),self._global.member("ceramicTileSocketFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
            if (LingoGlobal.ToBool(lft) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(11),-LingoNumber(9),-LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    tmp_q = int(q)                    tmp_q += 1                                                if (LingoGlobal.ToBool(rght) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),-LingoNumber(8))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(LingoNumber(9),-LingoNumber(9),LingoNumber(11),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    tmp_q = int(q)                    tmp_q += 1                                                if (LingoGlobal.ToBool(tp) and self._global.random(LingoNumber(120)) > LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(chaos,chaos),chaos),LingoNumber(100))):                 tmp_q=int(LingoNumber(2))                while tmp_q < LingoNumber(8):                     q = LingoNumber(tmp_q)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),-LingoNumber(8),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),q)))).image.copypixels(LingoImage.Pxl,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(11),LingoNumber(9),-LingoNumber(9))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    tmp_q = int(q)                    tmp_q += 1                                                pos = LingoGlobal.op_add(pos,LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13))),LingoGlobal.op_add(-LingoNumber(7),self._global.random(LingoNumber(13)))),chaos),chaos),chaos),self._global.random(LingoNumber(100))),LingoNumber(0.0100)))            if (LingoGlobal.op_eq_b(chaos, LingoNumber(0)) or self._global.random(LingoGlobal.op_sub(LingoNumber(300),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(298),chaos),chaos),chaos))) > LingoNumber(1)):                 if self._global.random(LingoNumber(100)) < LingoGlobal.op_mul(chaos,LingoNumber(100)):                     f = LingoGlobal.op_mul(self._global.random(LingoGlobal.op_add(LingoNumber(1000),LingoGlobal.op_mul(LingoNumber(4000),chaos))),chaos).integer                    tmp_a=int(LingoNumber(1))                    while tmp_a < LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(1.0000),chaos),LingoNumber(4)):                         a = LingoNumber(tmp_a)                        f = self._global.random(f)                        if LingoGlobal.op_eq_b(f, LingoNumber(1)):                             break                                                    tmp_a = int(a)                        tmp_a += 1                                                            else:                    f = LingoNumber(1)                                    if LingoGlobal.abs(f) > LingoNumber(1):                     f = LingoGlobal.op_sub(f,LingoNumber(1))                    if LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):                         f = LingoGlobal.op_mul(f,-LingoNumber(1))                                            self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilhFL").image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilh2FL").image,self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),LingoGlobal.op_add(-LingoNumber(90.0512),LingoGlobal.op_mul(f,LingoNumber(0.0100)))),self._global.member("ceramicTileSilh2FL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                else:                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilhFL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),self._global.member("ceramicTileSilhFL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(255))))
                    self._global.member(LingoGlobal.concat("gradientB",self._global.str(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10))))).image.copypixels(self._global.member("ceramicTileSilh2FL").image,LingoGlobal.op_add(LingoGlobal.rect(pos,pos),LingoGlobal.rect(-LingoNumber(9),-LingoNumber(9),LingoNumber(9),LingoGlobal.op_div(LingoNumber(9),LingoNumber(2)))),self._global.member("ceramicTileSilh2FL").image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            self._global.the_randomSeed = savseed                            return None            def drawdpttile(self, mat, tl, layer, frntimg):         savseed = None        pos = None        pstlr = None        a = None        var = None        q = None        lst = None        lftdp = None        rghtdp = None        tpdp = None        bttmdp = None        lft = None        rght = None        tp = None        bttm = None        rand = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))        pstlr = self.dpstartlayeroftile(tl,layer)        if (LingoGlobal.op_eq_b(mat, "Shallow Circuits") or LingoGlobal.op_eq_b(mat, "Shallow Dense Pipes")):             pstlr = LingoGlobal.op_sub(LingoGlobal.op_mul(layer,LingoNumber(10)),LingoNumber(10))                    if self.afamvlvledit(tl,layer) > LingoNumber(1):             a = self.afamvlvledit(tl,layer)            var = LingoNumber(16)            match a if a is not None else 9999999999:                 case 2:                    var = LingoNumber(20)                                    case 3:                    var = LingoNumber(19)                                    case 4:                    var = LingoNumber(17)                                    case 5:                    var = LingoNumber(18)                                    case 6:                    if LingoGlobal.ToBool(self.gDRMatFixes):                         var = LingoNumber(21)                                                            case 9:                    if LingoGlobal.ToBool(self.gDRMatFixes):                         var = LingoNumber(22)                                                                        tmp_q=int(pstlr)            while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_mul(layer,LingoNumber(10)),LingoNumber(1)):                 q = LingoNumber(tmp_q)                if LingoGlobal.op_eq_b(mat, "Shallow Circuits"):                     self._global.member(LingoGlobal.concat("layer",q)).image.copypixels(self._global.member("circuitsImage").image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(40)),LingoNumber(1),LingoGlobal.op_mul(var,LingoNumber(40)),LingoNumber(41)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                elif LingoGlobal.op_eq_b(mat, "Shallow Dense Pipes"):                     self._global.member(LingoGlobal.concat("layer",q)).image.copypixels(self._global.member("dense PipesImage").image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(40)),LingoNumber(1),LingoGlobal.op_mul(var,LingoNumber(40)),LingoNumber(41)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                else:                    self._global.member(LingoGlobal.concat("layer",q)).image.copypixels(self._global.member(LingoGlobal.concat(mat,"image")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(40)),LingoNumber(1),LingoGlobal.op_mul(var,LingoNumber(40)),LingoNumber(41)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                tmp_q = int(q)                tmp_q += 1                                    else:            lst = LingoList("0000","1111","0101","1010","0001","1000","0100","0010","1001","1100","0110","0011","1011","1101","1110","0111")            lftdp = self.dpstartlayeroftile(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer)            rghtdp = self.dpstartlayeroftile(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer)            tpdp = self.dpstartlayeroftile(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer)            bttmdp = self.dpstartlayeroftile(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer)            tmp_q=int(pstlr)            while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_mul(layer,LingoNumber(10)),LingoNumber(1)):                 q = LingoNumber(tmp_q)                lft = LingoGlobal.op_mul(LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer),self.dpcircuitconnection(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),q).loch),LingoGlobal.op_le(lftdp,q))                rght = LingoGlobal.op_mul(LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer),self.dpcircuitconnection(tl,q).loch),LingoGlobal.op_le(rghtdp,q))                tp = LingoGlobal.op_mul(LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer),self.dpcircuitconnection(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),q).locv),LingoGlobal.op_le(tpdp,q))                bttm = LingoGlobal.op_mul(LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer),self.dpcircuitconnection(tl,q).locv),LingoGlobal.op_le(bttmdp,q))                if (LingoGlobal.op_eq_b(mat, "Shallow Circuits") or LingoGlobal.op_eq_b(mat, "Shallow Dense Pipes")):                     lft = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer),self.dpcircuitconnection(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),q).loch)                    rght = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer),self.dpcircuitconnection(tl,q).loch)                    tp = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer),self.dpcircuitconnection(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),q).locv)                    bttm = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer),self.dpcircuitconnection(tl,q).locv)                                    if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer) > LingoNumber(1) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(9)))):                     lft = LingoNumber(1)                                    if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer) > LingoNumber(1) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(9)))):                     rght = LingoNumber(1)                                    if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer) > LingoNumber(1) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(9)))):                     tp = LingoNumber(1)                                    if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer) > LingoNumber(1) and (LingoGlobal.op_eq_b(self.gDRMatFixes, LingoGlobal.FALSE) or LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(9)))):                     bttm = LingoNumber(1)                                    var = lst.getpos(LingoGlobal.concat(self._global.str(lft),self._global.str(tp),self._global.str(rght),self._global.str(bttm)))                rand = LingoNumber(1)                if (LingoGlobal.op_eq_b(mat, "Circuits") or LingoGlobal.op_eq_b(mat, "Shallow Circuits")):                     rand = self._global.random(LingoNumber(5))                                    if LingoGlobal.op_eq_b(mat, "Shallow Circuits"):                     self._global.member(LingoGlobal.concat("layer",q)).image.copypixels(self._global.member("circuitsImage").image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(40)),LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoGlobal.op_sub(rand,LingoNumber(1)),LingoNumber(40))),LingoGlobal.op_mul(var,LingoNumber(40)),LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(rand,LingoNumber(40)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                elif LingoGlobal.op_eq_b(mat, "Shallow Dense Pipes"):                     self._global.member(LingoGlobal.concat("layer",q)).image.copypixels(self._global.member("dense PipesImage").image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(40)),LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoGlobal.op_sub(rand,LingoNumber(1)),LingoNumber(40))),LingoGlobal.op_mul(var,LingoNumber(40)),LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(rand,LingoNumber(40)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                else:                    self._global.member(LingoGlobal.concat("layer",q)).image.copypixels(self._global.member(LingoGlobal.concat(mat,"image")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(20),LingoNumber(20)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(40)),LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoGlobal.op_sub(rand,LingoNumber(1)),LingoNumber(40))),LingoGlobal.op_mul(var,LingoNumber(40)),LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(rand,LingoNumber(40)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                tmp_q = int(q)                tmp_q += 1                                    self._global.the_randomSeed = savseed                return None            def drawrandompipesmat(self, mat, tl, layer, frntimg):         savseed = None        pos = None        a = None        var = None        q = None        ld = None        tf = None        lst = None        lft = None        rght = None        tp = None        bttm = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))        pos = self.givemiddleoftile(LingoGlobal.op_sub(tl,self.gRenderCameraTilePos))        if self.afamvlvledit(tl,layer) > LingoNumber(1):             a = self.afamvlvledit(tl,layer)            var = LingoNumber(16)            match a if a is not None else 9999999999:                 case 2:                    var = LingoNumber(20)                                    case 3:                    var = LingoNumber(19)                                    case 4:                    var = LingoNumber(17)                                    case 5:                    var = LingoNumber(18)                                    case 6:                    var = LingoList(LingoNumber(21),LingoNumber(25))[self._global.random(LingoNumber(2))]                                    case 9:                    var = LingoNumber(22)                                                q = LingoGlobal.op_sub(LingoGlobal.op_mul(layer,LingoNumber(10)),LingoNumber(10))            if LingoGlobal.op_eq_b(a, LingoNumber(6)):                 tmp_ld=int(LingoNumber(0))                while tmp_ld < LingoNumber(9):                     ld = LingoNumber(tmp_ld)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(q,ld)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Image2")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),ld),LingoGlobal.op_mul(var,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ld,LingoNumber(1)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    tmp_ld = int(ld)                    tmp_ld += 1                                                else:                tmp_ld=int(LingoNumber(0))                while tmp_ld < LingoNumber(2):                     ld = LingoNumber(tmp_ld)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(q,ld)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Image2")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),ld),LingoGlobal.op_mul(var,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ld,LingoNumber(1)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    tmp_ld = int(ld)                    tmp_ld += 1                                    tmp_tf=int(LingoNumber(3))                while tmp_tf < LingoNumber(6):                     tf = LingoNumber(tmp_tf)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(q,tf)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Image2")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoNumber(3)),LingoGlobal.op_mul(var,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoNumber(4))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    tmp_tf = int(tf)                    tmp_tf += 1                                    tf = LingoNumber(7)                tmp_ld=int(LingoNumber(4))                while tmp_ld < LingoNumber(6):                     ld = LingoNumber(tmp_ld)                    self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(q,tf)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Image2")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),ld),LingoGlobal.op_mul(var,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ld,LingoNumber(1)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                    tf = LingoGlobal.op_add(tf,LingoNumber(1))                    tmp_ld = int(ld)                    tmp_ld += 1                                                        else:            lst = LingoList("0000","1111","0101","1010","0001","1000","0100","0010","1001","1100","0110","0011","1011","1101","1110","0111")            q = LingoGlobal.op_sub(LingoGlobal.op_mul(layer,LingoNumber(10)),LingoNumber(10))            lft = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer),self.dpcircuitconnection(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),q).loch)            rght = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer),self.dpcircuitconnection(tl,q).loch)            tp = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer),self.dpcircuitconnection(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),q).locv)            bttm = LingoGlobal.op_mul(self.solidafamv(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer),self.dpcircuitconnection(tl,q).locv)            if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer) > LingoNumber(1) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer), LingoNumber(9))):                 lft = LingoNumber(1)                            if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer) > LingoNumber(1) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer), LingoNumber(9))):                 rght = LingoNumber(1)                            if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer) > LingoNumber(1) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),layer), LingoNumber(9))):                 tp = LingoNumber(1)                            if (self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer) > LingoNumber(1) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),layer), LingoNumber(9))):                 bttm = LingoNumber(1)                            var = lst.getpos(LingoGlobal.concat(self._global.str(lft),self._global.str(tp),self._global.str(rght),self._global.str(bttm)))            if LingoGlobal.op_eq_b(var, LingoNumber(3)):                 var = LingoList(LingoNumber(3),LingoNumber(23))[self._global.random(LingoNumber(2))]                            elif LingoGlobal.op_eq_b(var, LingoNumber(4)):                 var = LingoList(LingoNumber(4),LingoNumber(24))[self._global.random(LingoNumber(2))]                            elif LingoGlobal.op_eq_b(var, LingoNumber(1)):                 var = LingoList(LingoNumber(1),LingoNumber(26),LingoNumber(27))[self._global.random(LingoNumber(3))]                            tmp_ld=int(LingoNumber(0))            while tmp_ld < LingoNumber(2):                 ld = LingoNumber(tmp_ld)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(q,ld)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Image2")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),ld),LingoGlobal.op_mul(var,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ld,LingoNumber(1)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_ld = int(ld)                tmp_ld += 1                            tmp_tf=int(LingoNumber(3))            while tmp_tf < LingoNumber(6):                 tf = LingoNumber(tmp_tf)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(q,tf)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Image2")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoNumber(3)),LingoGlobal.op_mul(var,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoNumber(4))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tmp_tf = int(tf)                tmp_tf += 1                            tf = LingoNumber(7)            tmp_ld=int(LingoNumber(4))            while tmp_ld < LingoNumber(6):                 ld = LingoNumber(tmp_ld)                self._global.member(LingoGlobal.concat("layer",self._global.str(LingoGlobal.op_add(q,tf)))).image.copypixels(self._global.member(LingoGlobal.concat(mat,"Image2")).image,LingoGlobal.rect(LingoGlobal.op_sub(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10))),LingoGlobal.op_add(pos,LingoGlobal.point(LingoNumber(10),LingoNumber(10)))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(var,LingoNumber(1)),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),ld),LingoGlobal.op_mul(var,LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ld,LingoNumber(1)))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))
                tf = LingoGlobal.op_add(tf,LingoNumber(1))                tmp_ld = int(ld)                tmp_ld += 1                                    self._global.the_randomSeed = savseed                return None            def dpcircuitconnection(self, tl, dpadd):         savseed = None        pnt = None        savseed = self._global.the_randomSeed        self._global.the_randomSeed = LingoGlobal.op_sub(LingoGlobal.op_add(self.seedfortile(tl),LingoGlobal.op_mul(LingoGlobal.op_div(dpadd,LingoNumber(2)).integer,LingoGlobal.op_div(tl.loch,LingoNumber(3)).integer)),LingoGlobal.op_div(tl.locv,LingoNumber(2)).integer)        if LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):             pnt = LingoGlobal.point(LingoGlobal.op_sub(self._global.random(LingoNumber(2)),LingoNumber(1)),LingoGlobal.op_sub(self._global.random(LingoNumber(2)),LingoNumber(1)))                    elif LingoGlobal.op_eq_b(self._global.random(LingoNumber(2)), LingoNumber(1)):             pnt = LingoGlobal.point(LingoNumber(1),LingoNumber(0))                    else:            pnt = LingoGlobal.point(LingoNumber(0),LingoNumber(1))                    self._global.the_randomSeed = savseed        return pnt                    def dpstartlayeroftile(self, tl, layer):         distancetoair = None        pushin = None        if layer > LingoNumber(1):             if LingoGlobal.op_eq_b(self.afamvlvledit(tl,LingoGlobal.op_sub(layer,LingoNumber(1))), LingoNumber(1)):                 pass                                    distancetoair = self.distancetoair(tl,layer)        if (distancetoair >= LingoNumber(7) and LingoGlobal.op_eq_b(layer, LingoNumber(1))):             pass                    pushin = LingoGlobal.op_sub(LingoNumber(6),distancetoair)        pushin = LingoGlobal.op_sub(LingoGlobal.op_sub(pushin,LingoGlobal.op_eq(layer,LingoNumber(1))),LingoGlobal.op_mul(LingoNumber(3),LingoGlobal.op_eq(layer,LingoNumber(3))))        pushin = self.restrict(pushin,LingoGlobal.op_sub(LingoGlobal.op_mul(-LingoNumber(4),LingoGlobal.op_gt(layer,LingoNumber(1))),LingoGlobal.op_mul(LingoNumber(5),LingoGlobal.op_eq(layer,LingoNumber(3)))),LingoGlobal.op_sub(LingoNumber(9),LingoGlobal.op_mul(LingoNumber(5),LingoGlobal.op_eq(layer,LingoNumber(1)))))        return LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),pushin)                    def distancetoair(self, tl, layer):         distancetoair = None        ext = None        dist = None        dir = None        distancetoair = LingoNumber(8)        ext = LingoNumber(0)        tmp_dist=int(LingoNumber(1))        while tmp_dist < LingoNumber(7):             dist = LingoNumber(tmp_dist)            for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(-LingoNumber(1),LingoNumber(1))):                 dir = LingoNumber(tmp_dir)                if (LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),layer), LingoNumber(1)) and LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.op_add(tl,LingoGlobal.op_mul(dir,dist)),self.restrict(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(1),LingoNumber(3))), LingoNumber(1))):                     distancetoair = dist                    ext = LingoNumber(1)                    break                                                if LingoGlobal.ToBool(ext):                 break                            tmp_dist = int(dist)            tmp_dist += 1                    return distancetoair                    def drawtinysigns(self):         language = None        bluelist = None        redlist = None        tlsize = None        c = None        q = None        mdpnt = None        gtpos = None        p = None        self._global.member("Tiny SignsTexture").image.copypixels(LingoImage.Pxl,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1080),LingoNumber(800)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
        language = LingoNumber(2)        bluelist = LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)))        redlist = LingoList(LingoGlobal.point(-LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)))        tlsize = LingoNumber(8)        tmp_c=int(LingoNumber(0))        while tmp_c < LingoNumber(100):             c = LingoNumber(tmp_c)            tmp_q=int(LingoNumber(0))            while tmp_q < LingoNumber(135):                 q = LingoNumber(tmp_q)                mdpnt = LingoGlobal.point(LingoGlobal.op_mul(LingoGlobal.op_add(q,LingoNumber(0.5000)),tlsize),LingoGlobal.op_mul(LingoGlobal.op_add(c,LingoNumber(0.5000)),tlsize))                gtpos = LingoGlobal.point(self._global.random(LingoList(LingoNumber(20),LingoNumber(14),LingoNumber(1))[language]),language)                if LingoGlobal.op_eq_b(self._global.random(LingoNumber(50)), LingoNumber(1)):                     language = LingoNumber(2)                                    elif LingoGlobal.op_eq_b(self._global.random(LingoNumber(80)), LingoNumber(1)):                     language = LingoNumber(1)                                    if LingoGlobal.op_eq_b(self._global.random(LingoNumber(7)), LingoNumber(1)):                     if LingoGlobal.op_eq_b(self._global.random(LingoNumber(3)), LingoNumber(1)):                         gtpos = LingoGlobal.point(LingoNumber(1),LingoNumber(3))                                            else:                        gtpos = LingoGlobal.point(self._global.random(self._global.random(LingoNumber(7))),LingoNumber(3))                        if LingoGlobal.op_eq_b(self._global.random(LingoNumber(5)), LingoNumber(1)):                             language = LingoNumber(2)                                                    elif LingoGlobal.op_eq_b(self._global.random(LingoNumber(10)), LingoNumber(1)):                             language = LingoNumber(1)                                                                                        for tmp_p in redlist:                     p = LingoNumber(tmp_p)                    self._global.member("Tiny SignsTexture").image.copypixels(self._global.member("tinySigns").image,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(mdpnt,mdpnt),LingoGlobal.rect(-LingoNumber(3),-LingoNumber(3),LingoNumber(3),LingoNumber(3))),LingoGlobal.rect(p,p)),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.loch,LingoNumber(1)),LingoNumber(6)),LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.locv,LingoNumber(1)),LingoNumber(6)),LingoGlobal.op_mul(gtpos.loch,LingoNumber(6)),LingoGlobal.op_mul(gtpos.locv,LingoNumber(6))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))                for tmp_p in bluelist:                     p = LingoNumber(tmp_p)                    self._global.member("Tiny SignsTexture").image.copypixels(self._global.member("tinySigns").image,LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(mdpnt,mdpnt),LingoGlobal.rect(-LingoNumber(3),-LingoNumber(3),LingoNumber(3),LingoNumber(3))),LingoGlobal.rect(p,p)),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.loch,LingoNumber(1)),LingoNumber(6)),LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.locv,LingoNumber(1)),LingoNumber(6)),LingoGlobal.op_mul(gtpos.loch,LingoNumber(6)),LingoGlobal.op_mul(gtpos.locv,LingoNumber(6))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))                self._global.member("Tiny SignsTexture").image.copypixels(self._global.member("tinySigns").image,LingoGlobal.op_add(LingoGlobal.rect(mdpnt,mdpnt),LingoGlobal.rect(-LingoNumber(3),-LingoNumber(3),LingoNumber(3),LingoNumber(3))),LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.loch,LingoNumber(1)),LingoNumber(6)),LingoGlobal.op_mul(LingoGlobal.op_sub(gtpos.locv,LingoNumber(1)),LingoNumber(6)),LingoGlobal.op_mul(gtpos.loch,LingoNumber(6)),LingoGlobal.op_mul(gtpos.locv,LingoNumber(6))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                tmp_q = int(q)                tmp_q += 1                            tmp_c = int(c)            tmp_c += 1                            return None            def rendertilematerial(self, layer, material, frntimg):         tlsordered = None        q = None        c = None        addme = None        tls = None        tilecat = None        cnt = None        tl = None        stcat = None        st = None        dell = None        hts = None        dir = None        del = None        savseed = None        todel = None        randommachines = None        w = None        lst = None        h = None        a = None        t = None        thetile = None        tlsblock = None        randomorderlist = None        testtile = None        legaltoplace = None        b = None        testpoint = None        spec = None        rootpos = None        randommetal = None        stones = None        smsto = None        tsto = None        tlc = None        tags2 = None        ptt = None        randommetals = None        dunesand = None        tls2 = None        ind = None        drawn = None        occupy = None        tlsordered = LingoList()        tmp_q=int(LingoNumber(1))        while tmp_q < self.gLOprops.size.loch:             q = LingoNumber(tmp_q)            tmp_c=int(LingoNumber(1))            while tmp_c < self.gLOprops.size.locv:                 c = LingoNumber(tmp_c)                if LingoGlobal.op_ne_b(self.gLEProps.matrix[q][c][layer][LingoNumber(1)], LingoNumber(0)):                     addme = LingoNumber(0)                    if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[q][c][layer].tp, "material"):                         if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[q][c][layer].data, material):                             addme = LingoNumber(1)                                                                        elif LingoGlobal.op_eq_b(self.gTEprops.defaultmaterial, material):                         if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[q][c][layer].tp, "default"):                             addme = LingoNumber(1)                                                                        if LingoGlobal.ToBool(addme):                         if LingoGlobal.op_eq_b(self.gLEProps.matrix[q][c][layer][LingoNumber(1)], LingoNumber(1)):                             tlsordered.add(LingoList(self._global.random(LingoGlobal.op_add(self.gLOprops.size.loch,self.gLOprops.size.locv)),LingoGlobal.point(q,c)))                        elif (LingoGlobal.ToBool(self.gDRMatFixes) or (((LingoGlobal.op_ne_b(material, "Tiled Stone") and LingoGlobal.op_ne_b(material, "Chaotic Stone")) and LingoGlobal.op_ne_b(material, "Random Machines")) and LingoGlobal.op_ne_b(material, "3DBricks"))):                             tlsordered.add(LingoList(self._global.random(LingoGlobal.op_add(self.gLOprops.size.loch,self.gLOprops.size.locv)),LingoGlobal.point(q,c)))                        elif LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                             frntimg = self.drawatilematerial(q,c,layer,"Standard",frntimg)                                                                                        tmp_c = int(c)                tmp_c += 1                            tmp_q = int(q)            tmp_q += 1                    tlsordered.sort()
        tls = LingoList()        tmp_q=int(LingoNumber(1))        while tmp_q < tlsordered.count:             q = LingoNumber(tmp_q)            tls.add(tlsordered[q][LingoNumber(2)])
            tmp_q = int(q)            tmp_q += 1                    match material.lower():             case "chaotic stone":                if LingoGlobal.ToBool(self.gDRMatFixes):                     tmp_tileCat=int(self.getfirsttilecat())                    while tmp_tileCat < self.gTiles.count:                         tilecat = LingoNumber(tmp_tileCat)                        if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Stone"):                             break                                                    tmp_tileCat = int(tilecat)                        tmp_tileCat += 1                                            cnt = tls.count                    tmp_q=int(LingoNumber(1))                    while tmp_q < cnt:                         q = LingoNumber(tmp_q)                        tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                        match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                             case 2:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 3:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 4:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 5:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 6:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 0 | 7 | 8 | 9:                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    tmp_q = int(q)                        tmp_q += 1                                                            stcat = LingoNumber(0)                tmp_st=int(LingoNumber(1))                while tmp_st < self.gTiles.count:                     st = LingoNumber(tmp_st)                    if LingoGlobal.op_eq_b(self.gTiles[st].nm, "Stone"):                         stcat = st                        break                                            tmp_st = int(st)                    tmp_st += 1                                    dell = LingoList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    if LingoGlobal.op_eq_b(dell.getpos(tl), LingoNumber(0)):                         hts = LingoNumber(0)                        for tmp_dir in LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(1))):                             dir = LingoNumber(tmp_dir)                            hts = LingoGlobal.op_add(hts,LingoGlobal.op_mul(LingoGlobal.op_gt(tls.getpos(LingoGlobal.op_add(tl,dir)),LingoNumber(0)),LingoGlobal.op_eq(dell.getpos(LingoGlobal.op_add(tl,dir)),LingoNumber(0))))                                                    if LingoGlobal.op_eq_b(hts, LingoNumber(3)):                             if LingoGlobal.ToBool(tl.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                                 frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[stcat].tls[LingoNumber(2)],frntimg)                                                            for tmp_dir in LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(1))):                                 dir = LingoNumber(tmp_dir)                                dell.add(LingoGlobal.op_add(tl,dir))                            dell.add(tl)                                                            for tmp_del in dell:                     del = LingoNumber(tmp_del)                    tls.deleteone(del)                savseed = self._global.the_randomSeed                while LingoGlobal.ToBool(LingoGlobal.op_gt(tls.count,LingoNumber(0))):                     self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,tls.count)                    tl = tls[self._global.random(tls.count)]                    if LingoGlobal.ToBool(tl.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                         frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[stcat].tls[LingoNumber(1)],frntimg)                                            tls.deleteone(tl)                self._global.the_randomSeed = savseed                            case "tiled stone":                if LingoGlobal.ToBool(self.gDRMatFixes):                     tmp_tileCat=int(self.getfirsttilecat())                    while tmp_tileCat < self.gTiles.count:                         tilecat = LingoNumber(tmp_tileCat)                        if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Stone"):                             break                                                    tmp_tileCat = int(tilecat)                        tmp_tileCat += 1                                            cnt = tls.count                    tmp_q=int(LingoNumber(1))                    while tmp_q < cnt:                         q = LingoNumber(tmp_q)                        tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                        match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                             case 2:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 3:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 4:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 5:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 6:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 0 | 7 | 8 | 9:                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    tmp_q = int(q)                        tmp_q += 1                                                            stcat = LingoNumber(0)                tmp_st=int(LingoNumber(1))                while tmp_st < self.gTiles.count:                     st = LingoNumber(tmp_st)                    if LingoGlobal.op_eq_b(self.gTiles[st].nm, "Stone"):                         stcat = st                        break                                            tmp_st = int(st)                    tmp_st += 1                                    dell = LingoList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    if LingoGlobal.op_eq_b(dell.getpos(tl), LingoNumber(0)):                         if (LingoGlobal.ToBool(LingoGlobal.op_mod(tl.locv,LingoNumber(2))) and LingoGlobal.ToBool(LingoGlobal.op_mod(LingoGlobal.op_add(tl.loch,LingoGlobal.op_eq(LingoGlobal.op_mod(tl.locv,LingoNumber(4)),LingoNumber(1))),LingoNumber(2)))):                             hts = LingoNumber(0)                            for tmp_dir in LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(1))):                                 dir = LingoNumber(tmp_dir)                                hts = LingoGlobal.op_add(hts,LingoGlobal.op_mul(LingoGlobal.op_gt(tls.getpos(LingoGlobal.op_add(tl,dir)),LingoNumber(0)),LingoGlobal.op_eq(dell.getpos(LingoGlobal.op_add(tl,dir)),LingoNumber(0))))                                                            if LingoGlobal.op_eq_b(hts, LingoNumber(3)):                                 frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[stcat].tls[LingoNumber(2)],frntimg)                                for tmp_dir in LingoList(LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(1))):                                     dir = LingoNumber(tmp_dir)                                    dell.add(LingoGlobal.op_add(tl,dir))                                dell.add(tl)                                                                                        for tmp_toDel in dell:                     todel = LingoNumber(tmp_toDel)                    tls.deleteone(todel)                while LingoGlobal.ToBool(LingoGlobal.op_gt(tls.count,LingoNumber(0))):                     tl = tls[self._global.random(tls.count)]                    frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[stcat].tls[LingoNumber(1)],frntimg)                    tls.deleteone(tl)                            case "random machines":                if LingoGlobal.ToBool(self.gDRMatFixes):                     tmp_tileCat=int(self.getfirsttilecat())                    while tmp_tileCat < self.gTiles.count:                         tilecat = LingoNumber(tmp_tileCat)                        if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Machine"):                             break                                                    tmp_tileCat = int(tilecat)                        tmp_tileCat += 1                                            cnt = tls.count                    tmp_q=int(LingoNumber(1))                    while tmp_q < cnt:                         q = LingoNumber(tmp_q)                        tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                        match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                             case 2:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 3:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 4:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 5:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 6:                                frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                            case 0 | 7 | 8 | 9:                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    tmp_q = int(q)                        tmp_q += 1                                                            savseed = self._global.the_randomSeed                self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)                randommachines = LingoList()                tmp_w=int(LingoNumber(1))                while tmp_w < LingoNumber(8):                     w = LingoNumber(tmp_w)                    lst = LingoList()                    tmp_h=int(LingoNumber(1))                    while tmp_h < LingoNumber(8):                         h = LingoNumber(tmp_h)                        lst.add(LingoList())
                        tmp_h = int(h)                        tmp_h += 1                                            randommachines.add(lst)
                    tmp_w = int(w)                    tmp_w += 1                                    tmp_a=int(LingoNumber(1))                while tmp_a < self.RandomMachines_grabTiles.count:                     a = LingoNumber(tmp_a)                    tmp_q=int(LingoNumber(1))                    while tmp_q < self.gTiles.count:                         q = LingoNumber(tmp_q)                        if LingoGlobal.op_eq_b(self.gTiles[q].nm, self.RandomMachines_grabTiles[a]):                             tmp_t=int(LingoNumber(1))                            while tmp_t < self.gTiles[q].tls.count:                                 t = LingoNumber(tmp_t)                                thetile = self.gTiles[q].tls[t]                                if (((thetile.sz.loch <= LingoNumber(8) and thetile.sz.locv <= LingoNumber(8)) and LingoGlobal.op_eq_b(thetile.specs2, LingoNumber(0))) and LingoGlobal.op_eq_b(self.RandomMachines_forbidden.getpos(thetile.nm), LingoNumber(0))):                                     randommachines[thetile.sz.loch][thetile.sz.locv].add(LingoGlobal.point(q,t))                                tmp_t = int(t)                                tmp_t += 1                                                                                    tmp_q = int(q)                        tmp_q += 1                                            tmp_a = int(a)                    tmp_a += 1                                    dell = LingoPropertyList()                tlsblock = LingoPropertyList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    tlsblock[tl] = LingoNumber(1)                                    for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))                    if LingoGlobal.op_eq_b(dell.findpos(tl), LingoGlobal.VOID):                         randomorderlist = LingoList()                        tmp_w=int(LingoNumber(1))                        while tmp_w < randommachines.count:                             w = LingoNumber(tmp_w)                            tmp_h=int(LingoNumber(1))                            while tmp_h < randommachines[w].count:                                 h = LingoNumber(tmp_h)                                tmp_t=int(LingoNumber(1))                                while tmp_t < randommachines[w][h].count:                                     t = LingoNumber(tmp_t)                                    randomorderlist.add(LingoList(self._global.random(LingoNumber(1000)),randommachines[w][h][t]))
                                    tmp_t = int(t)                                    tmp_t += 1                                                                    tmp_h = int(h)                                tmp_h += 1                                                            tmp_w = int(w)                            tmp_w += 1                                                    randomorderlist.sort()
                        tmp_q=int(LingoNumber(1))                        while tmp_q < randomorderlist.count:                             q = LingoNumber(tmp_q)                            testtile = self.gTiles[randomorderlist[q][LingoNumber(2)].loch].tls[randomorderlist[q][LingoNumber(2)].locv]                            legaltoplace = LingoGlobal.TRUE                            tmp_a=int(LingoNumber(0))                            while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                 a = LingoNumber(tmp_a)                                tmp_b=int(LingoNumber(0))                                while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                     b = LingoNumber(tmp_b)                                    testpoint = LingoGlobal.op_add(tl,LingoGlobal.point(a,b))                                    spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                    if LingoGlobal.op_eq_b(tlsblock.findpos(testpoint), LingoGlobal.VOID):                                         legaltoplace = LingoGlobal.FALSE                                        break                                                                            if spec > -LingoNumber(1):                                         if LingoGlobal.op_ne_b(dell.findpos(testpoint), LingoGlobal.VOID):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                    if LingoGlobal.op_ne_b(self.afamvlvledit(testpoint,layer), spec):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                                                        tmp_b = int(b)                                    tmp_b += 1                                                                    if LingoGlobal.op_eq_b(legaltoplace, LingoGlobal.FALSE):                                     break                                                                    tmp_a = int(a)                                tmp_a += 1                                                            if LingoGlobal.ToBool(legaltoplace):                                 rootpos = LingoGlobal.op_add(tl,LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.loch.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.locv.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1))))                                if LingoGlobal.ToBool(rootpos.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                                     frntimg = self.drawatiletile(rootpos.loch,rootpos.locv,layer,testtile,frntimg)                                                                    tmp_a=int(LingoNumber(0))                                while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                     a = LingoNumber(tmp_a)                                    tmp_b=int(LingoNumber(0))                                    while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                         b = LingoNumber(tmp_b)                                        spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                        if spec > -LingoNumber(1):                                             dell[LingoGlobal.op_add(tl,LingoGlobal.point(a,b))] = LingoNumber(1)                                                                                    tmp_b = int(b)                                        tmp_b += 1                                                                            tmp_a = int(a)                                    tmp_a += 1                                                                    break                                                            tmp_q = int(q)                            tmp_q += 1                                                                                        self._global.the_randomSeed = savseed                            case "random machines 2":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Machine"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 3:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 4:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 5:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 6:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8 | 9:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                            tmp_q = int(q)                    tmp_q += 1                                    savseed = self._global.the_randomSeed                self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)                randommachines = LingoList()                tmp_w=int(LingoNumber(1))                while tmp_w < LingoNumber(8):                     w = LingoNumber(tmp_w)                    lst = LingoList()                    tmp_h=int(LingoNumber(1))                    while tmp_h < LingoNumber(8):                         h = LingoNumber(tmp_h)                        lst.add(LingoList())
                        tmp_h = int(h)                        tmp_h += 1                                            randommachines.add(lst)
                    tmp_w = int(w)                    tmp_w += 1                                    tmp_a=int(LingoNumber(1))                while tmp_a < self.RandomMachines2_grabTiles.count:                     a = LingoNumber(tmp_a)                    tmp_q=int(LingoNumber(1))                    while tmp_q < self.gTiles.count:                         q = LingoNumber(tmp_q)                        if LingoGlobal.op_eq_b(self.gTiles[q].nm, self.RandomMachines2_grabTiles[a]):                             tmp_t=int(LingoNumber(1))                            while tmp_t < self.gTiles[q].tls.count:                                 t = LingoNumber(tmp_t)                                thetile = self.gTiles[q].tls[t]                                if (((thetile.sz.loch <= LingoNumber(8) and thetile.sz.locv <= LingoNumber(8)) and LingoGlobal.op_eq_b(thetile.specs2, LingoNumber(0))) and LingoGlobal.op_eq_b(self.RandomMachines2_forbidden.getpos(thetile.nm), LingoNumber(0))):                                     randommachines[thetile.sz.loch][thetile.sz.locv].add(LingoGlobal.point(q,t))                                tmp_t = int(t)                                tmp_t += 1                                                                                    tmp_q = int(q)                        tmp_q += 1                                            tmp_a = int(a)                    tmp_a += 1                                    dell = LingoPropertyList()                tlsblock = LingoPropertyList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    tlsblock[tl] = LingoNumber(1)                                    for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))                    if LingoGlobal.op_eq_b(dell.findpos(tl), LingoGlobal.VOID):                         randomorderlist = LingoList()                        tmp_w=int(LingoNumber(1))                        while tmp_w < randommachines.count:                             w = LingoNumber(tmp_w)                            tmp_h=int(LingoNumber(1))                            while tmp_h < randommachines[w].count:                                 h = LingoNumber(tmp_h)                                tmp_t=int(LingoNumber(1))                                while tmp_t < randommachines[w][h].count:                                     t = LingoNumber(tmp_t)                                    randomorderlist.add(LingoList(self._global.random(LingoNumber(1000)),randommachines[w][h][t]))
                                    tmp_t = int(t)                                    tmp_t += 1                                                                    tmp_h = int(h)                                tmp_h += 1                                                            tmp_w = int(w)                            tmp_w += 1                                                    randomorderlist.sort()
                        tmp_q=int(LingoNumber(1))                        while tmp_q < randomorderlist.count:                             q = LingoNumber(tmp_q)                            testtile = self.gTiles[randomorderlist[q][LingoNumber(2)].loch].tls[randomorderlist[q][LingoNumber(2)].locv]                            legaltoplace = LingoGlobal.TRUE                            tmp_a=int(LingoNumber(0))                            while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                 a = LingoNumber(tmp_a)                                tmp_b=int(LingoNumber(0))                                while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                     b = LingoNumber(tmp_b)                                    testpoint = LingoGlobal.op_add(tl,LingoGlobal.point(a,b))                                    spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                    if LingoGlobal.op_eq_b(tlsblock.findpos(testpoint), LingoGlobal.VOID):                                         legaltoplace = LingoGlobal.FALSE                                        break                                                                            if spec > -LingoNumber(1):                                         if LingoGlobal.op_ne_b(dell.findpos(testpoint), LingoGlobal.VOID):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                    if LingoGlobal.op_ne_b(self.afamvlvledit(testpoint,layer), spec):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                                                        tmp_b = int(b)                                    tmp_b += 1                                                                    if LingoGlobal.op_eq_b(legaltoplace, LingoGlobal.FALSE):                                     break                                                                    tmp_a = int(a)                                tmp_a += 1                                                            if LingoGlobal.ToBool(legaltoplace):                                 rootpos = LingoGlobal.op_add(tl,LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.loch.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.locv.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1))))                                if LingoGlobal.ToBool(rootpos.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                                     frntimg = self.drawatiletile(rootpos.loch,rootpos.locv,layer,testtile,frntimg)                                                                    tmp_a=int(LingoNumber(0))                                while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                     a = LingoNumber(tmp_a)                                    tmp_b=int(LingoNumber(0))                                    while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                         b = LingoNumber(tmp_b)                                        spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                        if spec > -LingoNumber(1):                                             dell[LingoGlobal.op_add(tl,LingoGlobal.point(a,b))] = LingoNumber(1)                                                                                    tmp_b = int(b)                                        tmp_b += 1                                                                            tmp_a = int(a)                                    tmp_a += 1                                                                    break                                                            tmp_q = int(q)                            tmp_q += 1                                                                                        self._global.the_randomSeed = savseed                            case "small machines":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Machine"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 3:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 4:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 5:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 6:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8 | 9:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                            tmp_q = int(q)                    tmp_q += 1                                    savseed = self._global.the_randomSeed                self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)                randommachines = LingoList()                tmp_w=int(LingoNumber(1))                while tmp_w < LingoNumber(8):                     w = LingoNumber(tmp_w)                    lst = LingoList(LingoList(),LingoList(),LingoList(),LingoList(),LingoList(),LingoList(),LingoList(),LingoList())                    randommachines.add(lst)
                    tmp_w = int(w)                    tmp_w += 1                                    tmp_a=int(LingoNumber(1))                while tmp_a < self.SmallMachines_grabTiles.count:                     a = LingoNumber(tmp_a)                    tmp_q=int(LingoNumber(1))                    while tmp_q < self.gTiles.count:                         q = LingoNumber(tmp_q)                        if LingoGlobal.op_eq_b(self.gTiles[q].nm, self.SmallMachines_grabTiles[a]):                             tmp_t=int(LingoNumber(1))                            while tmp_t < self.gTiles[q].tls.count:                                 t = LingoNumber(tmp_t)                                thetile = self.gTiles[q].tls[t]                                if (((thetile.sz.loch <= LingoNumber(8) and thetile.sz.locv <= LingoNumber(8)) and LingoGlobal.op_eq_b(thetile.specs2, LingoNumber(0))) and LingoGlobal.op_eq_b(self.SmallMachines_forbidden.getpos(thetile.nm), LingoNumber(0))):                                     randommachines[thetile.sz.loch][thetile.sz.locv].add(LingoGlobal.point(q,t))                                tmp_t = int(t)                                tmp_t += 1                                                                                    tmp_q = int(q)                        tmp_q += 1                                            tmp_a = int(a)                    tmp_a += 1                                    dell = LingoPropertyList()                tlsblock = LingoPropertyList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    tlsblock[tl] = LingoNumber(1)                                    for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))                    if LingoGlobal.op_eq_b(dell.findpos(tl), LingoGlobal.VOID):                         randomorderlist = LingoList()                        tmp_w=int(LingoNumber(1))                        while tmp_w < randommachines.count:                             w = LingoNumber(tmp_w)                            tmp_h=int(LingoNumber(1))                            while tmp_h < randommachines[w].count:                                 h = LingoNumber(tmp_h)                                tmp_t=int(LingoNumber(1))                                while tmp_t < randommachines[w][h].count:                                     t = LingoNumber(tmp_t)                                    randomorderlist.add(LingoList(self._global.random(LingoNumber(1000)),randommachines[w][h][t]))
                                    tmp_t = int(t)                                    tmp_t += 1                                                                    tmp_h = int(h)                                tmp_h += 1                                                            tmp_w = int(w)                            tmp_w += 1                                                    randomorderlist.sort()
                        tmp_q=int(LingoNumber(1))                        while tmp_q < randomorderlist.count:                             q = LingoNumber(tmp_q)                            testtile = self.gTiles[randomorderlist[q][LingoNumber(2)].loch].tls[randomorderlist[q][LingoNumber(2)].locv]                            legaltoplace = LingoGlobal.TRUE                            tmp_a=int(LingoNumber(0))                            while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                 a = LingoNumber(tmp_a)                                tmp_b=int(LingoNumber(0))                                while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                     b = LingoNumber(tmp_b)                                    testpoint = LingoGlobal.op_add(tl,LingoGlobal.point(a,b))                                    spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                    if LingoGlobal.op_eq_b(tlsblock.findpos(testpoint), LingoGlobal.VOID):                                         legaltoplace = LingoGlobal.FALSE                                        break                                                                            if spec > -LingoNumber(1):                                         if LingoGlobal.op_ne_b(dell.findpos(testpoint), LingoGlobal.VOID):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                    if LingoGlobal.op_ne_b(self.afamvlvledit(testpoint,layer), spec):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                                                        tmp_b = int(b)                                    tmp_b += 1                                                                    if LingoGlobal.op_eq_b(legaltoplace, LingoGlobal.FALSE):                                     break                                                                    tmp_a = int(a)                                tmp_a += 1                                                            if LingoGlobal.ToBool(legaltoplace):                                 rootpos = LingoGlobal.op_add(tl,LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.loch.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.locv.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1))))                                if LingoGlobal.ToBool(rootpos.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                                     frntimg = self.drawatiletile(rootpos.loch,rootpos.locv,layer,testtile,frntimg)                                                                    tmp_a=int(LingoNumber(0))                                while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                     a = LingoNumber(tmp_a)                                    tmp_b=int(LingoNumber(0))                                    while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                         b = LingoNumber(tmp_b)                                        spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                        if spec > -LingoNumber(1):                                             dell[LingoGlobal.op_add(tl,LingoGlobal.point(a,b))] = LingoNumber(1)                                                                                    tmp_b = int(b)                                        tmp_b += 1                                                                            tmp_a = int(a)                                    tmp_a += 1                                                                    break                                                            tmp_q = int(q)                            tmp_q += 1                                                                                        self._global.the_randomSeed = savseed                            case "random metal":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Metal"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 3:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 4:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 5:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 6:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8 | 9:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                            tmp_q = int(q)                    tmp_q += 1                                    savseed = self._global.the_randomSeed                self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)                randommetal = LingoList()                tmp_w=int(LingoNumber(1))                while tmp_w < LingoNumber(8):                     w = LingoNumber(tmp_w)                    lst = LingoList()                    tmp_h=int(LingoNumber(1))                    while tmp_h < LingoNumber(8):                         h = LingoNumber(tmp_h)                        lst.add(LingoList())
                        tmp_h = int(h)                        tmp_h += 1                                            randommetal.add(lst)
                    tmp_w = int(w)                    tmp_w += 1                                    tmp_q=int(self.getfirsttilecat())                while tmp_q < self.gTiles.count:                     q = LingoNumber(tmp_q)                    tmp_t=int(LingoNumber(1))                    while tmp_t < self.gTiles[q].tls.count:                         t = LingoNumber(tmp_t)                        thetile = self.gTiles[q].tls[t]                        if (LingoGlobal.op_ne_b(thetile.tags.getpos("randomMetal"), LingoNumber(0)) or self.DRRandomMetal_needed.getpos(thetile.nm) >= LingoNumber(1)):                             randommetal[thetile.sz.loch][thetile.sz.locv].add(LingoGlobal.point(q,t))                        tmp_t = int(t)                        tmp_t += 1                                            tmp_q = int(q)                    tmp_q += 1                                    dell = LingoPropertyList()                tlsblock = LingoPropertyList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    tlsblock[tl] = LingoNumber(1)                                    for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))                    if LingoGlobal.op_eq_b(dell.findpos(tl), LingoGlobal.VOID):                         randomorderlist = LingoList()                        tmp_w=int(LingoNumber(1))                        while tmp_w < randommetal.count:                             w = LingoNumber(tmp_w)                            tmp_h=int(LingoNumber(1))                            while tmp_h < randommetal[w].count:                                 h = LingoNumber(tmp_h)                                tmp_t=int(LingoNumber(1))                                while tmp_t < randommetal[w][h].count:                                     t = LingoNumber(tmp_t)                                    randomorderlist.add(LingoList(self._global.random(LingoNumber(1000)),randommetal[w][h][t]))
                                    tmp_t = int(t)                                    tmp_t += 1                                                                    tmp_h = int(h)                                tmp_h += 1                                                            tmp_w = int(w)                            tmp_w += 1                                                    randomorderlist.sort()
                        tmp_q=int(LingoNumber(1))                        while tmp_q < randomorderlist.count:                             q = LingoNumber(tmp_q)                            testtile = self.gTiles[randomorderlist[q][LingoNumber(2)].loch].tls[randomorderlist[q][LingoNumber(2)].locv]                            legaltoplace = LingoGlobal.TRUE                            tmp_a=int(LingoNumber(0))                            while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                 a = LingoNumber(tmp_a)                                tmp_b=int(LingoNumber(0))                                while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                     b = LingoNumber(tmp_b)                                    testpoint = LingoGlobal.op_add(tl,LingoGlobal.point(a,b))                                    spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                    if LingoGlobal.op_eq_b(tlsblock.findpos(testpoint), LingoGlobal.VOID):                                         legaltoplace = LingoGlobal.FALSE                                        break                                                                            if spec > -LingoNumber(1):                                         if LingoGlobal.op_ne_b(dell.findpos(testpoint), LingoGlobal.VOID):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                    if LingoGlobal.op_ne_b(self.afamvlvledit(testpoint,layer), spec):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                                                        tmp_b = int(b)                                    tmp_b += 1                                                                    if LingoGlobal.op_eq_b(legaltoplace, LingoGlobal.FALSE):                                     break                                                                    tmp_a = int(a)                                tmp_a += 1                                                            if LingoGlobal.ToBool(legaltoplace):                                 rootpos = LingoGlobal.op_add(tl,LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.loch.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.locv.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1))))                                if LingoGlobal.ToBool(rootpos.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                                     frntimg = self.drawatiletile(rootpos.loch,rootpos.locv,layer,testtile,frntimg)                                                                    tmp_a=int(LingoNumber(0))                                while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                     a = LingoNumber(tmp_a)                                    tmp_b=int(LingoNumber(0))                                    while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                         b = LingoNumber(tmp_b)                                        spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                        if spec > -LingoNumber(1):                                             dell[LingoGlobal.op_add(tl,LingoGlobal.point(a,b))] = LingoNumber(1)                                                                                    tmp_b = int(b)                                        tmp_b += 1                                                                            tmp_a = int(a)                                    tmp_a += 1                                                                    break                                                            tmp_q = int(q)                            tmp_q += 1                                                                                        self._global.the_randomSeed = savseed                            case "chaotic stone 2":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Stone"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 3:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 4:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 5:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 6:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8 | 9:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                            tmp_q = int(q)                    tmp_q += 1                                    savseed = self._global.the_randomSeed                self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)                stones = LingoList()                smsto = LingoList()                tmp_w=int(LingoNumber(1))                while tmp_w < LingoNumber(8):                     w = LingoNumber(tmp_w)                    lst = LingoList()                    tmp_h=int(LingoNumber(1))                    while tmp_h < LingoNumber(8):                         h = LingoNumber(tmp_h)                        lst.add(LingoList())
                        tmp_h = int(h)                        tmp_h += 1                                            stones.add(lst)
                    tmp_w = int(w)                    tmp_w += 1                                    tmp_q=int(self.getfirsttilecat())                while tmp_q < self.gTiles.count:                     q = LingoNumber(tmp_q)                    tmp_t=int(LingoNumber(1))                    while tmp_t < self.gTiles[q].tls.count:                         t = LingoNumber(tmp_t)                        tsto = self.gTiles[q].tls[t]                        if (((LingoGlobal.op_ne_b(tsto.tags.getpos("chaoticStone2"), LingoNumber(0)) or LingoGlobal.op_ne_b(tsto.tags.getpos("chaoticStone2 : rare"), LingoNumber(0))) or LingoGlobal.op_ne_b(tsto.tags.getpos("chaoticStone2 : very rare"), LingoNumber(0))) or self.ChaoticStone2_needed.getpos(tsto.nm) >= LingoNumber(1)):                             if (tsto.sz.loch > LingoNumber(1) and tsto.sz.locv > LingoNumber(1)):                                 stones[tsto.sz.loch][tsto.sz.locv].add(LingoGlobal.point(q,t))                            else:                                smsto.add(tsto)                                                    tmp_t = int(t)                        tmp_t += 1                                            tmp_q = int(q)                    tmp_q += 1                                    dell = LingoPropertyList()                tlsblock = LingoPropertyList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    tlsblock[tl] = LingoNumber(1)                                    tmp_tlC=int(LingoNumber(1))                while tmp_tlC < tls.count:                     tlc = LingoNumber(tmp_tlC)                    tl = tls[tlc]                    self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))                    if LingoGlobal.op_eq_b(dell.findpos(tl), LingoGlobal.VOID):                         randomorderlist = LingoList()                        tmp_w=int(LingoNumber(1))                        while tmp_w < stones.count:                             w = LingoNumber(tmp_w)                            tmp_h=int(LingoNumber(1))                            while tmp_h < stones[w].count:                                 h = LingoNumber(tmp_h)                                tmp_t=int(LingoNumber(1))                                while tmp_t < stones[w][h].count:                                     t = LingoNumber(tmp_t)                                    randomorderlist.add(LingoList(self._global.random(LingoNumber(500)),stones[w][h][t]))
                                    tmp_t = int(t)                                    tmp_t += 1                                                                    tmp_h = int(h)                                tmp_h += 1                                                            tmp_w = int(w)                            tmp_w += 1                                                    randomorderlist.sort()
                        tmp_q=int(LingoNumber(1))                        while tmp_q < randomorderlist.count:                             q = LingoNumber(tmp_q)                            testtile = self.gTiles[randomorderlist[q][LingoNumber(2)].loch].tls[randomorderlist[q][LingoNumber(2)].locv]                            legaltoplace = LingoGlobal.TRUE                            tmp_a=int(LingoNumber(0))                            while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                 a = LingoNumber(tmp_a)                                tmp_b=int(LingoNumber(0))                                while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                     b = LingoNumber(tmp_b)                                    testpoint = LingoGlobal.op_add(tl,LingoGlobal.point(a,b))                                    spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                    if LingoGlobal.op_eq_b(tlsblock.findpos(testpoint), LingoGlobal.VOID):                                         legaltoplace = LingoGlobal.FALSE                                        break                                                                            if spec > -LingoNumber(1):                                         if LingoGlobal.op_ne_b(dell.findpos(testpoint), LingoGlobal.VOID):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                    if LingoGlobal.op_ne_b(self.afamvlvledit(testpoint,layer), spec):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                                                        tmp_b = int(b)                                    tmp_b += 1                                                                    if LingoGlobal.op_eq_b(legaltoplace, LingoGlobal.FALSE):                                     break                                                                    tmp_a = int(a)                                tmp_a += 1                                                            tags2 = testtile.tags                            if (((LingoGlobal.op_ne_b(tags2.getpos("chaoticStone2 : rare"), LingoNumber(0)) and LingoGlobal.op_ne_b(self._global.random(LingoNumber(2)), LingoNumber(1))) or (LingoGlobal.op_ne_b(tags2.getpos("chaoticStone2 : very rare"), LingoNumber(0)) and LingoGlobal.op_ne_b(self._global.random(LingoNumber(4)), LingoNumber(1)))) or (LingoGlobal.op_eq_b(testtile.nm, "Big Stone Marked") and LingoGlobal.op_ne_b(self._global.random(LingoNumber(2)), LingoNumber(1)))):                                 legaltoplace = LingoGlobal.FALSE                                                            if LingoGlobal.ToBool(legaltoplace):                                 rootpos = LingoGlobal.op_add(tl,LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.loch.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.locv.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1))))                                if LingoGlobal.ToBool(rootpos.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                                     frntimg = self.drawatiletile(rootpos.loch,rootpos.locv,layer,testtile,frntimg)                                                                    tmp_a=int(LingoNumber(0))                                while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                     a = LingoNumber(tmp_a)                                    tmp_b=int(LingoNumber(0))                                    while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                         b = LingoNumber(tmp_b)                                        spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                        if spec > -LingoNumber(1):                                             dell[LingoGlobal.op_add(tl,LingoGlobal.point(a,b))] = LingoNumber(1)                                            tls.deleteone(LingoGlobal.op_add(tl,LingoGlobal.point(a,b)))                                        tmp_b = int(b)                                        tmp_b += 1                                                                            tmp_a = int(a)                                    tmp_a += 1                                                                    break                                                            tmp_q = int(q)                            tmp_q += 1                                                                        tmp_tlC = int(tlc)                    tmp_tlC += 1                                    while LingoGlobal.ToBool(LingoGlobal.op_gt(tls.count,LingoNumber(0))):                     tl = tls[self._global.random(tls.count)]                    ptt = smsto[self._global.random(smsto.count)]                    if ((LingoGlobal.op_ne_b(ptt.tags.getpos("chaoticStone2 : rare"), LingoNumber(0)) and LingoGlobal.op_ne_b(self._global.random(LingoNumber(8)), LingoNumber(1))) or (LingoGlobal.op_ne_b(ptt.tags.getpos("chaoticStone2 : very rare"), LingoNumber(0)) and LingoGlobal.op_ne_b(self._global.random(LingoNumber(16)), LingoNumber(1)))):                         ptt = smsto[self._global.random(smsto.count)]                                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,ptt,frntimg)                    tls.deleteone(tl)                self._global.the_randomSeed = savseed                            case "random metals":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing Metal"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 3:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 4:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 5:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 6:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8 | 9:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                            tmp_q = int(q)                    tmp_q += 1                                    savseed = self._global.the_randomSeed                self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)                randommetals = LingoList()                tmp_w=int(LingoNumber(1))                while tmp_w < LingoNumber(8):                     w = LingoNumber(tmp_w)                    lst = LingoList()                    tmp_h=int(LingoNumber(1))                    while tmp_h < LingoNumber(8):                         h = LingoNumber(tmp_h)                        lst.add(LingoList())
                        tmp_h = int(h)                        tmp_h += 1                                            randommetals.add(lst)
                    tmp_w = int(w)                    tmp_w += 1                                    tmp_a=int(LingoNumber(1))                while tmp_a < self.RandomMetals_grabTiles.count:                     a = LingoNumber(tmp_a)                    tmp_q=int(LingoNumber(1))                    while tmp_q < self.gTiles.count:                         q = LingoNumber(tmp_q)                        if LingoGlobal.op_eq_b(self.gTiles[q].nm, self.RandomMetals_grabTiles[a]):                             tmp_t=int(LingoNumber(1))                            while tmp_t < self.gTiles[q].tls.count:                                 t = LingoNumber(tmp_t)                                thetile = self.gTiles[q].tls[t]                                if (((thetile.sz.loch <= LingoNumber(8) and thetile.sz.locv <= LingoNumber(8)) and LingoGlobal.op_eq_b(thetile.specs2, LingoNumber(0))) and self.RandomMetals_allowed.getpos(thetile.nm) >= LingoNumber(1)):                                     randommetals[thetile.sz.loch][thetile.sz.locv].add(LingoGlobal.point(q,t))                                tmp_t = int(t)                                tmp_t += 1                                                                                    tmp_q = int(q)                        tmp_q += 1                                            tmp_a = int(a)                    tmp_a += 1                                    dell = LingoPropertyList()                tlsblock = LingoPropertyList()                for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    tlsblock[tl] = LingoNumber(1)                                    for tmp_tl in tls:                     tl = LingoNumber(tmp_tl)                    self._global.the_randomSeed = self.seedfortile(tl,LingoGlobal.op_add(self.gLOprops.tileseed,layer))                    if LingoGlobal.op_eq_b(dell.findpos(tl), LingoGlobal.VOID):                         randomorderlist = LingoList()                        tmp_w=int(LingoNumber(1))                        while tmp_w < randommetals.count:                             w = LingoNumber(tmp_w)                            tmp_h=int(LingoNumber(1))                            while tmp_h < randommetals[w].count:                                 h = LingoNumber(tmp_h)                                tmp_t=int(LingoNumber(1))                                while tmp_t < randommetals[w][h].count:                                     t = LingoNumber(tmp_t)                                    randomorderlist.add(LingoList(self._global.random(LingoNumber(1000)),randommetals[w][h][t]))
                                    tmp_t = int(t)                                    tmp_t += 1                                                                    tmp_h = int(h)                                tmp_h += 1                                                            tmp_w = int(w)                            tmp_w += 1                                                    randomorderlist.sort()
                        tmp_q=int(LingoNumber(1))                        while tmp_q < randomorderlist.count:                             q = LingoNumber(tmp_q)                            testtile = self.gTiles[randomorderlist[q][LingoNumber(2)].loch].tls[randomorderlist[q][LingoNumber(2)].locv]                            legaltoplace = LingoGlobal.TRUE                            tmp_a=int(LingoNumber(0))                            while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                 a = LingoNumber(tmp_a)                                tmp_b=int(LingoNumber(0))                                while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                     b = LingoNumber(tmp_b)                                    testpoint = LingoGlobal.op_add(tl,LingoGlobal.point(a,b))                                    spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                    if LingoGlobal.op_eq_b(tlsblock.findpos(testpoint), LingoGlobal.VOID):                                         legaltoplace = LingoGlobal.FALSE                                        break                                                                            if spec > -LingoNumber(1):                                         if LingoGlobal.op_ne_b(dell.findpos(testpoint), LingoGlobal.VOID):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                    if LingoGlobal.op_ne_b(self.afamvlvledit(testpoint,layer), spec):                                             legaltoplace = LingoGlobal.FALSE                                            break                                                                                                                        tmp_b = int(b)                                    tmp_b += 1                                                                    if LingoGlobal.op_eq_b(legaltoplace, LingoGlobal.FALSE):                                     break                                                                    tmp_a = int(a)                                tmp_a += 1                                                            if LingoGlobal.ToBool(legaltoplace):                                 rootpos = LingoGlobal.op_add(tl,LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.loch.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_div(testtile.sz.locv.float,LingoNumber(2.0000)),LingoNumber(0.4999)).integer,LingoNumber(1))))                                if LingoGlobal.ToBool(rootpos.inside(LingoGlobal.rect(self.gRenderCameraTilePos,LingoGlobal.op_add(self.gRenderCameraTilePos,LingoGlobal.point(LingoNumber(100),LingoNumber(60)))))):                                     frntimg = self.drawatiletile(rootpos.loch,rootpos.locv,layer,testtile,frntimg)                                                                    tmp_a=int(LingoNumber(0))                                while tmp_a < LingoGlobal.op_sub(testtile.sz.loch,LingoNumber(1)):                                     a = LingoNumber(tmp_a)                                    tmp_b=int(LingoNumber(0))                                    while tmp_b < LingoGlobal.op_sub(testtile.sz.locv,LingoNumber(1)):                                         b = LingoNumber(tmp_b)                                        spec = testtile.specs[LingoGlobal.op_add(LingoGlobal.op_add(b,LingoNumber(1)),LingoGlobal.op_mul(a,testtile.sz.locv))]                                        if spec > -LingoNumber(1):                                             dell[LingoGlobal.op_add(tl,LingoGlobal.point(a,b))] = LingoNumber(1)                                                                                    tmp_b = int(b)                                        tmp_b += 1                                                                            tmp_a = int(a)                                    tmp_a += 1                                                                    break                                                            tmp_q = int(q)                            tmp_q += 1                                                                                        self._global.the_randomSeed = savseed                            case "dune sand":                savseed = self._global.the_randomSeed                self._global.the_randomSeed = LingoGlobal.op_add(self.gLOprops.tileseed,layer)                dunesand = LingoList()                tmp_a=int(self.getfirsttilecat())                while tmp_a < self.gTiles.count:                     a = LingoNumber(tmp_a)                    tmp_b=int(LingoNumber(1))                    while tmp_b < self.gTiles[a].tls.count:                         b = LingoNumber(tmp_b)                        thetile = self.gTiles[a].tls[b]                        if ((LingoGlobal.op_eq_b(thetile.tp, "voxelStructSandType") and LingoGlobal.op_eq_b(thetile.sz.loch, LingoNumber(1))) and LingoGlobal.op_eq_b(thetile.sz.locv, LingoNumber(1))):                             dunesand.add(thetile)                        tmp_b = int(b)                        tmp_b += 1                                            tmp_a = int(a)                    tmp_a += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    if LingoGlobal.op_ne_b(self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer), LingoNumber(1)):                         tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                    else:                        frntimg = self.drawatiletile(tl.loch,tl.locv,layer,dunesand[self._global.random(dunesand.count)],frntimg)                        tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                    tmp_q = int(q)                    tmp_q += 1                                    self._global.the_randomSeed = savseed                            case "temple stone":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Temple Stone"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    self.templeStoneCorners = LingoList(LingoList(),LingoList(),LingoList(),LingoList())                tls2 = tls.duplicate()                cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(6)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 3:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 4:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(7)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 5:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(8)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 9:                            if LingoGlobal.ToBool(self.gDRMatFixes):                                 tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                                        tmp_q = int(q)                    tmp_q += 1                                    tmp_q=int(LingoNumber(1))                while tmp_q < tls2.count:                     q = LingoNumber(tmp_q)                    tl = tls2[q]                    if LingoGlobal.op_eq_b(LingoGlobal.op_mod(tl.locv,LingoNumber(4)), LingoNumber(0)):                         if LingoGlobal.op_eq_b(LingoGlobal.op_mod(tl.loch,LingoNumber(6)), LingoNumber(0)):                             self.attemptdrawtemplestone(tl,tls,LingoNumber(2),layer,frntimg,tilecat)                                            if LingoGlobal.op_eq_b(LingoGlobal.op_mod(tl.locv,LingoNumber(4)), LingoNumber(2)):                         if LingoGlobal.op_eq_b(LingoGlobal.op_mod(tl.loch,LingoNumber(6)), LingoNumber(3)):                             self.attemptdrawtemplestone(tl,tls,LingoNumber(2),layer,frntimg,tilecat)                                            tmp_q = int(q)                    tmp_q += 1                                    tmp_q=int(LingoNumber(1))                while tmp_q < self.templeStoneCorners[LingoNumber(1)].count:                     q = LingoNumber(tmp_q)                    ind = LingoGlobal.op_sub(LingoGlobal.op_add(self.templeStoneCorners[LingoNumber(1)].count,LingoNumber(1)),q)                    if self.templeStoneCorners[LingoNumber(3)].getpos(self.templeStoneCorners[LingoNumber(1)][ind]) > LingoNumber(0):                         tls.deleteone(self.templeStoneCorners[LingoNumber(1)][ind])                    tmp_q = int(q)                    tmp_q += 1                                    tmp_q=int(LingoNumber(1))                while tmp_q < self.templeStoneCorners[LingoNumber(2)].count:                     q = LingoNumber(tmp_q)                    ind = LingoGlobal.op_sub(LingoGlobal.op_add(self.templeStoneCorners[LingoNumber(2)].count,LingoNumber(1)),q)                    if self.templeStoneCorners[LingoNumber(4)].getpos(self.templeStoneCorners[LingoNumber(2)][ind]) > LingoNumber(0):                         tls.deleteone(self.templeStoneCorners[LingoNumber(2)][ind])                    tmp_q = int(q)                    tmp_q += 1                                    while LingoGlobal.ToBool(LingoGlobal.op_gt(tls.count,LingoNumber(0))):                     tl = tls[self._global.random(tls.count)]                    drawn = LingoGlobal.FALSE                    if self.templeStoneCorners[LingoNumber(1)].getpos(tl) > LingoNumber(0):                         frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(7)],frntimg)                        drawn = LingoGlobal.TRUE                                            elif self.templeStoneCorners[LingoNumber(2)].getpos(tl) > LingoNumber(0):                         frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(8)],frntimg)                        drawn = LingoGlobal.TRUE                                            elif self.templeStoneCorners[LingoNumber(3)].getpos(tl) > LingoNumber(0):                         frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                        drawn = LingoGlobal.TRUE                                            elif self.templeStoneCorners[LingoNumber(4)].getpos(tl) > LingoNumber(0):                         frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(6)],frntimg)                        drawn = LingoGlobal.TRUE                                            if LingoGlobal.op_eq_b(drawn, LingoGlobal.FALSE):                         occupy = LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),LingoNumber(1)),LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(1),LingoNumber(1)))                        drawn = LingoGlobal.TRUE                        tmp_q=int(LingoNumber(1))                        while tmp_q < occupy.count:                             q = LingoNumber(tmp_q)                            if LingoGlobal.op_eq_b(self.checkifatileissolidandsamematerial(LingoGlobal.op_add(tl,occupy[q]),layer,"Temple Stone"), LingoGlobal.FALSE):                                 drawn = LingoGlobal.FALSE                                break                                                            tmp_a=int(LingoNumber(1))                            while tmp_a < LingoNumber(4):                                 a = LingoNumber(tmp_a)                                if self.templeStoneCorners[a].getpos(LingoGlobal.op_add(tl,occupy[q])) > LingoNumber(0):                                     drawn = LingoGlobal.FALSE                                    break                                                                    tmp_a = int(a)                                tmp_a += 1                                                            if LingoGlobal.op_eq_b(drawn, LingoGlobal.FALSE):                                 break                                                            if LingoGlobal.op_eq_b(tls.getpos(LingoGlobal.op_add(tl,occupy[q])), LingoNumber(0)):                                 drawn = LingoGlobal.FALSE                                break                                                            tmp_q = int(q)                            tmp_q += 1                                                    if LingoGlobal.ToBool(drawn):                             frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(9)],frntimg)                            tmp_q=int(LingoNumber(1))                            while tmp_q < occupy.count:                                 q = LingoNumber(tmp_q)                                tls.deleteone(LingoGlobal.op_add(tl,occupy[q]))
                                tmp_q = int(q)                                tmp_q += 1                                                                                                        if LingoGlobal.op_eq_b(drawn, LingoGlobal.FALSE):                         if (((((LingoGlobal.ToBool(self.checkifatileissolidandsamematerial(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),layer,"Temple Stone")) and tls.getpos(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))) > LingoNumber(0)) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(1)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))), LingoNumber(0))) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(2)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))), LingoNumber(0))) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(3)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))), LingoNumber(0))) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(4)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))), LingoNumber(0))):                             frntimg = self.drawatiletile(LingoGlobal.op_sub(tl.loch,LingoNumber(1)),tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteone(LingoGlobal.op_add(tl,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))))                        elif (((((LingoGlobal.ToBool(self.checkifatileissolidandsamematerial(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),layer,"Temple Stone")) and tls.getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0)))) > LingoNumber(0)) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(1)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0)))), LingoNumber(0))) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(2)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0)))), LingoNumber(0))) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(3)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0)))), LingoNumber(0))) and LingoGlobal.op_eq_b(self.templeStoneCorners[LingoNumber(4)].getpos(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0)))), LingoNumber(0))):                             frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteone(LingoGlobal.op_add(tl,LingoGlobal.point(LingoNumber(1),LingoNumber(0))))                        else:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                                                                        tls.deleteone(tl)                self.templeStoneCorners = LingoList()                            case "4mosaic":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought 4Mosaic"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 3:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 4:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 5:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 6:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(6)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 1:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8 | 9:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                            tmp_q = int(q)                    tmp_q += 1                                                case "3dbricks":                tmp_tileCat=int(self.getfirsttilecat())                while tmp_tileCat < self.gTiles.count:                     tilecat = LingoNumber(tmp_tileCat)                    if LingoGlobal.op_eq_b(self.gTiles[tilecat].nm, "Drought Missing 3DBricks"):                         break                                            tmp_tileCat = int(tilecat)                    tmp_tileCat += 1                                    cnt = tls.count                tmp_q=int(LingoNumber(1))                while tmp_q < cnt:                     q = LingoNumber(tmp_q)                    tl = tls[LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q)]                    match self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) if self.afamvlvledit(LingoGlobal.point(tl.loch,tl.locv),layer) is not None else 9999999999:                         case 2:                            if LingoGlobal.ToBool(self.gDRMatFixes):                                 frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(2)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    case 3:                            if LingoGlobal.ToBool(self.gDRMatFixes):                                 frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(3)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    case 4:                            if LingoGlobal.ToBool(self.gDRMatFixes):                                 frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(5)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    case 5:                            if LingoGlobal.ToBool(self.gDRMatFixes):                                 frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(4)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    case 6:                            if LingoGlobal.ToBool(self.gDRMatFixes):                                 frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(6)],frntimg)                                tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                                    case 1:                            frntimg = self.drawatiletile(tl.loch,tl.locv,layer,self.gTiles[tilecat].tls[LingoNumber(1)],frntimg)                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                        case 0 | 7 | 8 | 9:                            tls.deleteat(LingoGlobal.op_sub(LingoGlobal.op_add(cnt,LingoNumber(1)),q))                                            tmp_q = int(q)                    tmp_q += 1                                                        return frntimg                    def attemptdrawtemplestone(self, tlpos, tileslist, templestonetype, layer, frntimg, tilecat):         occupy = None        q = None        occupy = LingoList()        match templestonetype if templestonetype is not None else 9999999999:             case 2:                occupy = LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)),LingoGlobal.point(LingoNumber(1),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoGlobal.point(LingoNumber(2),LingoNumber(0)))                            case 3:                occupy = LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)))                                    tmp_q=int(LingoNumber(1))        while tmp_q < occupy.count:             q = LingoNumber(tmp_q)            if LingoGlobal.op_eq_b(self.checkifatileissolidandsamematerial(LingoGlobal.op_add(tlpos,occupy[q]),layer,"Temple Stone"), LingoNumber(0)):                 return tileslist                            tmp_q = int(q)            tmp_q += 1                    frntimg = self.drawatiletile(tlpos.loch,tlpos.locv,layer,self.gTiles[tilecat].tls[templestonetype],frntimg)        if LingoGlobal.op_eq_b(templestonetype, LingoNumber(2)):             self.templeStoneCorners[LingoNumber(1)].add(LingoGlobal.op_add(tlpos,LingoGlobal.point(-LingoNumber(1),-LingoNumber(1))))
            self.templeStoneCorners[LingoNumber(2)].add(LingoGlobal.op_add(tlpos,LingoGlobal.point(LingoNumber(2),-LingoNumber(1))))
            self.templeStoneCorners[LingoNumber(3)].add(LingoGlobal.op_add(tlpos,LingoGlobal.point(LingoNumber(2),LingoNumber(1))))
            self.templeStoneCorners[LingoNumber(4)].add(LingoGlobal.op_add(tlpos,LingoGlobal.point(-LingoNumber(1),LingoNumber(1))))        tmp_q=int(LingoNumber(1))        while tmp_q < occupy.count:             q = LingoNumber(tmp_q)            tileslist.deleteone(LingoGlobal.op_add(tlpos,occupy[q]))
            tmp_q = int(q)            tmp_q += 1                    return tileslist                    def checkiftilehasmaterialrendertypetiles(self, tl, lr):         retrn = None        retrn = LingoNumber(0)        if (LingoGlobal.ToBool(self.checkifatileissolidandsamematerial(tl,lr,"Chaotic Stone")) or LingoGlobal.ToBool(self.checkifatileissolidandsamematerial(tl,lr,"Tiled Stone"))):             retrn = LingoNumber(1)                    return retrn                    def renderharvesterdetails(self, q, c, l, tl, frntimg, dt):         mdpnt = None        big = None        letter = None        eyepoint = None        armpoint = None        actualq = None        actualc = None        lowerpart = None        h = None        lowerpartpos = None        side = None        dr = None        eyepastepos = None        mem = None        qd = None        dpth = None        mdpnt = self.givemiddleoftile(LingoGlobal.point(q,c))        big = LingoGlobal.op_eq(dt[LingoNumber(2)],"Harvester B")        self._global.put(LingoGlobal.concat_space(dt[LingoNumber(2)],big))
        if LingoGlobal.ToBool(big):             letter = "B"            mdpnt.loch = LingoGlobal.op_add(mdpnt.loch,LingoNumber(10))            eyepoint = LingoGlobal.point(LingoNumber(75),-LingoNumber(126))            armpoint = LingoGlobal.point(LingoNumber(105),LingoNumber(108))                    else:            letter = "A"            eyepoint = LingoGlobal.point(LingoNumber(37),-LingoNumber(85))            armpoint = LingoGlobal.point(LingoNumber(58),LingoNumber(60))                    actualq = LingoGlobal.op_add(q,self.gRenderCameraTilePos.loch)        actualc = LingoGlobal.op_add(c,self.gRenderCameraTilePos.locv)        lowerpart = LingoGlobal.point(LingoNumber(0),LingoNumber(0))        tmp_h=int(actualc)        while tmp_h < self.gTEprops.tlmatrix[actualq].count:             h = LingoNumber(tmp_h)            if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[actualq][h][l].tp, "tileHead"):                 if LingoGlobal.op_eq_b(self.gTEprops.tlmatrix[actualq][h][l].data[LingoNumber(2)], LingoGlobal.concat("Harvester Arm ",letter)):                     lowerpart = LingoGlobal.point(q,LingoGlobal.op_sub(h,self.gRenderCameraTilePos.locv))                                                tmp_h = int(h)            tmp_h += 1                    if LingoGlobal.op_ne_b(lowerpart, LingoGlobal.point(LingoNumber(0),LingoNumber(0))):             lowerpartpos = self.givemiddleoftile(lowerpart)            if LingoGlobal.ToBool(big):                 lowerpartpos.loch = LingoGlobal.op_add(lowerpartpos.loch,LingoNumber(10))                                    tmp_side=int(LingoNumber(1))        while tmp_side < LingoNumber(2):             side = LingoNumber(tmp_side)            dr = LingoList(-LingoNumber(1),LingoNumber(1))[side]            eyepastepos = LingoGlobal.op_add(mdpnt,LingoGlobal.point(LingoGlobal.op_mul(eyepoint.loch,dr),eyepoint.locv))            mem = self._global.member(LingoGlobal.concat("Harvester",letter,"Eye"))            qd = self.rotatetoquad(LingoGlobal.op_add(LingoGlobal.rect(eyepastepos,eyepastepos),LingoGlobal.rect(LingoGlobal.op_div(-mem.width,LingoNumber(2)),LingoGlobal.op_div(-mem.height,LingoNumber(2)),LingoGlobal.op_div(mem.width,LingoNumber(2)),LingoGlobal.op_div(mem.height,LingoNumber(2)))),self._global.random(LingoNumber(360)))            tmp_dpth=int(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(l,LingoNumber(1)),LingoNumber(10)),LingoNumber(3)))            while tmp_dpth < LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(l,LingoNumber(1)),LingoNumber(10)),LingoNumber(6)):                 dpth = LingoNumber(tmp_dpth)                self._global.member(LingoGlobal.concat("layer",dpth)).image.copypixels(mem.image,qd,mem.image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
                tmp_dpth = int(dpth)                tmp_dpth += 1                            tmp_side = int(side)            tmp_side += 1                            return None            def renderbeveledimage(self, img, dp, qd, bevel):         boundrect = None        mrgn = None        pnt = None        qdoffset = None        dumpimg = None        inverseimg = None        b = None        a = None        boundrect = LingoGlobal.rect(LingoNumber(10000),LingoNumber(10000),-LingoNumber(10000),-LingoNumber(10000))        mrgn = LingoNumber(10)        for tmp_pnt in qd:             pnt = LingoNumber(tmp_pnt)            if LingoGlobal.op_sub(pnt.loch,mrgn) < boundrect.left:                 boundrect.left = LingoGlobal.op_sub(pnt.loch,mrgn)                            if LingoGlobal.op_add(pnt.loch,mrgn) > boundrect.right:                 boundrect.right = LingoGlobal.op_add(pnt.loch,mrgn)                            if LingoGlobal.op_sub(pnt.locv,mrgn) < boundrect.top:                 boundrect.top = LingoGlobal.op_sub(pnt.locv,mrgn)                            if LingoGlobal.op_add(pnt.locv,mrgn) > boundrect.bottom:                 boundrect.bottom = LingoGlobal.op_add(pnt.locv,mrgn)                                    qdoffset = LingoList(LingoGlobal.point(boundrect.left,boundrect.top),LingoGlobal.point(boundrect.left,boundrect.top),LingoGlobal.point(boundrect.left,boundrect.top),LingoGlobal.point(boundrect.left,boundrect.top))        dumpimg = self._global.image(boundrect.width,boundrect.height,LingoNumber(1))        dumpimg.copypixels(img,LingoGlobal.op_sub(qd,qdoffset),img.rect)
        inverseimg = self.makesilhouttefromimg(dumpimg,LingoNumber(1))        dumpimg = self._global.image(boundrect.width,boundrect.width,LingoNumber(32))        dumpimg.copypixels(LingoImage.Pxl,dumpimg.rect,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0))))
        tmp_b=int(LingoNumber(1))        while tmp_b < bevel:             b = LingoNumber(tmp_b)            for tmp_a in LingoList(LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),-LingoNumber(1))),LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(1),LingoNumber(1))),LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))),LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)))):                 a = LingoNumber(tmp_a)                dumpimg.copypixels(inverseimg,LingoGlobal.op_add(dumpimg.rect,LingoGlobal.rect(LingoGlobal.op_mul(a[LingoNumber(2)],b),LingoGlobal.op_mul(a[LingoNumber(2)],b))),inverseimg.rect,LingoPropertyList(LingoSymbol("color"), a[LingoNumber(1)],LingoSymbol("ink"), LingoNumber(36)))            tmp_b = int(b)            tmp_b += 1                    dumpimg.copypixels(inverseimg,dumpimg.rect,inverseimg.rect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255)),LingoSymbol("ink"), LingoNumber(36)))
        self._global.member(LingoGlobal.concat("layer",self._global.str(dp))).image.copypixels(dumpimg,boundrect,dumpimg.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))        return None            