from Drizzle.Runtime import *## Behavior script: tileEditor#class tileEditor(LingoBehaviorScript):     def __init__(self):         super().__init__()            def exitframe(self):         mstile = None        q = None        l = None        rct = None        actn = None        actn2 = None        mdpnt = None        tile = None        ttgs = None        if LingoGlobal.ToBool(self._movieScript.showControls):             self._global.sprite(LingoNumber(23)).blend = LingoNumber(100)                    else:            self._global.sprite(LingoNumber(23)).blend = LingoNumber(0)                    mstile = LingoGlobal.op_add(LingoGlobal.op_div(self._global._mouse.mouseloc,LingoGlobal.point(LingoNumber(16.0000),LingoNumber(16.0000))),LingoGlobal.point(LingoNumber(0.4999),LingoNumber(0.4999)))        mstile = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.point(mstile.loch.integer,mstile.locv.integer),LingoGlobal.point(-LingoNumber(1),-LingoNumber(1))),self._movieScript.gLEProps.campos)        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(4):             q = LingoNumber(tmp_q)            if ((LingoGlobal.ToBool(self._global._key.keypressed(LingoList(LingoNumber(86),LingoNumber(91),LingoNumber(88),LingoNumber(84))[q])) and LingoGlobal.op_eq_b(self._movieScript.gDirectionKeys[q], LingoNumber(0))) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                 self._movieScript.gLEProps.campos = LingoGlobal.op_add(self._movieScript.gLEProps.campos,LingoGlobal.op_mul(LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)))[q],LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoNumber(9),self._global._key.keypressed(LingoNumber(83)))),LingoGlobal.op_mul(LingoNumber(34),self._global._key.keypressed(LingoNumber(85))))))                if not LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(92))):                     if self._movieScript.gLEProps.campos.loch < -LingoNumber(1):                         self._movieScript.gLEProps.campos.loch = -LingoNumber(1)                                            if self._movieScript.gLEProps.campos.locv < -LingoNumber(1):                         self._movieScript.gLEProps.campos.locv = -LingoNumber(1)                                            if self._movieScript.gLEProps.campos.loch > LingoGlobal.op_sub(self._movieScript.gLEProps.matrix.count,LingoNumber(51)):                         self._movieScript.gLEProps.campos.loch = LingoGlobal.op_sub(self._movieScript.gLEProps.matrix.count,LingoNumber(51))                                            if self._movieScript.gLEProps.campos.locv > LingoGlobal.op_sub(self._movieScript.gLEProps.matrix[LingoNumber(1)].count,LingoNumber(39)):                         self._movieScript.gLEProps.campos.locv = LingoGlobal.op_sub(self._movieScript.gLEProps.matrix[LingoNumber(1)].count,LingoNumber(39))                                                            tmp_l=int(LingoNumber(1))                while tmp_l < LingoNumber(3):                     l = LingoNumber(tmp_l)                    self._movieScript.lvleditdraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),l)
                    self._movieScript.tedraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),l)
                    tmp_l = int(l)                    tmp_l += 1                                    self._movieScript.drawshortcutsimg(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),LingoNumber(16),LingoNumber(1))            self._movieScript.gDirectionKeys[q] = self._global._key.keypressed(LingoList(LingoNumber(86),LingoNumber(91),LingoNumber(88),LingoNumber(84))[q])            tmp_q = int(q)            tmp_q += 1                    rct = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.rect(LingoNumber(0),LingoNumber(0),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),LingoGlobal.rect(self._movieScript.gLOprops.extratiles[LingoNumber(1)],self._movieScript.gLOprops.extratiles[LingoNumber(2)],-self._movieScript.gLOprops.extratiles[LingoNumber(3)],-self._movieScript.gLOprops.extratiles[LingoNumber(4)])),LingoGlobal.rect(self._movieScript.gLEProps.campos,self._movieScript.gLEProps.campos))        self._global.sprite(LingoNumber(71)).rect = LingoGlobal.op_mul(LingoGlobal.op_add(rct.intersect(LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(52),LingoNumber(40))),LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(LingoNumber(16),LingoNumber(16),LingoNumber(16),LingoNumber(16)))        if LingoGlobal.ToBool(self.checkkey("Q")):             self.pickuptile(mstile)        if LingoGlobal.ToBool(self.checkkey("L")):             self._movieScript.gTEprops.worklayer = LingoGlobal.op_add(self._movieScript.gTEprops.worklayer,LingoNumber(1))            if self._movieScript.gTEprops.worklayer > LingoNumber(3):                 self._movieScript.gTEprops.worklayer = LingoNumber(1)                            self.writematerial(mstile)
            self.changelayer()        actn = LingoNumber(0)        actn2 = LingoNumber(0)        self._movieScript.gTEprops.keys.m1 = LingoGlobal.op_and(self._global._mouse.mousedown,LingoGlobal.op_ne(self._global._movie.window.sizestate,LingoSymbol("minimized")))        if (LingoGlobal.ToBool(self._movieScript.gTEprops.keys.m1) and LingoGlobal.op_eq_b(self._movieScript.gTEprops.lastkeys.m1, LingoNumber(0))):             actn = LingoNumber(1)                    self._movieScript.gTEprops.lastkeys.m1 = self._movieScript.gTEprops.keys.m1        self._movieScript.gTEprops.keys.m2 = LingoGlobal.op_and(self._global._mouse.rightmousedown,LingoGlobal.op_ne(self._global._movie.window.sizestate,LingoSymbol("minimized")))        if (LingoGlobal.ToBool(self._movieScript.gTEprops.keys.m2) and LingoGlobal.op_eq_b(self._movieScript.gTEprops.lastkeys.m2, LingoNumber(0))):             actn2 = LingoNumber(1)                    self._movieScript.gTEprops.lastkeys.m2 = self._movieScript.gTEprops.keys.m2        if LingoGlobal.op_ne_b(mstile, self._movieScript.gTEprops.lstmsps):             self.writematerial(mstile)
            actn = self._movieScript.gTEprops.keys.m1            actn2 = self._movieScript.gTEprops.keys.m2            self.istilepositionlegal(mstile)        self._movieScript.gTEprops.lstmsps = mstile        if LingoGlobal.op_ne_b(self._movieScript.gTEprops.specialedit, LingoNumber(0)):             self._global.sprite(LingoNumber(19)).visibility = LingoNumber(1)            self._global.member("default material").text = LingoGlobal.concat_space("SPECIAL EDIT:",self._global.str(self._movieScript.gTEprops.specialedit))            if LingoGlobal.ToBool(actn):                 self.specialaction(mstile)            if LingoGlobal.ToBool(actn2):                 self._movieScript.gTEprops.specialedit = LingoNumber(0)                            self._global.sprite(LingoNumber(19)).visibility = LingoGlobal.op_ne(self._movieScript.gTEprops.specialedit,LingoNumber(0))                    else:            if LingoGlobal.ToBool(actn):                 self.action(mstile)            if LingoGlobal.ToBool(actn2):                 self.deletetile(mstile)                    if LingoGlobal.ToBool(self.checkkey("W")):             self.updatetilemenu(LingoGlobal.point(LingoNumber(0),-LingoNumber(1)))        if LingoGlobal.ToBool(self.checkkey("S")):             self.updatetilemenu(LingoGlobal.point(LingoNumber(0),LingoNumber(1)))        if LingoGlobal.ToBool(self.checkkey("A")):             self.updatetilemenu(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))        if LingoGlobal.ToBool(self.checkkey("D")):             self.updatetilemenu(LingoGlobal.point(LingoNumber(1),LingoNumber(0)))        if LingoGlobal.op_eq_b(self._movieScript.gTEprops.tooltype, "material"):             if (LingoGlobal.ToBool(self._global._key.keypressed("F")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                 self._global.sprite(LingoNumber(88)).rect = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(mstile,LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1))),LingoNumber(16))),LingoGlobal.rect(-LingoNumber(16),-LingoNumber(16),LingoNumber(16),LingoNumber(16))),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16)),LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16))))                            elif (LingoGlobal.ToBool(self._global._key.keypressed("V")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                 self._global.sprite(LingoNumber(88)).rect = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(mstile,LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1))),LingoNumber(16))),LingoGlobal.rect(-LingoNumber(32),-LingoNumber(32),LingoNumber(32),LingoNumber(32))),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16)),LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16))))                            else:                self._global.sprite(LingoNumber(88)).rect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(mstile,LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1))),LingoNumber(16))),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16)),LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16))))                            self._global.sprite(LingoNumber(13)).loc = LingoGlobal.point(-LingoNumber(2000),-LingoNumber(2000))                    elif LingoGlobal.op_eq_b(self._movieScript.gTEprops.tooltype, "special"):             self._global.sprite(LingoNumber(88)).color = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].color            match self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].placemethod.lower():                 case "rect":                    if LingoGlobal.op_eq_b(self._movieScript.specialRectPoint, LingoGlobal.VOID):                         self._global.sprite(LingoNumber(88)).rect = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(mstile,LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1))),LingoNumber(16))),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16)),LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16))))                        if (LingoGlobal.ToBool(actn) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                             self._movieScript.specialRectPoint = mstile                                                                        else:                        rct = LingoGlobal.rect(self._movieScript.specialRectPoint,LingoGlobal.op_add(self._movieScript.specialRectPoint,LingoGlobal.point(LingoNumber(1),LingoNumber(1)))).union(LingoGlobal.rect(mstile,LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1)))))                        self._global.sprite(LingoNumber(88)).rect = LingoGlobal.op_sub(LingoGlobal.op_mul(rct,LingoNumber(16)),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16)),LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16))))                        if (LingoGlobal.ToBool(actn2) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                             self._movieScript.specialRectPoint = LingoGlobal.VOID                                                    elif (LingoGlobal.ToBool(actn) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                             self._movieScript.specialRectPoint = LingoGlobal.VOID                            self.specialrectplacement(LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),-LingoNumber(1),-LingoNumber(1))))                                                                        self._global.sprite(LingoNumber(13)).loc = LingoGlobal.point(-LingoNumber(2000),-LingoNumber(2000))                    else:            self._global.sprite(LingoNumber(88)).rect = LingoGlobal.rect(-LingoNumber(5),-LingoNumber(5),-LingoNumber(5),-LingoNumber(5))            mdpnt = LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_mul(self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].sz.loch,LingoNumber(0.5000)),LingoNumber(0.4999)).integer,LingoGlobal.op_add(LingoGlobal.op_mul(self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].sz.locv,LingoNumber(0.5000)),LingoNumber(0.4999)).integer)            self._global.sprite(LingoNumber(13)).loc = LingoGlobal.op_mul(LingoGlobal.op_sub(LingoGlobal.op_sub(LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1))),mdpnt),self._movieScript.gLEProps.campos),LingoNumber(16))                    if (LingoGlobal.ToBool(self._global._key.keypressed("E")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):             self.updatetilemenu(LingoGlobal.point(LingoNumber(0),LingoNumber(0)))        if (((LingoGlobal.ToBool(self._global._key.keypressed("C")) and LingoGlobal.ToBool(self._global._key.keypressed("X"))) and LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(48)))) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):             self.deletealltiles()        if LingoGlobal.op_eq_b(self._movieScript.gEnvEditorProps.waterlevel, -LingoNumber(1)):             self._global.sprite(LingoNumber(9)).rect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(0),LingoNumber(0))                    else:            rct = LingoGlobal.op_sub(LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_sub(LingoGlobal.op_sub(self._movieScript.gLOprops.size.locv,self._movieScript.gEnvEditorProps.waterlevel),self._movieScript.gLOprops.extratiles[LingoNumber(4)]),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),LingoGlobal.rect(self._movieScript.gLEProps.campos,self._movieScript.gLEProps.campos))            self._global.sprite(LingoNumber(9)).rect = LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_add(rct.intersect(LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(52),LingoNumber(40))),LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(LingoNumber(16),LingoNumber(16),LingoNumber(16),LingoNumber(16))),LingoGlobal.rect(LingoNumber(0),-LingoNumber(8),LingoNumber(0),LingoNumber(0)))                    self._global.script("levelOverview").gotoeditor()
        tile = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv]        ttgs = tile[LingoSymbol("tags")]        if (LingoGlobal.op_ne_b(ttgs, LingoGlobal.VOID) and (((((ttgs.getpos("Station Larger Sign") > LingoNumber(0) or ttgs.getpos("Station Larger Sign B") > LingoNumber(0)) or ttgs.getpos("Small Asian Sign Station") > LingoNumber(0)) or ttgs.getpos("Small Asian Sign On Wall Station") > LingoNumber(0)) or ttgs.getpos("Small Asian Sign Station B") > LingoNumber(0)) or ttgs.getpos("Small Asian Sign On Wall Station B") > LingoNumber(0))):             self._global.member("Drought Reserve text").text = LingoGlobal.concat("THIS TILE IS RESERVED FOR THE CUSTOM REGION ",LingoGlobal.QUOTE,"FORSAKEN STATION",LingoGlobal.QUOTE,", SEE WITH THE CREATOR OF THE REGION TO US IT.")                    else:            self._global.member("Drought Reserve text").text = ""                    self._global.go(self._global.the_frame)        return None            def deletealltiles(self):         q = None        l = None        c = None        self._movieScript.gTEprops.tlmatrix = LingoList()        tmp_q=int(LingoNumber(1))        while tmp_q < self._movieScript.gLOprops.size.loch:             q = LingoNumber(tmp_q)            l = LingoList()            tmp_c=int(LingoNumber(1))            while tmp_c < self._movieScript.gLOprops.size.locv:                 c = LingoNumber(tmp_c)                l.add(LingoList(LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0)),LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0)),LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0))))
                tmp_c = int(c)                tmp_c += 1                            self._movieScript.gTEprops.tlmatrix.add(l)
            tmp_q = int(q)            tmp_q += 1                    tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(3):             q = LingoNumber(tmp_q)            self._movieScript.tedraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),q)
            tmp_q = int(q)            tmp_q += 1                            return None            def checkkey(self, key):         rtrn = None        rtrn = LingoNumber(0)        self._movieScript.gTEprops.keys[LingoGlobal.symbol(key)] = LingoGlobal.op_and(self._global._key.keypressed(key),LingoGlobal.op_ne(self._global._movie.window.sizestate,LingoSymbol("minimized")))        if (LingoGlobal.ToBool(self._movieScript.gTEprops.keys[LingoGlobal.symbol(key)]) and LingoGlobal.op_eq_b(self._movieScript.gTEprops.lastkeys[LingoGlobal.symbol(key)], LingoNumber(0))):             rtrn = LingoNumber(1)                    self._movieScript.gTEprops.lastkeys[LingoGlobal.symbol(key)] = self._movieScript.gTEprops.keys[LingoGlobal.symbol(key)]        return rtrn                    def writematerial(self, mstile):         txt = None        dt = None        self._global.sprite(LingoNumber(8)).visibility = LingoNumber(0)        if LingoGlobal.ToBool(mstile.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))))):             txt = ""            if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657)))):                 match self._movieScript.gLEProps.matrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer][LingoNumber(1)] if self._movieScript.gLEProps.matrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer][LingoNumber(1)] is not None else 9999999999:                     case 1:                        txt = "Wall"                                            case 2:                        txt = "Eastward Slope"                                            case 3:                        txt = "Westward Slope"                                            case 4:                        txt = "Ceiling Slope"                                            case 5:                        txt = "Ceiling Slope"                                            case 6:                        txt = "Floor"                                            case 7:                        txt = "Short Cut Entrance"                        self._global.sprite(LingoNumber(8)).visibility = LingoNumber(1)                                                                        else:                txt = ""                            if LingoGlobal.op_ne_b(txt, ""):                 match self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].tp.lower():                     case "material":                        txt += str(LingoGlobal.concat_space(" - Material:",self._global.str(self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data)))                                            case "tilehead":                        txt += str(LingoGlobal.concat_space(" - Tile:",self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data[LingoNumber(2)]))                        if self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data.count > LingoNumber(2):                             txt += str(LingoGlobal.concat_space(" :: Additional Data:",self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data[LingoNumber(3)]))                                                                        case "tilebody":                        dt = self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data                        if (((dt[LingoNumber(1)].loch > LingoNumber(0) and dt[LingoNumber(1)].locv > LingoNumber(0)) and dt[LingoNumber(1)].loch < LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1))) and dt[LingoNumber(1)].locv < LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))):                             if LingoGlobal.op_eq_b(self._movieScript.gTEprops.tlmatrix[dt[LingoNumber(1)].loch][dt[LingoNumber(1)].locv][dt[LingoNumber(2)]].tp, "tileHead"):                                 txt += str(LingoGlobal.concat_space(" - Tile:",self._movieScript.gTEprops.tlmatrix[dt[LingoNumber(1)].loch][dt[LingoNumber(1)].locv][dt[LingoNumber(2)]].data[LingoNumber(2)]))                                                            else:                                txt += str(" - Stray Tile Fragment")                                                                                    else:                            txt += str(" - Stray Tile Fragment")                                                                                                    self._global.member("editor1tool").text = txt                    else:            self._global.member("editor1tool").text = ""                            return None            def updatetilemenu(self, mv):         txt = None        tl = None        if (LingoGlobal.op_eq_b(mv, LingoGlobal.VOID) or LingoGlobal.op_eq_b(mv, self._global.script("tileEditor"))):             mv = LingoGlobal.point(LingoNumber(0),LingoNumber(0))                    self._movieScript.gTEprops.tmpos = LingoGlobal.op_add(self._movieScript.gTEprops.tmpos,mv)        if LingoGlobal.op_ne_b(mv.loch, LingoNumber(0)):             if self._movieScript.gTEprops.tmpos.loch < LingoNumber(1):                 self._movieScript.gTEprops.tmpos.loch = self._movieScript.gTiles.count                            elif self._movieScript.gTEprops.tmpos.loch > self._movieScript.gTiles.count:                 self._movieScript.gTEprops.tmpos.loch = LingoNumber(1)                            self._movieScript.gTEprops.tmpos.locv = self._movieScript.gTEprops.tmsavposl[self._movieScript.gTEprops.tmpos.loch]                    elif LingoGlobal.op_ne_b(mv.locv, LingoNumber(0)):             if self._movieScript.gTEprops.tmpos.locv < LingoNumber(1):                 self._movieScript.gTEprops.tmpos.locv = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls.count                            elif self._movieScript.gTEprops.tmpos.locv > self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls.count:                 self._movieScript.gTEprops.tmpos.locv = LingoNumber(1)                            self._movieScript.gTEprops.tmsavposl[self._movieScript.gTEprops.tmpos.loch] = self._movieScript.gTEprops.tmpos.locv                    self._movieScript.gTEprops.tmpos.loch = self._movieScript.restrict(self._movieScript.gTEprops.tmpos.loch,LingoNumber(1),self._movieScript.gTiles.count)        self._movieScript.gTEprops.tmpos.locv = self._movieScript.restrict(self._movieScript.gTEprops.tmpos.locv,LingoNumber(1),self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls.count)        txt = ""        txt += str(LingoGlobal.concat_space("[",self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].nm,"]"))        txt += str(LingoGlobal.RETURN)        tmp_tl=int(LingoNumber(1))        while tmp_tl < self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls.count:             tl = LingoNumber(tmp_tl)            if LingoGlobal.op_eq_b(tl, self._movieScript.gTEprops.tmpos.locv):                 txt += str(LingoGlobal.concat_space("-",self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[tl].nm,"-",LingoGlobal.RETURN))                            else:                txt += str(LingoGlobal.concat_space(self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[tl].nm,LingoGlobal.RETURN))                            tmp_tl = int(tl)            tmp_tl += 1                    self._global.member("tileMenu").text = txt        if self._movieScript.gTEprops.tmpos.loch <= self._movieScript.getlastmatcat():             self._global.sprite(LingoNumber(19)).visibility = LingoNumber(1)            self._movieScript.gTEprops.tooltype = "material"            self._movieScript.gTEprops.tooldata = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].nm            self._global.member("tilePreview").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            if (LingoGlobal.ToBool(self._global._key.keypressed("E")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                 if LingoGlobal.op_ne_b(self._movieScript.gTEprops.defaultmaterial, self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].nm):                     self._movieScript.gTEprops.defaultmaterial = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].nm                    self._global.member("default material").text = LingoGlobal.concat_space("Default material:",self._movieScript.gTEprops.defaultmaterial,"(Press 'E' to change)")                                                        elif LingoGlobal.op_eq_b(self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].nm, "special"):             self._movieScript.gTEprops.tooltype = "special"            self._movieScript.gTEprops.tooldata = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].nm            self._global.member("tilePreview").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))                    else:            if LingoGlobal.op_eq_b(self._movieScript.gTEprops.specialedit, LingoNumber(0)):                 self._global.sprite(LingoNumber(19)).visibility = LingoNumber(0)                            self._movieScript.gTEprops.tooltype = "tile"            self._movieScript.gTEprops.tooldata = "TILE"            self.drawtilepreview()        self.istilepositionlegal(self._movieScript.gTEprops.lstmsps)        return None            def action(self, mstile):         l = None        q = None        if (LingoGlobal.ToBool(mstile.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):             match self._movieScript.gTEprops.tooltype.lower():                 case "material":                    l = LingoList(mstile)                    if (LingoGlobal.ToBool(self._global._key.keypressed("F")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                         l = LingoList(mstile,LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),-LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),-LingoNumber(1))))                                            elif (LingoGlobal.ToBool(self._global._key.keypressed("V")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                         l = LingoList(mstile,LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(0))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),LingoNumber(0))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(0),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(0),-LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),-LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),-LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(0),-LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),-LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(2),-LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),-LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(2),-LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(0),LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(1),LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(2),LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(1),LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(2),LingoNumber(2))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(2),LingoNumber(0))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(2),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(-LingoNumber(2),-LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(2),LingoNumber(0))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(2),LingoNumber(1))),LingoGlobal.op_add(mstile,LingoGlobal.point(LingoNumber(2),-LingoNumber(1))))                                            for tmp_q in l:                         q = LingoNumber(tmp_q)                        if LingoGlobal.ToBool(q.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))))):                             if LingoGlobal.op_eq_b(LingoList("tileHead","tileBody").getpos(self._movieScript.gTEprops.tlmatrix[q.loch][q.locv][self._movieScript.gTEprops.worklayer].tp), LingoNumber(0)):                                 self._movieScript.gTEprops.tlmatrix[q.loch][q.locv][self._movieScript.gTEprops.worklayer].tp = "material"                                self._movieScript.gTEprops.tlmatrix[q.loch][q.locv][self._movieScript.gTEprops.worklayer].data = self._movieScript.gTEprops.tooldata                                                            self._movieScript.tedraw(LingoGlobal.rect(q,q),self._movieScript.gTEprops.worklayer)                                                            case "tile":                    if ((((LingoGlobal.ToBool(self.istilepositionlegal(mstile)) or LingoGlobal.ToBool(self._global._key.keypressed("F"))) or LingoGlobal.ToBool(self._global._key.keypressed("V"))) or LingoGlobal.ToBool(self._global._key.keypressed("G"))) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                         self.placetile(mstile,self._movieScript.gTEprops.tmpos)                                                                return None            def deletetile(self, mstile):         f = None        f1 = None        f2 = None        f3 = None        dt = None        if (LingoGlobal.ToBool(mstile.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):             match self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].tp.lower():                 case "material":                    f = LingoNumber(0)                    f1 = LingoNumber(0)                    if (LingoGlobal.ToBool(self._global._key.keypressed("F")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                         f = -LingoNumber(1)                        f1 = LingoNumber(1)                                            elif (LingoGlobal.ToBool(self._global._key.keypressed("V")) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):                         f = -LingoNumber(2)                        f1 = LingoNumber(2)                                            tmp_F2=int(f)                    while tmp_F2 < f1:                         f2 = LingoNumber(tmp_F2)                        tmp_F3=int(f)                        while tmp_F3 < f1:                             f3 = LingoNumber(tmp_F3)                            if (((LingoGlobal.op_add(mstile.loch,f2) > LingoNumber(0) and LingoGlobal.op_add(mstile.locv,f3) > LingoNumber(0)) and LingoGlobal.op_add(mstile.loch,f2) < LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1))) and LingoGlobal.op_add(mstile.locv,f3) < LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))):                                 self._movieScript.gTEprops.tlmatrix[LingoGlobal.op_add(mstile.loch,f2)][LingoGlobal.op_add(mstile.locv,f3)][self._movieScript.gTEprops.worklayer].tp = "default"                                self._movieScript.gTEprops.tlmatrix[LingoGlobal.op_add(mstile.loch,f2)][LingoGlobal.op_add(mstile.locv,f3)][self._movieScript.gTEprops.worklayer].data = LingoNumber(0)                                                            tmp_F3 = int(f3)                            tmp_F3 += 1                                                    tmp_F2 = int(f2)                        tmp_F2 += 1                                            self._movieScript.tedraw(LingoGlobal.rect(LingoGlobal.op_add(mstile,f),LingoGlobal.op_add(mstile,f1)),self._movieScript.gTEprops.worklayer)                case "tilehead":                    self.deletetiletile(mstile,self._movieScript.gTEprops.worklayer)                case "tilebody":                    dt = self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data                    if (((dt[LingoNumber(1)].loch > LingoNumber(0) and dt[LingoNumber(1)].locv > LingoNumber(0)) and dt[LingoNumber(1)].loch < LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1))) and dt[LingoNumber(1)].locv < LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))):                         if LingoGlobal.op_eq_b(self._movieScript.gTEprops.tlmatrix[dt[LingoNumber(1)].loch][dt[LingoNumber(1)].locv][dt[LingoNumber(2)]].tp, "tileHead"):                             self.deletetiletile(dt[LingoNumber(1)],dt[LingoNumber(2)])                        else:                            self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].tp = "default"                            self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data = LingoNumber(0)                            self._movieScript.tedraw(LingoGlobal.rect(mstile,mstile),self._movieScript.gTEprops.worklayer)                                            else:                        self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].tp = "default"                        self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data = LingoNumber(0)                        self._movieScript.tedraw(LingoGlobal.rect(mstile,mstile),self._movieScript.gTEprops.worklayer)                                                                return None            def drawtilepreview(self):         tl = None        mdpnt = None        offst = None        n = None        q = None        c = None        cl = None        drps = None        self._global.member("tilePreview").image = self._global.image(LingoGlobal.op_mul(LingoNumber(85),LingoNumber(5)),LingoGlobal.op_mul(LingoNumber(85),LingoNumber(5)),LingoNumber(16))        tl = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv]        mdpnt = LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(0.5000)),LingoNumber(0.4999)).integer,LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(0.5000)),LingoNumber(0.4999)).integer)        offst = LingoGlobal.op_sub(LingoGlobal.point(LingoGlobal.op_mul(LingoNumber(3),LingoNumber(5)),LingoGlobal.op_mul(LingoNumber(3),LingoNumber(5))),mdpnt)        if LingoGlobal.op_ne_b(tl.specs2, LingoGlobal.VOID):             n = LingoNumber(1)            tmp_q=int(LingoNumber(1))            while tmp_q < tl.sz.loch:                 q = LingoNumber(tmp_q)                tmp_c=int(LingoNumber(1))                while tmp_c < tl.sz.locv:                     c = LingoNumber(tmp_c)                    if LingoGlobal.op_ne_b(tl.specs2[n], -LingoNumber(1)):                         self._global.member("tilePreview").image.copypixels(self._global.member(LingoGlobal.concat("prvw",self._global.str(tl.specs2[n]))).image,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_sub(q,LingoNumber(1)),offst.loch),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_sub(c,LingoNumber(1)),offst.locv),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(q,offst.loch),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(c,offst.locv),LingoNumber(16))),LingoGlobal.rect(LingoNumber(5),LingoNumber(0),LingoNumber(5),LingoNumber(0))),self._global.member(LingoGlobal.concat("prvw",self._global.str(tl.specs2[n]))).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(50),LingoNumber(50),LingoNumber(50))))                    n = LingoGlobal.op_add(n,LingoNumber(1))                    tmp_c = int(c)                    tmp_c += 1                                    tmp_q = int(q)                tmp_q += 1                                    n = LingoNumber(1)        tmp_q=int(LingoNumber(1))        while tmp_q < tl.sz.loch:             q = LingoNumber(tmp_q)            tmp_c=int(LingoNumber(1))            while tmp_c < tl.sz.locv:                 c = LingoNumber(tmp_c)                if LingoGlobal.op_ne_b(tl.specs[n], -LingoNumber(1)):                     cl = self._global.color(LingoNumber(150),LingoNumber(150),LingoNumber(150))                    self._global.member("tilePreview").image.copypixels(self._global.member(LingoGlobal.concat("prvw",self._global.str(tl.specs[n]))).image,LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_sub(q,LingoNumber(1)),offst.loch),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(LingoGlobal.op_sub(c,LingoNumber(1)),offst.locv),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(q,offst.loch),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_add(c,offst.locv),LingoNumber(16))),LingoGlobal.rect(LingoNumber(0),LingoNumber(5),LingoNumber(0),LingoNumber(5))),self._global.member(LingoGlobal.concat("prvw",self._global.str(tl.specs[n]))).image.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), cl))                n = LingoGlobal.op_add(n,LingoNumber(1))                tmp_c = int(c)                tmp_c += 1                            tmp_q = int(q)            tmp_q += 1                    self._global.member("tileMouse").image = self._global.image(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(16)),LingoGlobal.op_mul(tl.sz.locv,LingoNumber(16)),LingoNumber(16))        if (tl.ptpos > LingoNumber(60000) and LingoGlobal.ToBool(self._movieScript.getboolconfig("More tile previews"))):             drps = LingoGlobal.op_sub(tl.ptpos,LingoNumber(60000))            self._global.member("tileMouse").image.copypixels(self._global.member("previewTilesDR").image,self._global.member("tileMouse").image.rect,LingoGlobal.rect(drps,LingoNumber(0),LingoGlobal.op_add(drps,LingoGlobal.op_mul(tl.sz.loch,LingoNumber(16))),LingoGlobal.op_mul(tl.sz.locv,LingoNumber(16))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(150),LingoNumber(150),LingoNumber(150))))        else:            self._global.member("tileMouse").image.copypixels(self._global.member("previewTiles").image,self._global.member("tileMouse").image.rect,LingoGlobal.rect(tl.ptpos,LingoNumber(0),LingoGlobal.op_add(tl.ptpos,LingoGlobal.op_mul(tl.sz.loch,LingoNumber(16))),LingoGlobal.op_mul(tl.sz.locv,LingoNumber(16))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(150),LingoNumber(150),LingoNumber(150))))        self._global.member("tileMouse").regpoint = LingoGlobal.point(LingoNumber(0),LingoNumber(0))                return None            def istilepositionlegal(self, mstile):         rtrn = None        tl = None        mdpnt = None        strt = None        n = None        q = None        c = None        rtrn = LingoNumber(1)        if (LingoGlobal.op_eq_b(mstile.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))), LingoGlobal.FALSE) or LingoGlobal.op_eq_b(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))), LingoGlobal.FALSE)):             rtrn = LingoNumber(0)                    if LingoGlobal.op_eq_b(self._movieScript.gTEprops.tooltype, "tile"):             tl = self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv]            mdpnt = LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(0.5000)),LingoNumber(0.4999)).integer,LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(0.5000)),LingoNumber(0.4999)).integer)            strt = LingoGlobal.op_add(LingoGlobal.op_sub(mstile,mdpnt),LingoGlobal.point(LingoNumber(1),LingoNumber(1)))            if (LingoGlobal.op_ne_b(tl.specs2, LingoGlobal.VOID) and self._movieScript.gTEprops.worklayer < LingoNumber(3)):                 n = LingoNumber(1)                tmp_q=int(strt.loch)                while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(strt.loch,tl.sz.loch),LingoNumber(1)):                     q = LingoNumber(tmp_q)                    tmp_c=int(strt.locv)                    while tmp_c < LingoGlobal.op_sub(LingoGlobal.op_add(strt.locv,tl.sz.locv),LingoNumber(1)):                         c = LingoNumber(tmp_c)                        if (((LingoGlobal.op_ne_b(tl.specs2[n], -LingoNumber(1)) and LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))) and self._movieScript.gTEprops.worklayer < LingoNumber(3)):                             if (LingoGlobal.op_ne_b(self._movieScript.afamvlvledit(LingoGlobal.point(q,c),LingoGlobal.op_add(self._movieScript.gTEprops.worklayer,LingoNumber(1))), tl.specs2[n]) or LingoList("tileHead","tileBody").getpos(self._movieScript.gTEprops.tlmatrix[q][c][LingoGlobal.op_add(self._movieScript.gTEprops.worklayer,LingoNumber(1))].tp) > LingoNumber(0)):                                 rtrn = LingoNumber(0)                                break                                                                                    n = LingoGlobal.op_add(n,LingoNumber(1))                        tmp_c = int(c)                        tmp_c += 1                                            if LingoGlobal.op_eq_b(rtrn, LingoNumber(0)):                         break                                            tmp_q = int(q)                    tmp_q += 1                                                if LingoGlobal.op_eq_b(rtrn, LingoNumber(1)):                 n = LingoNumber(1)                tmp_q=int(strt.loch)                while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(strt.loch,tl.sz.loch),LingoNumber(1)):                     q = LingoNumber(tmp_q)                    tmp_c=int(strt.locv)                    while tmp_c < LingoGlobal.op_sub(LingoGlobal.op_add(strt.locv,tl.sz.locv),LingoNumber(1)):                         c = LingoNumber(tmp_c)                        if ((LingoGlobal.op_ne_b(tl.specs[n], -LingoNumber(1)) and LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                             if (LingoGlobal.op_ne_b(self._movieScript.afamvlvledit(LingoGlobal.point(q,c),self._movieScript.gTEprops.worklayer), tl.specs[n]) or LingoList("tileHead","tileBody").getpos(self._movieScript.gTEprops.tlmatrix[q][c][self._movieScript.gTEprops.worklayer].tp) > LingoNumber(0)):                                 rtrn = LingoNumber(0)                                break                                                                                    n = LingoGlobal.op_add(n,LingoNumber(1))                        tmp_c = int(c)                        tmp_c += 1                                            if LingoGlobal.op_eq_b(rtrn, LingoNumber(0)):                         break                                            tmp_q = int(q)                    tmp_q += 1                                                        self._global.sprite(LingoNumber(88)).color = self._global.color(LingoNumber(255),LingoGlobal.op_mul(LingoNumber(255),rtrn),LingoGlobal.op_mul(LingoNumber(255),rtrn))        self._global.sprite(LingoNumber(13)).color = self._global.color(LingoNumber(255),LingoGlobal.op_mul(LingoNumber(255),rtrn),LingoGlobal.op_mul(LingoNumber(255),rtrn))        return rtrn                    def pickuptile(self, mstile):         nc = None        q = None        dt = None        if (LingoGlobal.ToBool(mstile.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):             match self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].tp.lower():                 case "material":                    tmp_nc=int(LingoNumber(1))                    while tmp_nc < self._movieScript.getlastmatcat():                         nc = LingoNumber(tmp_nc)                        tmp_q=int(LingoNumber(1))                        while tmp_q < self._movieScript.gTiles[nc].tls.count:                             q = LingoNumber(tmp_q)                            if LingoGlobal.op_eq_b(self._movieScript.gTiles[nc].tls[q].nm, self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data):                                 self._movieScript.gTEprops.tmpos = LingoGlobal.point(nc,q)                                self.updatetilemenu(LingoGlobal.point(LingoNumber(0),LingoNumber(0)))
                                break                                                            tmp_q = int(q)                            tmp_q += 1                                                    tmp_nc = int(nc)                        tmp_nc += 1                                                            case "tilehead":                    self._movieScript.gTEprops.tmpos = self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data[LingoNumber(1)]                    self.updatetilemenu(LingoGlobal.point(LingoNumber(0),LingoNumber(0)))                case "tilebody":                    dt = self._movieScript.gTEprops.tlmatrix[mstile.loch][mstile.locv][self._movieScript.gTEprops.worklayer].data                    if LingoGlobal.op_eq_b(self._movieScript.gTEprops.tlmatrix[dt[LingoNumber(1)].loch][dt[LingoNumber(1)].locv][dt[LingoNumber(2)]].tp, "tileHead"):                         self._movieScript.gTEprops.tmpos = self._movieScript.gTEprops.tlmatrix[dt[LingoNumber(1)].loch][dt[LingoNumber(1)].locv][dt[LingoNumber(2)]].data[LingoNumber(1)]                        self.updatetilemenu(LingoGlobal.point(LingoNumber(0),LingoNumber(0)))                                                                return None            def placetile(self, plctile, tmpos):         forceadaptterrain = None        tl = None        mdpnt = None        strt = None        n = None        q = None        c = None        if (((plctile.loch < LingoNumber(1) or plctile.locv < LingoNumber(1)) or plctile.loch > self._movieScript.gTEprops.tlmatrix.count) or plctile.locv > self._movieScript.gTEprops.tlmatrix[LingoNumber(1)].count):             return LingoGlobal.VOID                    forceadaptterrain = LingoGlobal.op_and(self._global._key.keypressed("G"),LingoGlobal.op_ne(self._global._movie.window.sizestate,LingoSymbol("minimized")))        tl = self._movieScript.gTiles[tmpos.loch].tls[tmpos.locv]        mdpnt = LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(0.5000)),LingoNumber(0.4999)).integer,LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(0.5000)),LingoNumber(0.4999)).integer)        strt = LingoGlobal.op_add(LingoGlobal.op_sub(plctile,mdpnt),LingoGlobal.point(LingoNumber(1),LingoNumber(1)))        self._movieScript.gTEprops.tlmatrix[plctile.loch][plctile.locv][self._movieScript.gTEprops.worklayer].tp = "tileHead"        self._movieScript.gTEprops.tlmatrix[plctile.loch][plctile.locv][self._movieScript.gTEprops.worklayer].data = LingoList(tmpos,tl.nm)        if LingoGlobal.op_eq_b(tl.nm, "Chain Holder"):             self._movieScript.gTEprops.tlmatrix[plctile.loch][plctile.locv][self._movieScript.gTEprops.worklayer].data.add("NONE")
            self._movieScript.gTEprops.specialedit = LingoList("Attatch Chain",plctile,self._movieScript.gTEprops.worklayer)                    self._movieScript.tedraw(LingoGlobal.rect(plctile.loch,plctile.locv,plctile.loch,plctile.locv),self._movieScript.gTEprops.worklayer)
        if (LingoGlobal.op_ne_b(tl.specs2, LingoGlobal.VOID) and self._movieScript.gTEprops.worklayer < LingoNumber(3)):             n = LingoNumber(1)            tmp_q=int(strt.loch)            while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(strt.loch,tl.sz.loch),LingoNumber(1)):                 q = LingoNumber(tmp_q)                tmp_c=int(strt.locv)                while tmp_c < LingoGlobal.op_sub(LingoGlobal.op_add(strt.locv,tl.sz.locv),LingoNumber(1)):                     c = LingoNumber(tmp_c)                    if ((LingoGlobal.op_ne_b(tl.specs2[n], -LingoNumber(1)) and LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                         self._movieScript.gTEprops.tlmatrix[q][c][LingoGlobal.op_add(self._movieScript.gTEprops.worklayer,LingoNumber(1))].tp = "tileBody"                        self._movieScript.gTEprops.tlmatrix[q][c][LingoGlobal.op_add(self._movieScript.gTEprops.worklayer,LingoNumber(1))].data = LingoList(plctile,self._movieScript.gTEprops.worklayer)                        self._movieScript.tedraw(LingoGlobal.rect(q,c,q,c),LingoGlobal.op_add(self._movieScript.gTEprops.worklayer,LingoNumber(1)))
                        if LingoGlobal.ToBool(forceadaptterrain):                             self._movieScript.gLEProps.matrix[q][c][LingoGlobal.op_add(self._movieScript.gTEprops.worklayer,LingoNumber(1))][LingoNumber(1)] = tl.specs2[n]                                                                        n = LingoGlobal.op_add(n,LingoNumber(1))                    tmp_c = int(c)                    tmp_c += 1                                    tmp_q = int(q)                tmp_q += 1                                    n = LingoNumber(1)        tmp_q=int(strt.loch)        while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(strt.loch,tl.sz.loch),LingoNumber(1)):             q = LingoNumber(tmp_q)            tmp_c=int(strt.locv)            while tmp_c < LingoGlobal.op_sub(LingoGlobal.op_add(strt.locv,tl.sz.locv),LingoNumber(1)):                 c = LingoNumber(tmp_c)                if ((LingoGlobal.op_ne_b(tl.specs[n], -LingoNumber(1)) and LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                     if LingoGlobal.op_ne_b(LingoGlobal.point(q,c), plctile):                         self._movieScript.gTEprops.tlmatrix[q][c][self._movieScript.gTEprops.worklayer].tp = "tileBody"                        self._movieScript.gTEprops.tlmatrix[q][c][self._movieScript.gTEprops.worklayer].data = LingoList(plctile,self._movieScript.gTEprops.worklayer)                        self._movieScript.tedraw(LingoGlobal.rect(q,c,q,c),self._movieScript.gTEprops.worklayer)                    if LingoGlobal.ToBool(forceadaptterrain):                         self._movieScript.gLEProps.matrix[q][c][self._movieScript.gTEprops.worklayer][LingoNumber(1)] = tl.specs[n]                                                            n = LingoGlobal.op_add(n,LingoNumber(1))                tmp_c = int(c)                tmp_c += 1                            tmp_q = int(q)            tmp_q += 1                    if LingoGlobal.ToBool(forceadaptterrain):             self._movieScript.lvleditdraw(LingoGlobal.rect(strt,LingoGlobal.op_add(strt,tl.sz)),LingoNumber(1))
            self._movieScript.lvleditdraw(LingoGlobal.rect(strt,LingoGlobal.op_add(strt,tl.sz)),LingoNumber(2))
            self._movieScript.lvleditdraw(LingoGlobal.rect(strt,LingoGlobal.op_add(strt,tl.sz)),LingoNumber(3))                return None            def deletetiletile(self, ps, lr):         tl = None        mdpnt = None        strt = None        n = None        q = None        c = None        rct = None        tl = self._movieScript.gTEprops.tlmatrix[ps.loch][ps.locv][lr].data[LingoNumber(1)]        tl = self._movieScript.gTiles[tl.loch].tls[tl.locv]        mdpnt = LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.loch,LingoNumber(0.5000)),LingoNumber(0.4999)).integer,LingoGlobal.op_add(LingoGlobal.op_mul(tl.sz.locv,LingoNumber(0.5000)),LingoNumber(0.4999)).integer)        strt = LingoGlobal.op_add(LingoGlobal.op_sub(ps,mdpnt),LingoGlobal.point(LingoNumber(1),LingoNumber(1)))        if (LingoGlobal.op_ne_b(tl.specs2, LingoNumber(0)) and lr < LingoNumber(3)):             n = LingoNumber(1)            tmp_q=int(strt.loch)            while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(strt.loch,tl.sz.loch),LingoNumber(1)):                 q = LingoNumber(tmp_q)                tmp_c=int(strt.locv)                while tmp_c < LingoGlobal.op_sub(LingoGlobal.op_add(strt.locv,tl.sz.locv),LingoNumber(1)):                     c = LingoNumber(tmp_c)                    if ((LingoGlobal.op_ne_b(tl.specs2[n], -LingoNumber(1)) and LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                         self._movieScript.gTEprops.tlmatrix[q][c][LingoGlobal.op_add(lr,LingoNumber(1))].tp = "default"                        self._movieScript.gTEprops.tlmatrix[q][c][LingoGlobal.op_add(lr,LingoNumber(1))].data = LingoNumber(0)                        rct = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(q,LingoNumber(16)),LingoGlobal.op_mul(c,LingoNumber(16))),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16)),LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16))))                        self._global.member(LingoGlobal.concat("TEimg",self._global.str(LingoNumber(2)))).image.copypixels(LingoImage.Pxl,rct,LingoImage.Pxl.rect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))                    n = LingoGlobal.op_add(n,LingoNumber(1))                    tmp_c = int(c)                    tmp_c += 1                                    tmp_q = int(q)                tmp_q += 1                                    n = LingoNumber(1)        tmp_q=int(strt.loch)        while tmp_q < LingoGlobal.op_sub(LingoGlobal.op_add(strt.loch,tl.sz.loch),LingoNumber(1)):             q = LingoNumber(tmp_q)            tmp_c=int(strt.locv)            while tmp_c < LingoGlobal.op_sub(LingoGlobal.op_add(strt.locv,tl.sz.locv),LingoNumber(1)):                 c = LingoNumber(tmp_c)                if ((LingoGlobal.op_ne_b(tl.specs[n], -LingoNumber(1)) and LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))))) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657))))):                     self._movieScript.gTEprops.tlmatrix[q][c][lr].tp = "default"                    self._movieScript.gTEprops.tlmatrix[q][c][lr].data = LingoNumber(0)                    rct = LingoGlobal.op_sub(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(q,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_sub(c,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(q,LingoNumber(16)),LingoGlobal.op_mul(c,LingoNumber(16))),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16)),LingoGlobal.op_mul(self._movieScript.gLEProps.campos,LingoNumber(16))))                    self._global.member(LingoGlobal.concat("TEimg",self._global.str(lr))).image.copypixels(LingoImage.Pxl,rct,LingoImage.Pxl.rect,LingoPropertyList(LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))                n = LingoGlobal.op_add(n,LingoNumber(1))                tmp_c = int(c)                tmp_c += 1                            tmp_q = int(q)            tmp_q += 1                            return None            def specialaction(self, tl):         if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(16),LingoNumber(17),LingoNumber(848),LingoNumber(657)))):             match self._movieScript.gTEprops.specialedit[LingoNumber(1)].lower():                 case "attatch chain":                    self._movieScript.gTEprops.tlmatrix[self._movieScript.gTEprops.specialedit[LingoNumber(2)].loch][self._movieScript.gTEprops.specialedit[LingoNumber(2)].locv][self._movieScript.gTEprops.specialedit[LingoNumber(3)]].data[LingoNumber(3)] = tl                    self._movieScript.gTEprops.specialedit = LingoNumber(0)                                                                return None            def changelayer(self):         pos = None        if LingoGlobal.op_eq_b(self._movieScript.gTEprops.worklayer, LingoNumber(2)):             self._global.sprite(LingoNumber(1)).blend = LingoNumber(10)            self._global.sprite(LingoNumber(2)).blend = LingoNumber(10)            self._global.sprite(LingoNumber(3)).blend = LingoNumber(90)            self._global.sprite(LingoNumber(4)).blend = LingoNumber(100)            self._global.sprite(LingoNumber(5)).blend = LingoNumber(70)            self._global.sprite(LingoNumber(6)).blend = LingoNumber(0)                    elif LingoGlobal.op_eq_b(self._movieScript.gTEprops.worklayer, LingoNumber(1)):             self._global.sprite(LingoNumber(1)).blend = LingoNumber(10)            self._global.sprite(LingoNumber(2)).blend = LingoNumber(10)            self._global.sprite(LingoNumber(3)).blend = LingoNumber(60)            self._global.sprite(LingoNumber(4)).blend = LingoNumber(10)            self._global.sprite(LingoNumber(5)).blend = LingoNumber(70)            self._global.sprite(LingoNumber(6)).blend = LingoNumber(100)                    else:            self._global.sprite(LingoNumber(1)).blend = LingoNumber(100)            self._global.sprite(LingoNumber(2)).blend = LingoNumber(100)            self._global.sprite(LingoNumber(3)).blend = LingoNumber(60)            self._global.sprite(LingoNumber(4)).blend = LingoNumber(10)            self._global.sprite(LingoNumber(5)).blend = LingoNumber(60)            self._global.sprite(LingoNumber(6)).blend = LingoNumber(10)                    self._global.member("layerText").text = LingoGlobal.concat_space("Work Layer:",self._global.str(self._movieScript.gTEprops.worklayer))        pos = LingoGlobal.op_sub(LingoNumber(2),self._movieScript.gTEprops.worklayer)        self._global.sprite(LingoNumber(1)).loc = LingoGlobal.op_add(LingoGlobal.point(LingoNumber(432),LingoNumber(336)),LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(pos,LingoNumber(1)),LingoGlobal.op_sub(-pos,LingoNumber(1))),LingoNumber(3)))        self._global.sprite(LingoNumber(2)).loc = LingoGlobal.op_add(LingoGlobal.point(LingoNumber(432),LingoNumber(336)),LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_add(pos,LingoNumber(1)),LingoGlobal.op_sub(-pos,LingoNumber(1))),LingoNumber(3)))        self._global.sprite(LingoNumber(3)).loc = LingoGlobal.op_add(LingoGlobal.point(LingoNumber(432),LingoNumber(336)),LingoGlobal.op_mul(LingoGlobal.point(pos,-pos),LingoNumber(3)))        self._global.sprite(LingoNumber(4)).loc = LingoGlobal.op_add(LingoGlobal.point(LingoNumber(432),LingoNumber(336)),LingoGlobal.op_mul(LingoGlobal.point(pos,-pos),LingoNumber(3)))        self._global.sprite(LingoNumber(5)).loc = LingoGlobal.op_add(LingoGlobal.point(LingoNumber(432),LingoNumber(336)),LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_sub(pos,LingoNumber(1)),LingoGlobal.op_add(-pos,LingoNumber(1))),LingoNumber(3)))        self._global.sprite(LingoNumber(6)).loc = LingoGlobal.op_add(LingoGlobal.point(LingoNumber(432),LingoNumber(336)),LingoGlobal.op_mul(LingoGlobal.point(LingoGlobal.op_sub(pos,LingoNumber(1)),LingoGlobal.op_add(-pos,LingoNumber(1))),LingoNumber(3)))                return None            def specialrectplacement(self, rct):         px = None        py = None        lookfortilecat = None        strlength = None        q = None        patterns = None        a = None        b = None        currentpattern = None        possiblepatterns = None        tl = None        match self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].nm.lower():             case "rect clear":                tmp_px=int(rct.left)                while tmp_px < rct.right:                     px = LingoNumber(tmp_px)                    tmp_py=int(rct.top)                    while tmp_py < rct.bottom:                         py = LingoNumber(tmp_py)                        self.deletetile(LingoGlobal.point(px,py))
                        tmp_py = int(py)                        tmp_py += 1                                            tmp_px = int(px)                    tmp_px += 1                                                case "sh pattern box" | "sh grate box" | "alt grate box":                self.placetile(LingoGlobal.point(rct.left,rct.top),LingoGlobal.point(LingoNumber(6),LingoNumber(5)))
                self.placetile(LingoGlobal.point(rct.right,rct.top),LingoGlobal.point(LingoNumber(6),LingoNumber(6)))
                self.placetile(LingoGlobal.point(rct.right,rct.bottom),LingoGlobal.point(LingoNumber(6),LingoNumber(7)))
                self.placetile(LingoGlobal.point(rct.left,rct.bottom),LingoGlobal.point(LingoNumber(6),LingoNumber(8)))
                tmp_px=int(LingoGlobal.op_add(rct.left,LingoNumber(1)))                while tmp_px < LingoGlobal.op_sub(rct.right,LingoNumber(1)):                     px = LingoNumber(tmp_px)                    self.placetile(LingoGlobal.point(px,rct.top),LingoGlobal.point(LingoNumber(6),LingoNumber(1)))
                    self.placetile(LingoGlobal.point(px,rct.bottom),LingoGlobal.point(LingoNumber(6),LingoNumber(3)))
                    tmp_px = int(px)                    tmp_px += 1                                    tmp_py=int(LingoGlobal.op_add(rct.top,LingoNumber(1)))                while tmp_py < LingoGlobal.op_sub(rct.bottom,LingoNumber(1)):                     py = LingoNumber(tmp_py)                    self.placetile(LingoGlobal.point(rct.left,py),LingoGlobal.point(LingoNumber(6),LingoNumber(4)))
                    self.placetile(LingoGlobal.point(rct.right,py),LingoGlobal.point(LingoNumber(6),LingoNumber(2)))
                    tmp_py = int(py)                    tmp_py += 1                                    lookfortilecat = "SU patterns"                strlength = LingoNumber(10)                if LingoGlobal.op_eq_b(self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].nm, "SH grate box"):                     lookfortilecat = "SU grates"                    strlength = LingoNumber(8)                                    elif LingoGlobal.op_eq_b(self._movieScript.gTiles[self._movieScript.gTEprops.tmpos.loch].tls[self._movieScript.gTEprops.tmpos.locv].nm, "Alt Grate Box"):                     lookfortilecat = "Drought Alt Grates"                    strlength = LingoNumber(9)                                    tmp_q=int(self._movieScript.getfirsttilecat())                while tmp_q < self._movieScript.gTiles.count:                     q = LingoNumber(tmp_q)                    if LingoGlobal.op_eq_b(self._movieScript.gTiles[q].nm, lookfortilecat):                         lookfortilecat = q                        break                                            tmp_q = int(q)                    tmp_q += 1                                    patterns = LingoList()                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("A"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("B1"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("B2"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "espaced",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("B3"),LingoSymbol("upper"), "ospaced",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("B4"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "ospaced",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("C1"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "espaced",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("C2"),LingoSymbol("upper"), "ospaced",LingoSymbol("lower"), "ospaced",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("E1"),LingoSymbol("upper"), "ospaced",LingoSymbol("lower"), "espaced",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("E2"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "ospaced",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("F1"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(1)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("F2"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(1)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("F1","F2"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("F3"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("F4"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("G1","G2"),LingoSymbol("upper"), "dense",LingoSymbol("lower"), "ospaced",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(5)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("I"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(4)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("J1"),LingoSymbol("upper"), "ospaced",LingoSymbol("lower"), "ospaced",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(1)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("J2"),LingoSymbol("upper"), "ospaced",LingoSymbol("lower"), "ospaced",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(1)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("J1","J2"),LingoSymbol("upper"), "ospaced",LingoSymbol("lower"), "ospaced",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(2)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("J3"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "espaced",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(1)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("J4"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "espaced",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(1)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("J3","J4"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "espaced",LingoSymbol("tall"), LingoNumber(2),LingoSymbol("freq"), LingoNumber(2)))
                patterns.add(LingoPropertyList(LingoSymbol("tiles"), LingoList("B1","I"),LingoSymbol("upper"), "espaced",LingoSymbol("lower"), "dense",LingoSymbol("tall"), LingoNumber(1),LingoSymbol("freq"), LingoNumber(2)))
                tmp_q=int(LingoNumber(1))                while tmp_q < patterns.count:                     q = LingoNumber(tmp_q)                    tmp_a=int(LingoNumber(1))                    while tmp_a < patterns[q].tiles.count:                         a = LingoNumber(tmp_a)                        tmp_b=int(LingoNumber(1))                        while tmp_b < self._movieScript.gTiles[lookfortilecat].tls.count:                             b = LingoNumber(tmp_b)                            if LingoGlobal.op_eq_b(patterns[q].tiles[a], LingoGlobal.chars(self._movieScript.gTiles[lookfortilecat].tls[b].nm,strlength,LingoGlobal.lengthmember_helper(self._movieScript.gTiles[lookfortilecat].tls[b].nm))):                                 patterns[q].tiles[a] = b                                                            tmp_b = int(b)                            tmp_b += 1                                                    tmp_a = int(a)                        tmp_a += 1                                            tmp_q = int(q)                    tmp_q += 1                                    py = LingoGlobal.op_add(rct.top,LingoNumber(1))                currentpattern = patterns[self._global.random(patterns.count)]                while LingoGlobal.ToBool(LingoGlobal.op_lt(py,rct.bottom)):                     possiblepatterns = LingoList()                    tmp_q=int(LingoNumber(1))                    while tmp_q < patterns.count:                         q = LingoNumber(tmp_q)                        if (LingoGlobal.op_eq_b(patterns[q].upper, currentpattern.lower) and LingoGlobal.op_add(py,patterns[q].tall) < LingoGlobal.op_add(rct.bottom,LingoNumber(1))):                             tmp_a=int(LingoNumber(1))                            while tmp_a < patterns[q].freq:                                 a = LingoNumber(tmp_a)                                possiblepatterns.add(q)
                                tmp_a = int(a)                                tmp_a += 1                                                                                    tmp_q = int(q)                        tmp_q += 1                                            currentpattern = patterns[possiblepatterns[self._global.random(possiblepatterns.count)]]                    tl = self._global.random(currentpattern.tiles.count)                    tmp_px=int(LingoGlobal.op_add(rct.left,LingoNumber(1)))                    while tmp_px < LingoGlobal.op_sub(rct.right,LingoNumber(1)):                         px = LingoNumber(tmp_px)                        tl = LingoGlobal.op_add(tl,LingoNumber(1))                        if tl > currentpattern.tiles.count:                             tl = LingoNumber(1)                                                    self.placetile(LingoGlobal.point(px,py),LingoGlobal.point(lookfortilecat,currentpattern.tiles[tl]))
                        tmp_px = int(px)                        tmp_px += 1                                            py = LingoGlobal.op_add(py,currentpattern.tall)                                                                return None            