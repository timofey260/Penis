from Drizzle.Runtime import *## Behavior script: renderLightStart#class renderLightStart(LingoBehaviorScript):     def __init__(self):         super().__init__()            def exitframe(self):         layer = None        q = None        tp = None        grss = None        lr = None        cols = None        rows = None        marginpixels = None        l = None        inversedlightimage = None        q2 = None        if ((LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(56))) and LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(48)))) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, LingoSymbol("minimized"))):             self._global._player.appminimize()        if LingoGlobal.ToBool(self._movieScript.checkexit()):             self._global._player.quit()        if LingoGlobal.ToBool(self._movieScript.checkexitrender()):             self._global._movie.go(LingoNumber(9))        self._global.the_randomSeed = self._movieScript.gLOprops.tileseed        self._global.member("layer0dc").image.copypixels(self._global.member("blackOutImg2").image,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_mul(LingoNumber(100),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(60),LingoNumber(20))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_mul(LingoNumber(100),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(60),LingoNumber(20))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
        tmp_layer=int(LingoNumber(1))        while tmp_layer < LingoNumber(3):             layer = LingoNumber(tmp_layer)            tmp_q=int(LingoNumber(1))            while tmp_q < self._movieScript.gLOprops.size.loch:                 q = LingoNumber(tmp_q)                tmp_c=int(LingoNumber(1))                while tmp_c < self._movieScript.gLOprops.size.locv:                     self._movieScript.c = LingoNumber(tmp_c)                    if ((self._movieScript.gLEProps.matrix[q][self._movieScript.c][layer][LingoNumber(2)].getpos(LingoNumber(3)) > LingoNumber(0) and LingoGlobal.op_eq_b(self._movieScript.afamvlvledit(LingoGlobal.point(q,self._movieScript.c),layer), LingoNumber(0))) and LingoGlobal.op_eq_b(self._movieScript.afamvlvledit(LingoGlobal.point(q,LingoGlobal.op_add(self._movieScript.c,LingoNumber(1))),layer), LingoNumber(1))):                         tmp_tp=int(LingoNumber(1))                        while tmp_tp < LingoNumber(2):                             tp = LingoNumber(tmp_tp)                            tmp_grss=int(LingoNumber(1))                            while tmp_grss < LingoNumber(6):                                 grss = LingoNumber(tmp_grss)                                lr = LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(layer,LingoNumber(1)),LingoNumber(10)),self._global.random(LingoNumber(9)))                                self._movieScript.pos = LingoGlobal.op_add(self._movieScript.givemiddleoftile(LingoGlobal.op_sub(LingoGlobal.point(q,self._movieScript.c),self._movieScript.gRenderCameraTilePos)),LingoGlobal.point(LingoGlobal.op_add(-LingoNumber(10),self._global.random(LingoNumber(20))),LingoNumber(0)))                                if (LingoGlobal.op_eq_b(tp, LingoNumber(2)) and LingoGlobal.op_eq_b(layer, LingoNumber(1))):                                     self._global.member(LingoGlobal.concat("layer",self._global.str(lr))).image.copypixels(self._global.member("hiveGrassGraf").image,LingoGlobal.op_add(LingoGlobal.rect(self._movieScript.pos,self._movieScript.pos),LingoGlobal.rect(-LingoNumber(2),LingoGlobal.op_sub(LingoGlobal.op_sub(self._global.random(LingoNumber(5)),self._global.random(LingoNumber(10))),self._global.random(self._global.random(LingoNumber(14)))),LingoNumber(3),LingoNumber(10))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(5),LingoNumber(29)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36)))                                else:                                    self._global.member(LingoGlobal.concat("layer",self._global.str(lr))).image.copypixels(self._global.member("hiveGrassGraf2").image,LingoGlobal.op_add(LingoGlobal.rect(self._movieScript.pos,self._movieScript.pos),LingoGlobal.rect(-LingoNumber(2),LingoGlobal.op_sub(LingoGlobal.op_sub(self._global.random(LingoNumber(5)),self._global.random(LingoNumber(10))),self._global.random(self._global.random(LingoNumber(14)))),LingoNumber(3),LingoNumber(10))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(5),LingoNumber(29)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))                                tmp_grss = int(grss)                                tmp_grss += 1                                                            tmp_tp = int(tp)                            tmp_tp += 1                                                                        tmp_c = int(self._movieScript.c)                    tmp_c += 1                                    tmp_q = int(q)                tmp_q += 1                            tmp_layer = int(layer)            tmp_layer += 1                    cols = LingoNumber(100)        rows = LingoNumber(60)        marginpixels = LingoNumber(150)        if LingoGlobal.ToBool(self._movieScript.gAnyDecals):             tmp_l=int(LingoNumber(0))            while tmp_l < LingoNumber(29):                 l = LingoNumber(tmp_l)                self.quadifymember(LingoGlobal.concat("layer",self._global.str(l),"dc"),LingoGlobal.op_mul(LingoGlobal.op_sub(l,LingoNumber(5)),LingoNumber(1.5000)))
                tmp_l = int(l)                tmp_l += 1                                    tmp_l=int(LingoNumber(0))        while tmp_l < LingoNumber(29):             l = LingoNumber(tmp_l)            self.quadifymember(LingoGlobal.concat("layer",self._global.str(l)),LingoGlobal.op_mul(LingoGlobal.op_sub(l,LingoNumber(5)),LingoNumber(1.5000)))
            self._global.member(LingoGlobal.concat("layer",l,"sh")).image = self._global.image(LingoGlobal.op_add(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2))),LingoGlobal.op_add(LingoGlobal.op_mul(rows,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2))),LingoNumber(1))            self.quadifymember(LingoGlobal.concat("gradientA",self._global.str(l)),LingoGlobal.op_mul(LingoGlobal.op_sub(l,LingoNumber(5)),LingoNumber(1.5000)))
            self.quadifymember(LingoGlobal.concat("gradientB",self._global.str(l)),LingoGlobal.op_mul(LingoGlobal.op_sub(l,LingoNumber(5)),LingoNumber(1.5000)))
            tmp_l = int(l)            tmp_l += 1                    self._global.member("activeLightImage").image = self._global.image(LingoGlobal.op_add(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2))),LingoGlobal.op_add(LingoGlobal.op_mul(rows,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2))),LingoNumber(1))        self._global.member("activeLightImage").image.setpixel(LingoNumber(0),LingoNumber(0),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)))
        self._global.member("activeLightImage").image.setpixel(LingoGlobal.op_sub(self._global.member("activeLightImage").image.rect.right,LingoNumber(1)),LingoGlobal.op_sub(self._global.member("activeLightImage").image.rect.bottom,LingoNumber(1)),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)))
        inversedlightimage = self._movieScript.makesilhouttefromimg(self._global.member("lightImage").image,LingoNumber(1))        self._global.member("activeLightImage").image.copypixels(inversedlightimage,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2))),LingoGlobal.op_add(LingoGlobal.op_mul(rows,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2)))),LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2))),LingoGlobal.op_add(LingoGlobal.op_mul(rows,LingoNumber(20)),LingoGlobal.op_mul(marginpixels,LingoNumber(2))))),LingoGlobal.rect(LingoGlobal.op_mul(self._movieScript.gRenderCameraTilePos,LingoNumber(20)),LingoGlobal.op_mul(self._movieScript.gRenderCameraTilePos,LingoNumber(20)))),LingoGlobal.rect(LingoNumber(150),LingoNumber(150),LingoNumber(150),LingoNumber(150))))
        self._global.member("activeLightImage").image.copypixels(self._global.member("blackOutImg2").image,LingoGlobal.op_add(LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20))),LingoGlobal.rect(marginpixels,marginpixels,marginpixels,marginpixels)),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoGlobal.op_mul(cols,LingoNumber(20)),LingoGlobal.op_mul(rows,LingoNumber(20))),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
        self._movieScript.c = LingoNumber(0)        self._movieScript.keepLooping = LingoNumber(1)        self._movieScript.pos = LingoGlobal.point(LingoNumber(0),LingoNumber(0))        self._movieScript.tm = self._global._system.milliseconds        tmp_q2=int(LingoNumber(0))        while tmp_q2 < LingoNumber(29):             q2 = LingoNumber(tmp_q2)            self._global.sprite(LingoGlobal.op_sub(LingoNumber(50),q2)).loc = LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_div(LingoNumber(1366),LingoNumber(2)),q2),LingoGlobal.op_sub(LingoGlobal.op_div(LingoNumber(768),LingoNumber(2)),q2))            tmp_q2 = int(q2)            tmp_q2 += 1                    if LingoGlobal.op_eq_b(self._movieScript.gLOprops.light, LingoNumber(0)):             self._global._movie.go(LingoNumber(66))                return None            def quadifymember(self, mem, fac):         newimg = None        qd = None        q = None        newimg = self._global.member(mem).image.duplicate()        qd = LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoGlobal.point(newimg.width,LingoNumber(0)),LingoGlobal.point(newimg.width,newimg.height),LingoGlobal.point(LingoNumber(0),newimg.height))        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(4):             q = LingoNumber(tmp_q)            qd[q] = LingoGlobal.op_add(qd[q],LingoGlobal.op_mul(LingoGlobal.op_mul(LingoGlobal.op_mul(self._movieScript.degtovec(self._movieScript.gCameraProps.quads[self._movieScript.gCurrentRenderCamera][q][LingoNumber(1)]),self._movieScript.gCameraProps.quads[self._movieScript.gCurrentRenderCamera][q][LingoNumber(2)]),fac),LingoNumber(2.5000)))            tmp_q = int(q)            tmp_q += 1                    self._global.member(mem).image.copypixels(newimg,qd,newimg.rect)        return None            