from Drizzle.Runtime import *## Movie script: comEditorUtils#class MovieScript:     def __init__(self):         super().__init__()            def clearlogs(self):         pass                return None            def writeexception(self, tp, msg):         pass                return None            def writemessage(self, msg):         pass                return None            def writeinfomessage(self, msg):         pass                return None            def writeinternalmessage(self, msg):         pass                return None            def outputinternallog(self):         fileopener = None        fileopener = self._global.new(self._global.xtra("fileio"))        fileopener.openfile(LingoGlobal.concat(self._global.the_moviePath,"editorExceptionLog.txt"),LingoNumber(0))
        fileopener.writestr(self._global.member("logText").text)
        fileopener.writereturn(windows)        return None            def exportall(self):         pass                return None            def getboolconfig(self, str):         txt = None        q = None        txt = self._global.member("editorConfig").text        tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.thenumberoflines_helper(txt):             q = tmp_q            if LingoGlobal.op_eq_b(LingoGlobal.linemember_helper(txt)[q], LingoGlobal.concat(str," : TRUE")):                 return LingoGlobal.TRUE                            tmp_q = q            tmp_q += 1                    return LingoGlobal.FALSE                    def getstrconfig(self, str):         txt = None        q = None        txt = self._global.member("editorConfig").text        tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.thenumberoflines_helper(txt):             q = tmp_q            if LingoGlobal.op_eq_b(LingoGlobal.linemember_helper(txt)[q], LingoGlobal.concat(str," : DROUGHT")):                 return "DROUGHT"                            elif LingoGlobal.op_eq_b(LingoGlobal.linemember_helper(txt)[q], LingoGlobal.concat(str," : DRY")):                 return "DRY"                            tmp_q = q            tmp_q += 1                    return "VANILLA"                    def checkexitrender(self):         txt = None        txt = self.INT_EXRD        if LingoGlobal.op_eq_b(txt, "DROUGHT"):             return LingoGlobal.op_and(LingoGlobal.op_and(LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(48)),self._global._key.keypressed("Z")),self._global._key.keypressed("R")),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                    elif LingoGlobal.op_eq_b(txt, "DRY"):             return LingoGlobal.op_and(LingoGlobal.op_and(LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(48)),self._global._key.keypressed("X")),self._global._key.keypressed("C")),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                    return LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(48)),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                    def checkexit(self):         txt = None        txt = self.INT_EXIT        if LingoGlobal.op_eq_b(txt, "DROUGHT"):             return LingoGlobal.op_and(LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(56)),self._global._key.keypressed(LingoNumber(53))),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                    elif LingoGlobal.op_eq_b(txt, "DRY"):             return LingoGlobal.op_and(LingoGlobal.op_and(LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(48)),self._global._key.keypressed("X")),self._global._key.keypressed(LingoNumber(36))),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                    return LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(53)),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                    def checkdrinternal(self, nm):         return LingoGlobal.op_gt(self.DRInternalList.getpos(nm),LingoNumber(0))                    def setfirsttilecat(self, num):         self.DRFirstTileCat = num                return None            def getfirsttilecat(self):         return self.DRFirstTileCat                    def setlastmatcat(self, num):         self.DRLastMatCat = num                return None            def getlastmatcat(self):         return self.DRLastMatCat                    def initdrinternal(self):         self.DRInternalList = LingoList("SGFL","tileSetAsphaltFloor","tileSetStandardFloor","tileSetBigMetalFloor","tileSetBricksFloor","tileSetCliffFloor","tileSetConcreteFloor","tileSetNon-Slip MetalFloor","tileSetRainstoneFloor","tileSetRough RockFloor","tileSetScaffoldingDRFloor","tileSetSteelFloor","tileSetSuperStructure2Floor","tileSetSuperStructureFloor","tileSetTiny SignsFloor","tileSetElectricMetalFloor","tileSetCageGrateFloor","tileSetGrateFloor","tileSetBulkMetalFloor","tileSetMassiveBulkMetalFloor","4Mosaic Square","4Mosaic Slope NE","4Mosaic Slope SE","4Mosaic Slope NW","4Mosaic Slope SW","4Mosaic Floor","3DBrick Square","3DBrick Slope NE","3DBrick Slope SE","3DBrick Slope NW","3DBrick Slope SW","3DBrick Floor","Small Stone Slope NE","Small Stone Slope SE","Small Stone Slope NW","Small Stone Slope SW","Small Stone Floor","Small Machine Slope NE","Small Machine Slope SE","Small Machine Slope NW","Small Machine Slope SW","Small Machine Floor","Missing Metal Slope NE","Missing Metal Slope SE","Missing Metal Slope NW","Missing Metal Slope SW","Missing Metal Floor","Small Stone Marked","Square Stone Marked","Small Metal Alt","Small Metal Marked","Small Metal X","Metal Floor Alt","Metal Wall","Metal Wall Alt","Square Metal Marked","Square Metal X","Wide Metal","Tall Metal","Big Metal X","Large Big Metal","Large Big Metal Marked","Large Big Metal X","AltGrateA","AltGrateB1","AltGrateB2","AltGrateB3","AltGrateB4","AltGrateC1","AltGrateC2","AltGrateE1","AltGrateE2","AltGrateF1","AltGrateF2","AltGrateF3","AltGrateF4","AltGrateG1","AltGrateG2","AltGrateH","AltGrateI","AltGrateF2","AltGrateJ1","AltGrateJ2","AltGrateJ3","AltGrateJ4","AltGrateK1","AltGrateK2","AltGrateK3","AltGrateK4","AltGrateL","AltGrateM","AltGrateN","AltGrateO","Big Big Pipe","Ring Chain","Stretched Pipe","Stretched Wire","Twisted Thread","Christmas Wire","Ornate Wire","Dune Sand")        self.RandomMetals_grabTiles = LingoList("Metal","Metal construction","Plate")        self.RandomMetals_allowed = LingoList("Small Metal","Metal Floor","Square Metal","Big Metal","Big Metal Marked","C Beam Horizontal AA","C Beam Horizontal AB","C Beam Vertical AA","C Beam Vertical BA","Plate 2")        self.ChaoticStone2_needed = LingoList("Small Stone","Square Stone","Tall Stone","Wide Stone","Big Stone","Big Stone Marked")        self.DRRandomMetal_needed = LingoList("Small Metal","Metal Floor","Square Metal","Big Metal","Big Metal Marked","Four Holes","Cross Beam Intersection")        self.SmallMachines_grabTiles = LingoList("Machinery","Machinery2","Small machine")        self.SmallMachines_forbidden = LingoList("Feather Box - W","Feather Box - E","Piston Arm","Vertical Conveyor Belt A","Ventilation Box Empty","Ventilation Box","Big Fan","Giant Screw","Compressor Segment","Compressor R","Compressor L","Hub Machine","Pole Holder","Sky Box","Conveyor Belt Wheel","Piston Top","Piston Segment Empty","Piston Head","Piston Segment Filled","Piston Bottom","Piston Segment Horizontal A","Piston Segment Horizontal B","machine box C_E","machine box C_W","machine box C_Sym","Machine Box D","machine box B","Big Drill","Elevator Track","Conveyor Belt Covered","Conveyor Belt L","Conveyor Belt R","Conveyor Belt Segment","Dyson Fan","Metal Holes","valve","Tank Holder","Drill Rim","Door Holder R","Door Holder L","Drill B","machine box A","Machine Box E L","Machine Box E R","Drill Shell A","Drill Shell B","Drill Shell Top","Drill Shell Bottom","Pipe Box R","Pipe Box L")        self.RandomMachines_grabTiles = LingoList("Machinery","Machinery2","Small machine","Drought Machinery","Custom Random Machines")        self.RandomMachines_forbidden = LingoList("Feather Box - W","Feather Box - E","Piston Arm","Vertical Conveyor Belt A","Piston Head No Cage","Conveyor Belt Holder Only","Conveyor Belt Wheel Only","Drill Valve")        self.RandomMachines2_grabTiles = LingoList("Machinery","Machinery2","Small machine")        self.RandomMachines2_forbidden = LingoList("Feather Box - W","Feather Box - E","Piston Arm","Vertical Conveyor Belt A","Ventilation Box Empty","Ventilation Box","Big Fan","Giant Screw","Compressor Segment","Compressor R","Compressor L","Hub Machine","Pole Holder","Sky Box","Conveyor Belt Wheel","Piston Top","Piston Segment Empty","Piston Head","Piston Segment Filled","Piston Bottom","Piston Segment Horizontal A","Piston Segment Horizontal B","machine box C_E","machine box C_W","machine box C_Sym","Machine Box D","machine box B","Big Drill","Elevator Track","Conveyor Belt Covered","Conveyor Belt L","Conveyor Belt R","Conveyor Belt Segment","Dyson Fan")                return None            