from Drizzle.Runtime import *## Parent script: levelEdit_parentscript#class levelEdit_parentscript(LingoParentScript):     def __init__(self):         super().__init__()        self.p = None            def newupdate(self):         currtool = None        mstile = None        mv = None        affectrect = None        sav = None        changeto = None        wrkpos = None        q = None        c = None        drwrect = None        rct1 = None        rct2 = None        affectrect2 = None        drwaffrct = None        pnt1 = None        pnt2 = None        self.p.lastworkpos = self.p.workpos        self.p.lastinput = self.p.input        self.p.input = LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoNumber(0),LingoNumber(0))        currtool = self._movieScript.gLEProps.toolmatrix[self.p.toolpos.locv][self.p.toolpos.loch]        match self.p.playernum if value is not None else 9999999999:             case 1:                self.p.input[LingoNumber(1)].loch = LingoGlobal.op_sub(self.p.input[LingoNumber(1)].loch,LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(123)),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(1)].loch = LingoGlobal.op_add(self.p.input[LingoNumber(1)].loch,LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(124)),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(1)].locv = LingoGlobal.op_sub(self.p.input[LingoNumber(1)].locv,LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(126)),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(1)].locv = LingoGlobal.op_add(self.p.input[LingoNumber(1)].locv,LingoGlobal.op_and(self._global._key.keypressed(LingoNumber(125)),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(2)] = LingoGlobal.op_and(self._global._key.keypressed("K"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                self.p.input[LingoNumber(3)] = LingoGlobal.op_and(self._global._key.keypressed("L"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                mstile = LingoGlobal.op_add(LingoGlobal.op_div(self._global._mouse.mouseloc,LingoGlobal.point(LingoNumber(16.0000),LingoNumber(16.0000))),LingoGlobal.point(LingoNumber(0.4999),LingoNumber(0.4999)))                mstile = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.point(mstile.loch.integer,mstile.locv.integer),LingoGlobal.point(-LingoNumber(11),-LingoNumber(1))),self._movieScript.gLEProps.campos)                if LingoGlobal.ToBool(mstile.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))))):                     self.p.workpos = mstile                    self.p.input[LingoNumber(3)] = LingoGlobal.op_or(self.p.input[LingoNumber(3)],self._global._mouse.mousedown)                                                case 2:                mstile = LingoGlobal.point(-LingoNumber(100),-LingoNumber(100))                self.p.input[LingoNumber(1)].loch = LingoGlobal.op_sub(self.p.input[LingoNumber(1)].loch,LingoGlobal.op_and(self._global._key.keypressed("S"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(1)].loch = LingoGlobal.op_add(self.p.input[LingoNumber(1)].loch,LingoGlobal.op_and(self._global._key.keypressed("F"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(1)].locv = LingoGlobal.op_sub(self.p.input[LingoNumber(1)].locv,LingoGlobal.op_and(self._global._key.keypressed("E"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(1)].locv = LingoGlobal.op_add(self.p.input[LingoNumber(1)].locv,LingoGlobal.op_and(self._global._key.keypressed("D"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized)))                self.p.input[LingoNumber(2)] = LingoGlobal.op_and(self._global._key.keypressed("Q"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                self.p.input[LingoNumber(3)] = LingoGlobal.op_and(self._global._key.keypressed("W"),LingoGlobal.op_ne(self._global._movie.window.sizestate,minimized))                                    mv = LingoGlobal.point(LingoNumber(0),LingoNumber(0))        if LingoGlobal.op_ne_b(self.p.lastinput[LingoNumber(1)].loch, self.p.input[LingoNumber(1)].loch):             mv.loch = self.p.input[LingoNumber(1)].loch                    if LingoGlobal.op_ne_b(self.p.lastinput[LingoNumber(1)].locv, self.p.input[LingoNumber(1)].locv):             mv.locv = self.p.input[LingoNumber(1)].locv                    if LingoGlobal.op_ne_b(mv, LingoGlobal.point(LingoNumber(0),LingoNumber(0))):             if (LingoGlobal.ToBool(self.p.input[LingoNumber(2)]) or LingoGlobal.ToBool(mstile.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1)))))):                 self.p.toolpos = LingoGlobal.op_add(self.p.toolpos,mv)                self.p.toolpos.loch = self._movieScript.restrictwithflip(self.p.toolpos.loch,LingoNumber(1),LingoNumber(4))                self.p.toolpos.locv = self._movieScript.restrictwithflip(self.p.toolpos.locv,LingoNumber(1),self._movieScript.gLEProps.toolmatrix.count)                currtool = self._movieScript.gLEProps.toolmatrix[self.p.toolpos.locv][self.p.toolpos.loch]                self.updatetooltext()            else:                match currtool.lower():                     case "move":                        self.movecanvas(mv)                    case "setmirrorpoint":                        self.p.mirrorpos = self._movieScript.restrict(LingoGlobal.op_add(self.p.mirrorpos,mv.loch),LingoNumber(1),self._movieScript.gLOprops.size.loch)                                            case _:                         self.p.workpos = LingoGlobal.op_add(self.p.workpos,mv)                        self.p.workpos.loch = self._movieScript.restrictwithflip(self.p.workpos.loch,LingoNumber(1),self._movieScript.gLOprops.size.loch)                        self.p.workpos.locv = self._movieScript.restrictwithflip(self.p.workpos.locv,LingoNumber(1),self._movieScript.gLOprops.size.locv)                                                                                if LingoList("squareWall","squareAir","copyBack","flip").getpos(currtool) > LingoNumber(0):             affectrect = LingoGlobal.rect(self.p.workpos,self.p.rectpos)            if affectrect.top > affectrect.bottom:                 sav = affectrect.bottom                affectrect.bottom = affectrect.top                affectrect.top = sav                            if affectrect.left > affectrect.right:                 sav = affectrect.right                affectrect.right = affectrect.left                affectrect.left = sav                                    else:            self.p.rectfollow = LingoNumber(1)            affectrect = LingoGlobal.rect(self.p.workpos.loch,self.p.workpos.locv,self.p.workpos.loch,self.p.workpos.locv)                    if LingoGlobal.ToBool(self.p.rectfollow):             self.p.rectpos = self.p.workpos                    changeto = "NOCHANGE"        if LingoGlobal.ToBool(self.p.input[LingoNumber(3)]):             match currtool.lower():                 case "inverse":                    if (LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656))))):                         if LingoGlobal.op_eq_b(self._movieScript.gLEProps.matrix[self.p.workpos.loch][self.p.workpos.locv][self.p.worklayer][LingoNumber(1)], LingoNumber(0)):                             changeto = LingoNumber(1)                                                    elif LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                             changeto = LingoNumber(0)                                                                                        case "paintwall":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         changeto = LingoNumber(1)                                                            case "paintair":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         changeto = LingoNumber(0)                                                            case "floor":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         changeto = LingoNumber(6)                                                            case "slope":                    if (LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656))))):                         self.slopetile(self.p.workpos)
                        if LingoGlobal.ToBool(self.p.mirror):                             wrkpos = self.mirrorrect(LingoGlobal.rect(self.p.workpos,self.p.workpos))                            wrkpos = LingoGlobal.point(wrkpos.left,wrkpos.top)                            self.slopetile(wrkpos)
                            self._movieScript.lvleditdraw(LingoGlobal.rect(wrkpos,wrkpos),self.p.worklayer)                                                            case "lizardhole":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(7))                                    case "playerspawn":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(6))                                    case "squarewall" | "squareair":                    if (LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656))))):                         if LingoGlobal.ToBool(self.p.rectfollow):                             self.p.rectfollow = LingoNumber(0)                                                    elif LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                             self.p.rectfollow = LingoNumber(1)                            changeto = LingoGlobal.op_eq(currtool,"squareWall")                                                                                        case "copyback":                    if (LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656))))):                         if LingoGlobal.ToBool(self.p.rectfollow):                             self.p.rectfollow = LingoNumber(0)                                                    elif LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                             self.p.rectfollow = LingoNumber(1)                            changeto = "copyBack"                                                                                        case "flip":                    if (LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656))))):                         if LingoGlobal.ToBool(self.p.rectfollow):                             self.p.rectfollow = LingoNumber(0)                                                    elif LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                             self.p.rectfollow = LingoNumber(1)                            changeto = "flip"                                                                                        case "horbeam":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(1))                                    case "verbeam":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(2))                                    case "glass":                    if ((LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)) or LingoGlobal.op_ne_b(self.p.lastworkpos, self.p.workpos)) and LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656))))):                         changeto = LingoNumber(9)                                                            case "shortcutentrance":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(4))
                        self._movieScript.drawshortcutsimg(LingoGlobal.op_add(affectrect,LingoGlobal.rect(-LingoNumber(1),-LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoNumber(16))                                    case "shortcut":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(5))
                        self._movieScript.drawshortcutsimg(LingoGlobal.op_add(affectrect,LingoGlobal.rect(-LingoNumber(1),-LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoNumber(16))                                    case "hive":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(3))                                    case "worklayer":                    if LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)):                         self.p.worklayer = LingoGlobal.op_add(self.p.worklayer,LingoNumber(1))                        if self.p.worklayer > LingoNumber(3):                             self.p.worklayer = LingoNumber(1)                                                                        self.updatetooltext()                case "mirrortoggle":                    if LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)):                         self.p.mirror = LingoGlobal.op_sub(LingoNumber(1),self.p.mirror)                                                            case "rock":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(9))                                    case "spear":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(10))                                    case "crack":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(11))                                    case "forbidbats":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(12))                                    case "garbagehole":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(13))                                    case "waterfall":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(18))                                    case "whamh":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(19))                                    case "wormgrass":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(20))                                    case "scavengerhole":                    if LingoGlobal.ToBool(self._global._mouse.mouseloc.inside(LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(1008),LingoNumber(656)))):                         self.addremovefeature(LingoNumber(21))                                                if LingoGlobal.op_ne_b(changeto, "NOCHANGE"):                 tmp_q=int(affectrect.left)                while tmp_q < affectrect.right:                     q = tmp_q                    tmp_c=int(affectrect.top)                    while tmp_c < affectrect.bottom:                         c = tmp_c                        match changeto.lower():                             case "copyback":                                self._movieScript.gLEProps.matrix[q][c][LingoGlobal.op_sub(LingoGlobal.op_add(self.p.worklayer,LingoNumber(1)),LingoGlobal.op_eq(self.p.worklayer,LingoNumber(3)))][LingoNumber(1)] = self._movieScript.gLEProps.matrix[q][c][self.p.worklayer][LingoNumber(1)]                                self._movieScript.lvleditdraw(LingoGlobal.rect(q,c,q,c),LingoGlobal.op_sub(LingoGlobal.op_add(self.p.worklayer,LingoNumber(1)),LingoGlobal.op_eq(self.p.worklayer,LingoNumber(3))))                            case "flip":                                self._movieScript.gLEProps.matrix[q][c] = LingoList(LingoList(LingoNumber(0),LingoList()),LingoList(LingoNumber(0),LingoList()),LingoList(LingoNumber(0),LingoList()))                                                            case _:                                 self._movieScript.gLEProps.matrix[q][c][self.p.worklayer][LingoNumber(1)] = changeto                                                                                    tmp_c = c                        tmp_c += 1                                            tmp_q = q                    tmp_q += 1                                                self._movieScript.lvleditdraw(affectrect,self.p.worklayer)
            self._movieScript.drawshortcutsimg(LingoGlobal.op_add(affectrect,LingoGlobal.rect(-LingoNumber(1),-LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoNumber(16))        if LingoGlobal.op_eq_b(changeto, "flip"):             self._movieScript.lvleditdraw(affectrect,LingoNumber(1))
            self._movieScript.lvleditdraw(affectrect,LingoNumber(2))
            self._movieScript.lvleditdraw(affectrect,LingoNumber(3))        drwrect = LingoGlobal.op_sub(affectrect,LingoGlobal.rect(self._movieScript.gLEProps.campos,self._movieScript.gLEProps.campos))        rct1 = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(drwrect.left,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_sub(drwrect.top,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(drwrect.right,LingoNumber(16)),LingoGlobal.op_mul(drwrect.bottom,LingoNumber(16))),LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(176),LingoNumber(16)))        rct2 = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(self.p.toolpos.loch,LingoNumber(1)),LingoNumber(32)),LingoGlobal.op_mul(LingoGlobal.op_sub(self.p.toolpos.locv,LingoNumber(1)),LingoNumber(32)),LingoGlobal.op_mul(self.p.toolpos.loch,LingoNumber(32)),LingoGlobal.op_mul(self.p.toolpos.locv,LingoNumber(32))),LingoGlobal.rect(LingoNumber(16),LingoNumber(16),LingoNumber(16),LingoNumber(16)))        if LingoGlobal.op_eq_b(self.p.playernum, LingoNumber(1)):             if (LingoGlobal.op_eq_b(affectrect.width, LingoNumber(0)) and LingoGlobal.op_eq_b(affectrect.height, LingoNumber(0))):                 self._global.member("rulerText").text = LingoGlobal.concat("x:",affectrect.left," y:",affectrect.top)                            else:                self._global.member("rulerText").text = LingoGlobal.concat("w:",LingoGlobal.op_add(affectrect.width,LingoNumber(1))," h:",LingoGlobal.op_add(affectrect.height,LingoNumber(1)))                            self._global.sprite(LingoNumber(170)).loc = LingoGlobal.point(LingoGlobal.op_add(rct1.right,LingoNumber(10)),LingoGlobal.op_sub(rct1.bottom,LingoNumber(10)))                    self._global.sprite(self.p.sprl[LingoNumber(1)]).rect = rct1        self._global.sprite(self.p.sprl[LingoNumber(2)]).rect = rct2        if LingoGlobal.ToBool(self.p.mirror):             self._global.sprite(self.p.sprl[LingoNumber(3)]).rect = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_sub(LingoGlobal.op_mul(LingoGlobal.op_sub(self.p.mirrorpos,self._movieScript.gLEProps.campos.loch),LingoNumber(16)),LingoNumber(1)),LingoNumber(0),LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_sub(self.p.mirrorpos,self._movieScript.gLEProps.campos.loch),LingoNumber(16)),LingoNumber(1)),LingoGlobal.op_mul(LingoNumber(40),LingoNumber(16))),LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(176),LingoNumber(16)))            self._global.sprite(self.p.sprl[LingoNumber(3)]).member = self._global.member("pxl")            affectrect2 = self.mirrorrect(affectrect)            drwaffrct = LingoGlobal.op_sub(affectrect2,LingoGlobal.rect(self._movieScript.gLEProps.campos,self._movieScript.gLEProps.campos))            self._global.sprite(self.p.sprl[LingoNumber(4)]).rect = LingoGlobal.op_add(LingoGlobal.rect(LingoGlobal.op_mul(LingoGlobal.op_sub(drwaffrct.left,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(LingoGlobal.op_sub(drwaffrct.top,LingoNumber(1)),LingoNumber(16)),LingoGlobal.op_mul(drwaffrct.right,LingoNumber(16)),LingoGlobal.op_mul(drwaffrct.bottom,LingoNumber(16))),LingoGlobal.rect(LingoNumber(176),LingoNumber(16),LingoNumber(176),LingoNumber(16)))            if LingoGlobal.op_ne_b(changeto, "NOCHANGE"):                 tmp_q=int(affectrect2.left)                while tmp_q < affectrect2.right:                     q = tmp_q                    tmp_c=int(affectrect2.top)                    while tmp_c < affectrect2.bottom:                         c = tmp_c                        if LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self._movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self._movieScript.gLOprops.size.locv,LingoNumber(1))))):                             if LingoGlobal.op_eq_b(changeto, "copyBack"):                                 self._movieScript.gLEProps.matrix[q][c][LingoGlobal.op_sub(LingoGlobal.op_add(self.p.worklayer,LingoNumber(1)),LingoGlobal.op_eq(self.p.worklayer,LingoNumber(3)))][LingoNumber(1)] = self._movieScript.gLEProps.matrix[q][c][self.p.worklayer][LingoNumber(1)]                                self._movieScript.lvleditdraw(LingoGlobal.rect(q,c,q,c),LingoGlobal.op_sub(LingoGlobal.op_add(self.p.worklayer,LingoNumber(1)),LingoGlobal.op_eq(self.p.worklayer,LingoNumber(3))))                            elif LingoGlobal.op_ne_b(changeto, "flip"):                                 self._movieScript.gLEProps.matrix[q][c][self.p.worklayer][LingoNumber(1)] = changeto                                                                                    tmp_c = c                        tmp_c += 1                                            tmp_q = q                    tmp_q += 1                                    self._movieScript.lvleditdraw(affectrect2,self.p.worklayer)
                self._movieScript.drawshortcutsimg(LingoGlobal.op_add(affectrect2,LingoGlobal.rect(-LingoNumber(1),-LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoNumber(16))                    else:            self._global.sprite(self.p.sprl[LingoNumber(3)]).rect = LingoGlobal.rect(-LingoNumber(100),-LingoNumber(100),-LingoNumber(100),-LingoNumber(100))            self._global.sprite(self.p.sprl[LingoNumber(4)]).rect = LingoGlobal.rect(-LingoNumber(100),-LingoNumber(100),-LingoNumber(100),-LingoNumber(100))                    pnt1 = self._movieScript.closestpntinrect(rct1,LingoGlobal.point(LingoGlobal.op_add(rct2.left,LingoGlobal.op_mul(rct2.width,LingoNumber(0.5000))),LingoGlobal.op_add(rct2.top,LingoGlobal.op_mul(rct2.height,LingoNumber(0.5000)))))        pnt2 = self._movieScript.closestpntinrect(rct2,LingoGlobal.point(LingoGlobal.op_add(rct1.left,LingoGlobal.op_mul(rct1.width,LingoNumber(0.5000))),LingoGlobal.op_add(rct1.top,LingoGlobal.op_mul(rct1.height,LingoNumber(0.5000)))))        self._global.sprite(self.p.sprl[LingoNumber(5)]).member = self._global.member(LingoGlobal.concat("line",LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_lt(pnt1.locv,pnt2.locv))))        self._global.sprite(self.p.sprl[LingoNumber(5)]).rect = LingoGlobal.rect(pnt1,LingoGlobal.op_add(pnt2,LingoGlobal.point(LingoNumber(0),LingoNumber(1))))        self._global.sprite(self.p.sprl[LingoNumber(6)]).loc = LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.point(rct1.right,rct1.bottom),LingoGlobal.point(LingoNumber(32),LingoNumber(32))),LingoGlobal.point(LingoNumber(8),LingoNumber(8)))                return None            def mirrorrect(self, rct):         lft = None        rght = None        lft = LingoGlobal.op_sub(self.p.mirrorpos,LingoGlobal.op_sub(rct.left,self.p.mirrorpos))        rght = LingoGlobal.op_sub(self.p.mirrorpos,LingoGlobal.op_sub(rct.right,self.p.mirrorpos))        if lft < rght:             rct = LingoGlobal.rect(lft,rct.top,rght,rct.bottom)                    else:            rct = LingoGlobal.rect(rght,rct.top,lft,rct.bottom)                    return LingoGlobal.op_add(rct,LingoGlobal.rect(LingoNumber(1),LingoNumber(0),LingoNumber(1),LingoNumber(0)))                    def slopetile(self, ps):         nbs = None        dir = None        rslt = None        nbs = ""        for tmp_dir in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):             dir = tmp_dir            nbs = LingoGlobal.concat(nbs,self._movieScript.afamvlvledit(LingoGlobal.op_add(ps,dir),self.p.worklayer))                    match nbs.lower():             case "1001":                rslt = LingoNumber(2)                            case "0011":                rslt = LingoNumber(3)                            case "1100":                rslt = LingoNumber(4)                            case "0110":                rslt = LingoNumber(5)                            case _:                 rslt = LingoNumber(0)                                    if LingoGlobal.op_ne_b(rslt, LingoNumber(0)):             self._movieScript.gLEProps.matrix[ps.loch][ps.locv][self.p.worklayer][LingoNumber(1)] = rslt                            return None            def addremovefeature(self, ft):         ps = None        ps = self.p.workpos        if (LingoGlobal.op_eq_b(self.p.lastinput[LingoNumber(3)], LingoNumber(0)) or LingoGlobal.op_ne_b(self.p.lastworkpos, self.p.workpos)):             if LingoGlobal.op_eq_b(self._movieScript.gLEProps.matrix[ps.loch][ps.locv][self.p.worklayer][LingoNumber(2)].getpos(ft), LingoNumber(0)):                 self._movieScript.gLEProps.matrix[ps.loch][ps.locv][self.p.worklayer][LingoNumber(2)].add(ft)            else:                self._movieScript.gLEProps.matrix[ps.loch][ps.locv][self.p.worklayer][LingoNumber(2)].deleteone(ft)            if LingoGlobal.ToBool(self.p.mirror):                 ps = self.mirrorrect(LingoGlobal.rect(self.p.workpos,self.p.workpos))                ps = LingoGlobal.point(ps.left,ps.top)                if LingoGlobal.op_eq_b(self._movieScript.gLEProps.matrix[ps.loch][ps.locv][self.p.worklayer][LingoNumber(2)].getpos(ft), LingoNumber(0)):                     self._movieScript.gLEProps.matrix[ps.loch][ps.locv][self.p.worklayer][LingoNumber(2)].add(ft)                else:                    self._movieScript.gLEProps.matrix[ps.loch][ps.locv][self.p.worklayer][LingoNumber(2)].deleteone(ft)                            self._movieScript.lvleditdraw(LingoGlobal.rect(ps,ps),self.p.worklayer)
            self._movieScript.drawshortcutsimg(LingoGlobal.op_add(LingoGlobal.rect(ps,ps),LingoGlobal.rect(-LingoNumber(1),-LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoNumber(16))                return None            def new(self, playnm):         offst = None        cl = None        q = None        p = LingoPropertyList()        offst = LingoNumber(800)        if LingoGlobal.op_eq_b(playnm, LingoNumber(1)):             offst = LingoNumber(810)                    self.p.addprop(sprl,LingoList(LingoNumber(6),LingoNumber(7),LingoNumber(4),LingoNumber(5),LingoNumber(8),LingoNumber(9)))
        self.p.sprl = LingoGlobal.op_add(self.p.sprl,offst)        self.p.addprop(playernum,playnm)
        self._global.sprite(self.p.sprl[LingoNumber(1)]).linesize = LingoNumber(2)        self._global.sprite(self.p.sprl[LingoNumber(2)]).linesize = LingoNumber(2)        self._global.sprite(self.p.sprl[LingoNumber(4)]).linesize = LingoNumber(2)        if LingoGlobal.op_eq_b(playnm, LingoNumber(1)):             cl = self._global.color(LingoNumber(100),LingoNumber(100),LingoNumber(100))                    else:            cl = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))                    tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(5):             q = tmp_q            self._global.sprite(self.p.sprl[q]).color = cl            tmp_q = q            tmp_q += 1                    self.p.addprop(input,LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoNumber(0),LingoNumber(0)))
        self.p.addprop(lastinput,LingoList(LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoNumber(0),LingoNumber(0)))
        self.p.addprop(toolpos,LingoGlobal.point(LingoNumber(1),LingoNumber(1)))
        self.p.addprop(workpos,LingoGlobal.point(LingoNumber(1),LingoNumber(1)))
        self.p.addprop(rectpos,LingoGlobal.point(LingoNumber(1),LingoNumber(1)))
        self.p.addprop(rectfollow,LingoNumber(0))
        self.p.addprop(toolprops,"")
        self.p.addprop(worklayer,LingoNumber(1))
        self.p.addprop(lastworkpos,LingoGlobal.point(LingoNumber(1),LingoNumber(1)))
        self.p.addprop(mirror,LingoNumber(0))
        self.p.addprop(mirrorpos,LingoGlobal.op_div(self._movieScript.gLOprops.size.loch,LingoNumber(2)))
        self.updatetooltext()
        self._movieScript.gLEProps.leveleditors.add(self)        return None            def movecanvas(self, mv):         sav = None        eff = None        q = None        if mv.loch < LingoNumber(0):             sav = self._movieScript.gLEProps.matrix[LingoNumber(1)]            self._movieScript.gLEProps.matrix.deleteat(LingoNumber(1))
            self._movieScript.gLEProps.matrix.add(sav)
            sav = self._movieScript.gTEprops.tlmatrix[LingoNumber(1)]            self._movieScript.gTEprops.tlmatrix.deleteat(LingoNumber(1))
            self._movieScript.gTEprops.tlmatrix.add(sav)
            for tmp_eff in self._movieScript.gEEprops.effects:                 eff = tmp_eff                sav = eff.mtrx[LingoNumber(1)]                eff.mtrx.deleteat(LingoNumber(1))
                eff.mtrx.add(sav)                    elif mv.loch > LingoNumber(0):             sav = self._movieScript.gLEProps.matrix[self._movieScript.gLOprops.size.loch]            self._movieScript.gLEProps.matrix.deleteat(self._movieScript.gLOprops.size.loch)
            self._movieScript.gLEProps.matrix.addat(LingoNumber(1),sav)
            sav = self._movieScript.gTEprops.tlmatrix[self._movieScript.gLOprops.size.loch]            self._movieScript.gTEprops.tlmatrix.deleteat(self._movieScript.gLOprops.size.loch)
            self._movieScript.gTEprops.tlmatrix.addat(LingoNumber(1),sav)
            for tmp_eff in self._movieScript.gEEprops.effects:                 eff = tmp_eff                sav = eff.mtrx[self._movieScript.gLOprops.size.loch]                eff.mtrx.deleteat(self._movieScript.gLOprops.size.loch)
                eff.mtrx.addat(LingoNumber(1),sav)                    if mv.locv < LingoNumber(0):             tmp_q=int(LingoNumber(1))            while tmp_q < self._movieScript.gLOprops.size.loch:                 q = tmp_q                sav = self._movieScript.gLEProps.matrix[q][LingoNumber(1)]                self._movieScript.gLEProps.matrix[q].deleteat(LingoNumber(1))
                self._movieScript.gLEProps.matrix[q].add(sav)
                sav = self._movieScript.gTEprops.tlmatrix[q][LingoNumber(1)]                self._movieScript.gTEprops.tlmatrix[q].deleteat(LingoNumber(1))
                self._movieScript.gTEprops.tlmatrix[q].add(sav)
                for tmp_eff in self._movieScript.gEEprops.effects:                     eff = tmp_eff                    sav = eff.mtrx[q][LingoNumber(1)]                    eff.mtrx[q].deleteat(LingoNumber(1))
                    eff.mtrx[q].add(sav)                tmp_q = q                tmp_q += 1                                    elif mv.locv > LingoNumber(0):             tmp_q=int(LingoNumber(1))            while tmp_q < self._movieScript.gLOprops.size.loch:                 q = tmp_q                sav = self._movieScript.gLEProps.matrix[q][self._movieScript.gLOprops.size.locv]                self._movieScript.gLEProps.matrix[q].deleteat(self._movieScript.gLOprops.size.locv)
                self._movieScript.gLEProps.matrix[q].addat(LingoNumber(1),sav)
                sav = self._movieScript.gTEprops.tlmatrix[q][self._movieScript.gLOprops.size.locv]                self._movieScript.gTEprops.tlmatrix[q].deleteat(self._movieScript.gLOprops.size.locv)
                self._movieScript.gTEprops.tlmatrix[q].addat(LingoNumber(1),sav)
                for tmp_eff in self._movieScript.gEEprops.effects:                     eff = tmp_eff                    sav = eff.mtrx[q][self._movieScript.gLOprops.size.locv]                    eff.mtrx[q].deleteat(self._movieScript.gLOprops.size.locv)
                    eff.mtrx[q].addat(LingoNumber(1),sav)                tmp_q = q                tmp_q += 1                                    self._movieScript.lvleditdraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),LingoNumber(1))
        self._movieScript.lvleditdraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),LingoNumber(2))
        self._movieScript.lvleditdraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),LingoNumber(3))
        self._movieScript.drawshortcutsimg(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self._movieScript.gLOprops.size.loch,self._movieScript.gLOprops.size.locv),LingoNumber(16))        return None            def updatetooltext(self):         txt = None        txt = ""        match self._movieScript.gLEProps.toolmatrix[self.p.toolpos.locv][self.p.toolpos.loch].lower():             case "copyback":                txt = "Copy Backwards"                            case "inverse":                txt = "Inverse"                            case "paintwall":                txt = "Paint Walls"                            case "paintair":                txt = "Paint Air"                            case "slope":                txt = "Make Slope"                            case "floor":                txt = "Make Floor"                            case "squarewall":                txt = "Rect Wall"                            case "squareair":                txt = "Rect Air"                            case "move":                txt = "Move Level"                            case "horbeam":                txt = "Horizontal Beam"                            case "verbeam":                txt = "Vertical Beam"                            case "glass":                txt = "Glass Wall"                            case "hive":                txt = "Hive"                            case "shortcutentrance":                txt = "Short Cut Entrance"                            case "shortcut":                txt = "Short Cut"                            case "playerspawn":                txt = "Entrance"                            case "lizardhole":                txt = "Dragon Den"                            case "rock":                txt = "Place Rock"                            case "spear":                txt = "Place Spear"                            case "mirrortoggle":                txt = "Toggle Mirror"                            case "setmirrorpoint":                txt = "Move Mirror"                            case "worklayer":                txt = LingoGlobal.concat("Work Layer: ",self._global.str(self.p.worklayer))                            case "crack":                txt = "Crack Terrain"                            case "flip":                txt = "Clear All"                            case "forbidbats":                txt = "Forbid Fly Chains"                            case "bubble":                txt = "Bubble"                            case "egg":                txt = "Dragon Egg"                            case "waterfall":                txt = "Waterfall"                            case "whamh":                txt = "Whack A Mole Hole"                            case "wormgrass":                txt = "Worm Grass"                            case "scavengerhole":                txt = "Scavenger Hole"                            case "garbagehole":                txt = "Garbage Worm Hole"                                    self._global.member(LingoGlobal.concat("editor",self._global.str(self.p.playernum),"tool")).text = txt        self._global.sprite(self.p.sprl[LingoNumber(6)]).member = self._global.member(LingoGlobal.concat("icon",self._movieScript.gLEProps.toolmatrix[self.p.toolpos.locv][self.p.toolpos.loch]))                return None            