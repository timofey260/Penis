from Drizzle.Runtime import *## Behavior script: startUp#class startUp(LingoBehaviorScript):     def __init__(self):         super().__init__()            def exitframe(self):         fileco = None        g = None        fac = None        screenresolutionpoint = None        screensize = None        midpos = None        windowrect = None        cols = None        rows = None        q = None        ql = None        c = None        l = None        savlm = None        ln = None        lin = None        efln = None        eflin = None        gtlcnt = None        mattl = None        del = None        spcind = None        sav = None        ptpos = None        drpos = None        vl = None        ad = None        debugline = None        sav2 = None        calculatedheight = None        rct = None        strng = None        dp = None        i = None        gpagecount = None        gpagetick = None        tl = None        rnddisf = None        ntp = None        ecat = None        ecbt = None        dct = None        cct = None        ccrt = None        rrt = None        rfxt = None        rfyt = None        cst = None        csbt = None        lst = None        lsbt = None        drt = None        inte = None        nmtp = None        prq = None        t = None        savef = None        fileef = None        mem = None        tr = None        fileopener = None        _global.member("editorConfig").importfileinto("editorConfig.txt")
        if ((LingoGlobal.op_eq_b(_global.member("editorConfig").text, LingoGlobal.VOID) or LingoGlobal.op_eq_b(_global.member("editorConfig").text, "")) or LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(_global.member("editorConfig").text)[LingoNumber(1)], "Rain World Community Editor; V.0.4.21; Editor configuration file")):             fileco = _global.new(_global.xtra("fileio"))            fileco.createfile(LingoGlobal.concat(_global.the_moviePath,"editorConfig.txt"))
            fileco.openfile(LingoGlobal.concat(_global.the_moviePath,"editorConfig.txt"),LingoNumber(0))
            fileco.writestr(_global.member("baseConfig").text)
            fileco.writereturn(windows)
            _global.member("editorConfig").text = _global.member("baseConfig").text            _global._movie.go(LingoNumber(1))        _movieScript.clearlogs()
        if ((LingoGlobal.ToBool(_global._key.keypressed(LingoNumber(56))) and LingoGlobal.ToBool(_global._key.keypressed(LingoNumber(48)))) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):             _global._player.appminimize()        _global._global.clearglobals()
        _global._movie.exitlock = LingoGlobal.TRUE        _movieScript.lvlPropOutput = LingoGlobal.FALSE        _movieScript.initdrinternal()
        _movieScript.gFullRender = LingoNumber(1)        _movieScript.gViewRender = LingoNumber(1)        _movieScript.DRLastTL = LingoNumber(1)        _movieScript.gMassRenderL = LingoList()        _movieScript.gLOADPATH = LingoList()        _movieScript.gLevel = LingoPropertyList(timelimit=LingoNumber(4800),defaultterrain=LingoNumber(1),maxflies=LingoNumber(10),flyspawnrate=LingoNumber(50),lizards=LingoList(),ambientsounds=LingoList(),music="NONE",tags=LingoList(),lighttype="Static",waterdrips=LingoNumber(1),lightrect=LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1040),LingoNumber(800)),matrix=LingoList())        _global._movie.window.appearanceoptions.border = none        _global._movie.window.resizable = LingoGlobal.FALSE        _movieScript.gLoadedName = "New Project"        _global.member("level Name").text = "New Project"        _movieScript.gImgXtra = _global.xtra("ImgXtra").new()        g = LingoNumber(21)        if LingoGlobal.op_eq_b(g, LingoNumber(2)):             _movieScript.gSaveProps = LingoList(_global.bascreeninfo("width"),_global.bascreeninfo("height"),_global.bascreeninfo("depth"))            fac = LingoGlobal.op_div(_movieScript.gSaveProps[LingoNumber(1)].float,_movieScript.gSaveProps[LingoNumber(2)].float)            screenresolutionpoint = _global._system.desktoprectlist            _global.basetdisplay(screenresolutionpoint.loch,screenresolutionpoint.locv,LingoNumber(32),"temp",LingoGlobal.FALSE)
            screensize = LingoGlobal.op_div(_global._system.desktoprectlist,LingoNumber(2))            midpos = LingoGlobal.op_div(screenresolutionpoint,LingoNumber(2))            windowrect = LingoGlobal.rect(LingoGlobal.op_sub(midpos,screensize),LingoGlobal.op_add(midpos,screensize))            _global._movie.window.rect = windowrect            _global._movie.stage.drawrect = windowrect                    else:            _movieScript.gSaveProps = LingoList(LingoNumber(1),LingoNumber(1),LingoNumber(1))                    _movieScript.solidMtrx = LingoList()        cols = LingoNumber(72)        rows = LingoNumber(43)        _movieScript.gLEProps = LingoPropertyList(matrix=LingoList(),leveleditors=LingoList(),toolmatrix=LingoList(),campos=LingoGlobal.point(LingoNumber(0),LingoNumber(0)))        _movieScript.gLEProps.toolmatrix.add(LingoList("inverse","paintWall","paintAir","slope"))
        _movieScript.gLEProps.toolmatrix.add(LingoList("floor","squareWall","squareAir","move"))
        _movieScript.gLEProps.toolmatrix.add(LingoList("rock","spear","crack",""))
        _movieScript.gLEProps.toolmatrix.add(LingoList("horBeam","verBeam","glass","copyBack"))
        _movieScript.gLEProps.toolmatrix.add(LingoList("shortCutEntrance","shortCut","lizardHole","playerSpawn"))
        _movieScript.gLEProps.toolmatrix.add(LingoList("forbidbats","","hive","waterFall"))
        _movieScript.gLEProps.toolmatrix.add(LingoList("scavengerHole","WHAMH","garbageHole","wormGrass"))
        _movieScript.gLEProps.toolmatrix.add(LingoList("workLayer","flip","mirrorToggle","setMirrorPoint"))
        _movieScript.resetgenveditorprops()
        for tmp_q in LingoGlobal.pyrange(LingoNumber(1), cols):             q = tmp_q            ql = LingoList()            for tmp_c in LingoGlobal.pyrange(LingoNumber(1), rows):                 c = tmp_c                ql.add(LingoList(LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(0),LingoList())))
                tmp_c = c                            _movieScript.gLEProps.matrix.add(ql)
            tmp_q = q                    _movieScript.gBlurOptions = LingoPropertyList(blurlight=LingoNumber(0),blursky=LingoNumber(0))        _movieScript.gTEprops = LingoPropertyList(lastkeys=LingoList(),keys=LingoList(),worklayer=LingoNumber(1),lstmsps=LingoGlobal.point(LingoNumber(0),LingoNumber(0)),tlmatrix=LingoList(),defaultmaterial="Concrete",tooltype="material",tooldata="Big Metal",tmPos=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),tmsavposl=LingoList(),specialedit=LingoNumber(0))        for tmp_q in LingoGlobal.pyrange(LingoNumber(1), cols):             q = tmp_q            l = LingoList()            for tmp_c in LingoGlobal.pyrange(LingoNumber(1), rows):                 c = tmp_c                l.add(LingoList(LingoPropertyList(tp="default",data=LingoNumber(0)),LingoPropertyList(tp="default",data=LingoNumber(0)),LingoPropertyList(tp="default",data=LingoNumber(0))))
                tmp_c = c                            _movieScript.gTEprops.tlmatrix.add(l)
            tmp_q = q                    _global.member("layerText").text = "Layer:1"        _movieScript.gTiles = LingoList()        _movieScript.gTiles.add(LingoPropertyList(nm="Materials",tls=LingoList()))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Standard",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(150),LingoNumber(150),LingoNumber(150))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Concrete",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(150),LingoNumber(255),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="RainStone",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Bricks",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(200),LingoNumber(150),LingoNumber(100))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="BigMetal",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Tiny Signs",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(255),LingoNumber(200),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Scaffolding",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(60),LingoNumber(60),LingoNumber(40))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Dense Pipes",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="densePipeType",color=_global.color(LingoNumber(0),LingoNumber(0),LingoNumber(150))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="SuperStructure",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(160),LingoNumber(180),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="SuperStructure2",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(190),LingoNumber(160),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Tiled Stone",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(100),LingoNumber(0),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Chaotic Stone",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Small Pipes",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="pipeType",color=_global.color(LingoNumber(255),LingoNumber(255),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Trash",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="pipeType",color=_global.color(LingoNumber(90),LingoNumber(255),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Invisible",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="invisibleI",color=_global.color(LingoNumber(200),LingoNumber(200),LingoNumber(200))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="LargeTrash",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="largeTrashType",color=_global.color(LingoNumber(175),LingoNumber(30),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="3DBricks",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Random Machines",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(72),LingoNumber(116),LingoNumber(80))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Dirt",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="dirtType",color=_global.color(LingoNumber(124),LingoNumber(72),LingoNumber(52))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Ceramic Tile",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="ceramicType",color=_global.color(LingoNumber(60),LingoNumber(60),LingoNumber(100))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Temple Stone",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(0),LingoNumber(120),LingoNumber(180))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Circuits",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="densePipeType",color=_global.color(LingoNumber(0),LingoNumber(150),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(nm="Ridge",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="ridgeType",color=_global.color(LingoNumber(200),LingoNumber(15),LingoNumber(60))))
        _movieScript.gTiles.add(LingoPropertyList(nm="Drought Materials",tls=LingoList()))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Steel",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(220),LingoNumber(170),LingoNumber(195))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="4Mosaic",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(227),LingoNumber(76),LingoNumber(13))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Color A Ceramic",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="ceramicAType",color=_global.color(LingoNumber(120),LingoNumber(0),LingoNumber(90))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Color B Ceramic",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="ceramicBType",color=_global.color(LingoNumber(0),LingoNumber(175),LingoNumber(175))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Random Pipes",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="randomPipesType",color=_global.color(LingoNumber(80),LingoNumber(0),LingoNumber(140))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Rocks",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="rockType",color=_global.color(LingoNumber(185),LingoNumber(200),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Rough Rock",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="roughRock",color=_global.color(LingoNumber(155),LingoNumber(170),LingoNumber(0))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Random Metal",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(180),LingoNumber(10),LingoNumber(10))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Cliff",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(75),LingoNumber(75),LingoNumber(75))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Non-Slip Metal",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(180),LingoNumber(80),LingoNumber(80))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Stained Glass",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(180),LingoNumber(80),LingoNumber(180))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Sandy Dirt",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="sandy",color=_global.color(LingoNumber(180),LingoNumber(180),LingoNumber(80))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="MegaTrash",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="megaTrashType",color=_global.color(LingoNumber(135),LingoNumber(10),LingoNumber(255))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Shallow Dense Pipes",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="densePipeType",color=_global.color(LingoNumber(13),LingoNumber(23),LingoNumber(110))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Sheet Metal",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="wv",color=_global.color(LingoNumber(145),LingoNumber(135),LingoNumber(125))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Chaotic Stone 2",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(90),LingoNumber(90),LingoNumber(90))))
        _movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(nm="Asphalt",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(115),LingoNumber(115),LingoNumber(115))))
        _movieScript.gTiles.add(LingoPropertyList(nm="Community Materials",tls=LingoList()))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="Shallow Circuits",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="densePipeType",color=_global.color(LingoNumber(15),LingoNumber(200),LingoNumber(155))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="Random Machines 2",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(116),LingoNumber(116),LingoNumber(80))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="Small Machines",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(80),LingoNumber(116),LingoNumber(116))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="Random Metals",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(80))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="ElectricMetal",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(100))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="Grate",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(190),LingoNumber(50),LingoNumber(190))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="CageGrate",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(50),LingoNumber(190),LingoNumber(190))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="BulkMetal",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(50),LingoNumber(19),LingoNumber(190))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="MassiveBulkMetal",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="unified",color=_global.color(LingoNumber(255),LingoNumber(19),LingoNumber(19))))
        _movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(nm="Dune Sand",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),rendertype="tiles",color=_global.color(LingoNumber(255),LingoNumber(255),LingoNumber(100))))
        savlm = _global.member("matInit")        _global.member("matInit").importfileinto(LingoGlobal.concat("Materials",_global.the_dirSeparator,"Init.txt"))
        savlm.name = "matInit"        _movieScript.DRCustomMatList = LingoList()        if (LingoGlobal.op_ne_b(savlm.text, LingoGlobal.VOID) and LingoGlobal.op_ne_b(savlm.text, "")):             for tmp_ln in LingoGlobal.pyrange(LingoNumber(1), LingoGlobal.thenumberoflines_helper(savlm.text)):                 ln = tmp_ln                lin = LingoGlobal.linemember_helper(savlm.text)[ln]                if LingoGlobal.op_ne_b(lin, ""):                     if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(lin)[LingoNumber(1)], "-"):                         _movieScript.gTiles.add(LingoPropertyList(nm=_global.slice_helper(LingoGlobal.charmember_helper(lin),LingoNumber(2),LingoGlobal.lengthmember_helper(lin)),tls=LingoList()))
                        for tmp_efLn in LingoGlobal.pyrange(LingoGlobal.op_add(ln,LingoNumber(1)), LingoGlobal.thenumberoflines_helper(savlm.text)):                             efln = tmp_efLn                            eflin = LingoGlobal.linemember_helper(savlm.text)[efln]                            if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(eflin)[LingoNumber(1)], "-"):                                 break                                                            elif LingoGlobal.op_ne_b(eflin, ""):                                 gtlcnt = _movieScript.gTiles[_movieScript.gTiles.count]                                gtlcnt.tls.add(_global.value(eflin))
                                mattl = gtlcnt.tls[gtlcnt.tls.count]                                mattl[sz] = LingoGlobal.point(LingoNumber(1),LingoNumber(1))                                mattl[specs] = LingoList(LingoNumber(0))                                mattl[rendertype] = "customUnified"                                _movieScript.DRCustomMatList.add(mattl)                            tmp_efLn = efln                                                    ln = LingoGlobal.op_sub(efln,LingoNumber(1))                                                            tmp_ln = ln                            if _movieScript.gTiles.count >= LingoNumber(1):                 for tmp_del in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gTiles.count):                     del = tmp_del                    if _movieScript.gTiles[del].tls.count < LingoNumber(1):                         _movieScript.gTiles.deleteat(del)                    tmp_del = del                                                        _movieScript.setlastmatcat(_movieScript.gTiles.count)
        _movieScript.gTiles.add(LingoPropertyList(nm="Special",tls=LingoList()))
        spcind = _movieScript.gTiles.count        _movieScript.gTiles[spcind].tls.add(LingoPropertyList(nm="Rect Clear",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),placemethod="rect",color=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))
        _movieScript.gTiles[spcind].tls.add(LingoPropertyList(nm="SH pattern box",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),placemethod="rect",color=_global.color(LingoNumber(210),LingoNumber(0),LingoNumber(255))))
        _movieScript.gTiles[spcind].tls.add(LingoPropertyList(nm="SH grate box",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),placemethod="rect",color=_global.color(LingoNumber(160),LingoNumber(0),LingoNumber(255))))
        _movieScript.gTiles[spcind].tls.add(LingoPropertyList(nm="Alt Grate Box",sz=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs=LingoList(LingoNumber(0)),placemethod="rect",color=_global.color(LingoNumber(75),LingoNumber(75),LingoNumber(240))))
        _movieScript.setfirsttilecat(LingoGlobal.op_add(spcind,LingoNumber(1)))
        sav = _global.member("initImport")        _global.member("initImport").importfileinto(LingoGlobal.concat("Graphics",_global.the_dirSeparator,"Init.txt"))
        sav.text = LingoGlobal.concat(sav.text,LingoGlobal.RETURN,LingoGlobal.RETURN,_global.member("Drought Needed Init").text)        sav.name = "initImport"        _global.member("previewTiles").image = _global.image(LingoNumber(60000),LingoNumber(500),LingoNumber(1))        ptpos = LingoNumber(1)        _global.member("previewTilesDR").image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))        drpos = LingoNumber(1)        if LingoGlobal.ToBool(_movieScript.getboolconfig("More tile previews")):             _global.member("previewTilesDR").image = _global.image(LingoNumber(60000),LingoNumber(500),LingoNumber(1))                    for tmp_q in LingoGlobal.pyrange(LingoNumber(1), LingoGlobal.thenumberoflines_helper(sav.text)):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q])[LingoNumber(1)], "-"):                     vl = _global.value(_global.slice_helper(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q]),LingoNumber(2),LingoGlobal.lengthmember_helper(LingoGlobal.linemember_helper(sav.text)[q])))                    if LingoGlobal.op_eq_b(vl, LingoGlobal.VOID):                         _movieScript.writeexception("Tile Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Graphics folder."))                    else:                        _movieScript.gTiles.add(LingoPropertyList(nm=vl[LingoNumber(1)],clr=vl[LingoNumber(2)],tls=LingoList()))                                    elif LingoGlobal.op_eq_b(_global.value(LingoGlobal.linemember_helper(sav.text)[q]), LingoGlobal.VOID):                     _movieScript.writeexception("Tile Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Graphics folder."))                else:                    ad = _global.value(LingoGlobal.linemember_helper(sav.text)[q])                    debugline = LingoGlobal.linemember_helper(sav.text)[q]                    sav2 = _global.member("previewImprt")                    _global.member("previewImprt").importfileinto(LingoGlobal.concat("Graphics",_global.the_dirSeparator,ad.nm,".png"))
                    sav2.name = "previewImprt"                    if LingoGlobal.ToBool(_movieScript.checkdrinternal(ad.nm)):                         sav2.image = _global.member(ad.nm).image                                            calculatedheight = sav2.image.rect.height                    if LingoGlobal.op_eq_b(ad.tp, "voxelStruct"):                         calculatedheight = LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ad.sz.locv,LingoGlobal.op_mul(ad.bftiles,LingoNumber(2)))),ad.repeatl.count))                                            rct = LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_sub(calculatedheight,LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch),calculatedheight)                    if (LingoGlobal.op_add(LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1)) > _global.member("previewTiles").image.width and LingoGlobal.ToBool(_movieScript.getboolconfig("More tile previews"))):                         _global.member("previewTilesDR").image.copypixels(sav2.image,LingoGlobal.rect(drpos,LingoNumber(0),LingoGlobal.op_add(drpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),rct)
                        ad.ptpos = LingoGlobal.op_add(drpos,LingoNumber(60000))                        ad.addprop(category,_movieScript.gTiles.count)
                        if LingoGlobal.op_eq_b(ad.tags.getpos("notTile"), LingoNumber(0)):                             _movieScript.gTiles[_movieScript.gTiles.count].tls.add(ad)                        drpos = LingoGlobal.op_add(LingoGlobal.op_add(drpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1))                                            else:                        _global.member("previewTiles").image.copypixels(sav2.image,LingoGlobal.rect(ptpos,LingoNumber(0),LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),rct)
                        ad.ptpos = ptpos                        ad.addprop(category,_movieScript.gTiles.count)
                        if LingoGlobal.op_eq_b(ad.tags.getpos("notTile"), LingoNumber(0)):                             _movieScript.gTiles[_movieScript.gTiles.count].tls.add(ad)                        ptpos = LingoGlobal.op_add(LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1))                                                                        tmp_q = q                    _movieScript.lG = "1"        _movieScript.gProps = LingoList()        _movieScript.resetpropeditorprops()
        _movieScript.gPEcolors = LingoList()        sav = _global.member("initImport")        _global.member("initImport").importfileinto(LingoGlobal.concat("Props",_global.the_dirSeparator,"propColors.txt"))
        sav.name = "initImport"        for tmp_q in LingoGlobal.pyrange(LingoNumber(1), LingoGlobal.thenumberoflines_helper(sav.text)):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 _movieScript.gPEcolors.add(_global.value(LingoGlobal.linemember_helper(sav.text)[q]))            tmp_q = q                    sav = _global.member("initImport")        _global.member("initImport").importfileinto(LingoGlobal.concat("Props",_global.the_dirSeparator,"Init.txt"))
        sav.name = "initImport"        for tmp_q in LingoGlobal.pyrange(LingoNumber(1), LingoNumber(1000)):             q = tmp_q            _global.member(q,LingoNumber(2)).erase()
            tmp_q = q                    for tmp_q in LingoGlobal.pyrange(LingoNumber(1), LingoGlobal.thenumberoflines_helper(sav.text)):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q])[LingoNumber(1)], "-"):                     vl = _global.value(_global.slice_helper(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q]),LingoNumber(2),LingoGlobal.lengthmember_helper(LingoGlobal.linemember_helper(sav.text)[q])))                    if LingoGlobal.op_eq_b(vl, LingoGlobal.VOID):                         _movieScript.writeexception("Prop Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Props folder."))                    else:                        _movieScript.gProps.add(LingoPropertyList(nm=vl[LingoNumber(1)],clr=vl[LingoNumber(2)],prps=LingoList()))                                    elif LingoGlobal.op_eq_b(_global.value(LingoGlobal.linemember_helper(sav.text)[q]), LingoGlobal.VOID):                     _movieScript.writeexception("Prop Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Props folder."))                else:                    ad = _global.value(LingoGlobal.linemember_helper(sav.text)[q])                    strng = LingoGlobal.linemember_helper(sav.text)[q]                    ad.addprop(category,_movieScript.gProps.count)
                    if (LingoGlobal.op_eq_b(ad.tp, "standard") or LingoGlobal.op_eq_b(ad.tp, "variedStandard")):                         dp = LingoNumber(0)                        for tmp_i in LingoGlobal.pyrange(LingoNumber(1), ad.repeatl.count):                             i = tmp_i                            dp = LingoGlobal.op_add(dp,ad.repeatl[i])                            tmp_i = i                                                    ad.addprop(depth,dp)                    _movieScript.gProps[_movieScript.gProps.count].prps.add(ad)                            tmp_q = q                    gpagecount = LingoNumber(0)        gpagetick = LingoNumber(0)        for tmp_q in LingoGlobal.pyrange(_movieScript.getfirsttilecat(), _movieScript.gTiles.count):             q = tmp_q            for tmp_c in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gTiles[q].tls.count):                 c = tmp_c                if LingoGlobal.op_eq_b(gpagetick, LingoNumber(0)):                     gpagetick = LingoNumber(21)                    gpagecount = LingoGlobal.op_add(gpagecount,LingoNumber(1))                    _movieScript.gProps.add(LingoPropertyList(nm=LingoGlobal.concat("Tiles as props ",gpagecount),clr=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),prps=LingoList()))                tl = _movieScript.gTiles[q].tls[c]                rnddisf = _movieScript.getboolconfig("voxelStructRandomDisplace for tiles as props")                if (((LingoGlobal.op_eq_b(tl.tp, "voxelStruct") or (LingoGlobal.op_eq_b(tl.tp, "voxelStructRandomDisplaceVertical") and LingoGlobal.ToBool(rnddisf))) or (LingoGlobal.op_eq_b(tl.tp, "voxelStructRandomDisplaceHorizontal") and LingoGlobal.ToBool(rnddisf))) and LingoGlobal.op_eq_b(tl.tags.getpos("notProp"), LingoNumber(0))):                     ntp = ""                    ecat = ""                    ecbt = ""                    dct = ""                    cct = ""                    ccrt = ""                    rrt = ""                    rfxt = ""                    rfyt = ""                    cst = ""                    csbt = ""                    lst = ""                    lsbt = ""                    drt = ""                    inte = ""                    nmtp = ""                    if tl.tags.getpos("notMegaTrashProp") > LingoNumber(0):                         nmtp = "notMegaTrashProp"                                            if tl.tags.getpos("effectColorA") > LingoNumber(0):                         ecat = "effectColorA"                                            if tl.tags.getpos("effectColorB") > LingoNumber(0):                         ecbt = "effectColorB"                                            if tl.tags.getpos("colored") > LingoNumber(0):                         dct = "colored"                                            if tl.tags.getpos("customColor") > LingoNumber(0):                         cct = "customColor"                                            if tl.tags.getpos("customColorRainbow") > LingoNumber(0):                         ccrt = "customColorRainbow"                                            if tl.tags.getpos("randomRotat") > LingoNumber(0):                         rrt = "randomRotat"                                            if tl.tags.getpos("randomFlipX") > LingoNumber(0):                         rfxt = "randomFlipX"                                            if tl.tags.getpos("randomFlipY") > LingoNumber(0):                         rfyt = "randomFlipY"                                            if tl.tags.getpos("Circular Sign") > LingoNumber(0):                         cst = "Circular Sign"                                            if tl.tags.getpos("Circular Sign B") > LingoNumber(0):                         csbt = "Circular Sign B"                                            if tl.tags.getpos("Larger Sign") > LingoNumber(0):                         lst = "Larger Sign"                                            if tl.tags.getpos("Larger Sign B") > LingoNumber(0):                         lsbt = "Larger Sign B"                                            if tl.tags.getpos("notTrashProp") > LingoNumber(0):                         ntp = "notTrashProp"                                            if tl.tags.getpos("INTERNAL") > LingoNumber(0):                         inte = "INTERNAL"                                            if LingoGlobal.ToBool(_movieScript.getboolconfig("Tiles as props fixes")):                         if tl.rnd > LingoNumber(1):                             ad = LingoPropertyList(nm=tl.nm,tp="variedStandard",colortreatment="standard",sz=LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),depth=LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),repeatl=tl.repeatl,vars=tl.rnd,random=LingoNumber(1),tags=LingoList("Tile",ntp,ecat,ecbt,dct,cct,ccrt,rrt,rfxt,rfyt,cst,csbt,lst,lsbt,inte,nmtp),layerexceptions=LingoList(),notes=LingoList("Tile as prop"))                                                    else:                            ad = LingoPropertyList(nm=tl.nm,tp="standard",colortreatment="standard",sz=LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),depth=LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),repeatl=tl.repeatl,tags=LingoList("Tile",ntp,ecat,ecbt,dct,cct,ccrt,rrt,rfxt,rfyt,cst,csbt,lst,lsbt,inte,nmtp),layerexceptions=LingoList(),notes=LingoList("Tile as prop"))                                                                        else:                        ad = LingoPropertyList(nm=tl.nm,tp="standard",colortreatment="standard",sz=LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),depth=LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),repeatl=tl.repeatl,tags=LingoList("Tile",ntp,inte,nmtp),layerexceptions=LingoList(),notes=LingoList("Tile as prop"))                                            ad.addprop(category,_movieScript.gProps.count)
                    _movieScript.gProps[_movieScript.gProps.count].prps.add(ad)
                    gpagetick = LingoGlobal.op_sub(gpagetick,LingoNumber(1))                                    tmp_c = c                            tmp_q = q                    for tmp_prq in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gProps.count):             prq = tmp_prq            if _movieScript.gProps[prq].prps.count <= LingoNumber(0):                 _movieScript.gProps.deleteat(prq)            tmp_prq = prq                    _movieScript.gProps.add(LingoPropertyList(nm="Rope type props",clr=_global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Wire",tp="rope",depth=LingoNumber(0),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(3),collisiondepth=LingoNumber(0),segrad=LingoNumber(1),grav=LingoNumber(0.5000),friction=LingoNumber(0.5000),airfric=LingoNumber(0.9000),stiff=LingoNumber(0),previewcolor=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),previewevery=LingoNumber(4),edgedirection=LingoNumber(0),rigid=LingoNumber(0),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Tube",tp="rope",depth=LingoNumber(4),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(10),collisiondepth=LingoNumber(2),segrad=LingoNumber(4.5000),grav=LingoNumber(0.5000),friction=LingoNumber(0.5000),airfric=LingoNumber(0.9000),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),previewevery=LingoNumber(2),edgedirection=LingoNumber(5),rigid=LingoNumber(1.6000),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="ThickWire",tp="rope",depth=LingoNumber(3),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(4),collisiondepth=LingoNumber(1),segrad=LingoNumber(2),grav=LingoNumber(0.5000),friction=LingoNumber(0.8000),airfric=LingoNumber(0.9000),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(255),LingoNumber(255),LingoNumber(0)),previewevery=LingoNumber(2),edgedirection=LingoNumber(0),rigid=LingoNumber(0.2000),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="RidgedTube",tp="rope",depth=LingoNumber(4),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(5),collisiondepth=LingoNumber(2),segrad=LingoNumber(5),grav=LingoNumber(0.5000),friction=LingoNumber(0.3000),airfric=LingoNumber(0.7000),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)),previewevery=LingoNumber(2),edgedirection=LingoNumber(0),rigid=LingoNumber(0.1000),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Fuel Hose",tp="rope",depth=LingoNumber(5),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(16),collisiondepth=LingoNumber(1),segrad=LingoNumber(7),grav=LingoNumber(0.5000),friction=LingoNumber(0.8000),airfric=LingoNumber(0.9000),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0)),previewevery=LingoNumber(1),edgedirection=LingoNumber(1.4000),rigid=LingoNumber(0.2000),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Broken Fuel Hose",tp="rope",depth=LingoNumber(6),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(16),collisiondepth=LingoNumber(1),segrad=LingoNumber(7),grav=LingoNumber(0.5000),friction=LingoNumber(0.8000),airfric=LingoNumber(0.9000),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0)),previewevery=LingoNumber(1),edgedirection=LingoNumber(1.4000),rigid=LingoNumber(0.2000),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Large Chain",tp="rope",depth=LingoNumber(9),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(28),collisiondepth=LingoNumber(3),segrad=LingoNumber(9.5000),grav=LingoNumber(0.9000),friction=LingoNumber(0.8000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.0000),rigid=LingoNumber(0.0000),selfpush=LingoNumber(6.5000),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Large Chain 2",tp="rope",depth=LingoNumber(9),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(28),collisiondepth=LingoNumber(3),segrad=LingoNumber(9.5000),grav=LingoNumber(0.9000),friction=LingoNumber(0.8000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(20),LingoNumber(205),LingoNumber(0)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.0000),rigid=LingoNumber(0.0000),selfpush=LingoNumber(6.5000),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Bike Chain",tp="rope",depth=LingoNumber(9),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(38),collisiondepth=LingoNumber(3),segrad=LingoNumber(16.5000),grav=LingoNumber(0.9000),friction=LingoNumber(0.8000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(100),LingoNumber(100),LingoNumber(100)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.0000),rigid=LingoNumber(0.0000),selfpush=LingoNumber(16.5000),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Zero-G Tube",tp="rope",depth=LingoNumber(4),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(10),collisiondepth=LingoNumber(2),segrad=LingoNumber(4.5000),grav=LingoNumber(0),friction=LingoNumber(0.5000),airfric=LingoNumber(0.9000),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),previewevery=LingoNumber(2),edgedirection=LingoNumber(0),rigid=LingoNumber(0.6000),selfpush=LingoNumber(2),sourcepush=LingoNumber(0.5000)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Zero-G Wire",tp="rope",depth=LingoNumber(0),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(8),collisiondepth=LingoNumber(0),segrad=LingoNumber(1),grav=LingoNumber(0),friction=LingoNumber(0.5000),airfric=LingoNumber(0.9000),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),previewevery=LingoNumber(2),edgedirection=LingoNumber(0.3000),rigid=LingoNumber(0.5000),selfpush=LingoNumber(1.2000),sourcepush=LingoNumber(0.5000)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Fat Hose",tp="rope",depth=LingoNumber(6),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(40),collisiondepth=LingoNumber(3),segrad=LingoNumber(20),grav=LingoNumber(0.9000),friction=LingoNumber(0.6000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(0),LingoNumber(100),LingoNumber(150)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.1000),rigid=LingoNumber(0.2000),selfpush=LingoNumber(10),sourcepush=LingoNumber(0.1000)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Wire Bunch",tp="rope",depth=LingoNumber(9),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(50),collisiondepth=LingoNumber(3),segrad=LingoNumber(20),grav=LingoNumber(0.9000),friction=LingoNumber(0.6000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(255),LingoNumber(100),LingoNumber(150)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.1000),rigid=LingoNumber(0.2000),selfpush=LingoNumber(10),sourcepush=LingoNumber(0.1000)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Wire Bunch 2",tp="rope",depth=LingoNumber(9),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(50),collisiondepth=LingoNumber(3),segrad=LingoNumber(20),grav=LingoNumber(0.9000),friction=LingoNumber(0.6000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(255),LingoNumber(100),LingoNumber(150)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.1000),rigid=LingoNumber(0.2000),selfpush=LingoNumber(10),sourcepush=LingoNumber(0.1000)))
        _movieScript.gProps.add(LingoPropertyList(nm="Drought Rope Props",clr=_global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Big Big Pipe",tp="rope",depth=LingoNumber(6),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(40),collisiondepth=LingoNumber(3),segrad=LingoNumber(20),grav=LingoNumber(0.9000),friction=LingoNumber(0.6000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(50),LingoNumber(150),LingoNumber(210)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.1000),rigid=LingoNumber(0.2000),selfpush=LingoNumber(10),sourcepush=LingoNumber(0.1000)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Ring Chain",tp="rope",depth=LingoNumber(6),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(40),collisiondepth=LingoNumber(3),segrad=LingoNumber(20),grav=LingoNumber(0.9000),friction=LingoNumber(0.6000),airfric=LingoNumber(0.9500),stiff=LingoNumber(1),previewcolor=_global.color(LingoNumber(100),LingoNumber(200),LingoNumber(0)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0.1000),rigid=LingoNumber(0.2000),selfpush=LingoNumber(10),sourcepush=LingoNumber(0.1000)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Christmas Wire",tp="rope",depth=LingoNumber(0),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(17),collisiondepth=LingoNumber(0),segrad=LingoNumber(8.5000),grav=LingoNumber(0.5000),friction=LingoNumber(0.5000),airfric=LingoNumber(0.9000),stiff=LingoNumber(0),previewcolor=_global.color(LingoNumber(200),LingoNumber(0),LingoNumber(200)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0),rigid=LingoNumber(0),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Ornate Wire",tp="rope",depth=LingoNumber(0),tags=LingoList(),notes=LingoList(),segmentlength=LingoNumber(17),collisiondepth=LingoNumber(0),segrad=LingoNumber(8.5000),grav=LingoNumber(0.5000),friction=LingoNumber(0.5000),airfric=LingoNumber(0.9000),stiff=LingoNumber(0),previewcolor=_global.color(LingoNumber(0),LingoNumber(200),LingoNumber(200)),previewevery=LingoNumber(1),edgedirection=LingoNumber(0),rigid=LingoNumber(0),selfpush=LingoNumber(0),sourcepush=LingoNumber(0)))
        _movieScript.gProps.add(LingoPropertyList(nm="Long props",clr=_global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Cabinet Clamp",tp="long",depth=LingoNumber(0),tags=LingoList(),notes=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Drill Suspender",tp="long",depth=LingoNumber(5),tags=LingoList(),notes=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Thick Chain",tp="long",depth=LingoNumber(0),tags=LingoList(),notes=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Drill",tp="long",depth=LingoNumber(10),tags=LingoList(),notes=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Piston",tp="long",depth=LingoNumber(4),tags=LingoList(),notes=LingoList()))
        _movieScript.gProps.add(LingoPropertyList(nm="Drought Long Props",clr=_global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Stretched Pipe",tp="long",depth=LingoNumber(0),tags=LingoList(),notes=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Twisted Thread",tp="long",depth=LingoNumber(0),tags=LingoList(),notes=LingoList()))
        _movieScript.gProps[_movieScript.gProps.count].prps.add(LingoPropertyList(nm="Stretched Wire",tp="long",depth=LingoNumber(0),tags=LingoList(),notes=LingoList()))
        _movieScript.gTrashPropOptions = LingoList()        _movieScript.gMegaTrash = LingoList()        for tmp_q in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gProps.count):             q = tmp_q            for tmp_c in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gProps[q].prps.count):                 c = tmp_c                _movieScript.gProps[q].prps[c].addprop(settings,LingoPropertyList())
                _movieScript.gProps[q].prps[c].settings.addprop(renderorder,LingoNumber(0))
                _movieScript.gProps[q].prps[c].settings.addprop(seed,LingoNumber(500))
                _movieScript.gProps[q].prps[c].settings.addprop(rendertime,LingoNumber(0))
                match _movieScript.gProps[q].prps[c].tp.lower():                     case "standard" | "variedstandard":                        if LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].colortreatment, "bevel"):                             _movieScript.gProps[q].prps[c].notes.add("The highlights and shadows on this prop are generated by code, so it can be rotated to any degree and they will remain correct.")                        else:                            _movieScript.gProps[q].prps[c].notes.add("Be aware that shadows and highlights will not rotate with the prop, so extreme rotations may cause incorrect shading.")                        if LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tp, "variedStandard"):                             _movieScript.gProps[q].prps[c].settings.addprop(variation,LingoGlobal.op_eq(_movieScript.gProps[q].prps[c].random,LingoNumber(0)))
                            if LingoGlobal.ToBool(_movieScript.gProps[q].prps[c].random):                                 _movieScript.gProps[q].prps[c].notes.add("Will put down a random variation. A specific variation can be selected from settings ('N' key).")                            else:                                _movieScript.gProps[q].prps[c].notes.add("This prop comes with many variations. Which variation can be selected from settings ('N' key).")                                                    else:                            if (((_movieScript.gProps[q].prps[c].sz.loch < LingoNumber(5) and _movieScript.gProps[q].prps[c].sz.locv < LingoNumber(5)) and LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tags.getpos("INTERNAL"), LingoNumber(0))) and (LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tags.getpos("notTrashProp"), LingoNumber(0)) or LingoGlobal.op_eq_b(_movieScript.getboolconfig("notTrashProp fix"), LingoGlobal.FALSE))):                                 _movieScript.gTrashPropOptions.add(LingoGlobal.point(q,c))
                                if (_movieScript.gProps[q].prps[c].sz.loch < LingoNumber(3) or _movieScript.gProps[q].prps[c].sz.locv < LingoNumber(3)):                                     _movieScript.gTrashPropOptions.add(LingoGlobal.point(q,c))                                                            if (((((((_movieScript.gProps[q].prps[c].sz.loch >= LingoNumber(4) and _movieScript.gProps[q].prps[c].sz.locv >= LingoNumber(4)) and _movieScript.gProps[q].prps[c].sz.loch <= LingoNumber(20)) and _movieScript.gProps[q].prps[c].sz.locv <= LingoNumber(20)) and LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tags.getpos("colored"), LingoNumber(0))) and LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tags.getpos("effectColorB"), LingoNumber(0))) and LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tags.getpos("effectColorA"), LingoNumber(0))) and LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tags.getpos("notMegaTrashProp"), LingoNumber(0))):                                 _movieScript.gMegaTrash.add(LingoGlobal.point(q,c))                                                                        case "rope":                        _movieScript.gProps[q].prps[c].settings.addprop(release,LingoNumber(0))                    case "varieddecal" | "variedsoft":                        _movieScript.gProps[q].prps[c].settings.addprop(variation,LingoGlobal.op_eq(_movieScript.gProps[q].prps[c].random,LingoNumber(0)))
                        _movieScript.gProps[q].prps[c].settings.addprop(customdepth,_movieScript.gProps[q].prps[c].depth)
                        if LingoGlobal.ToBool(_movieScript.gProps[q].prps[c].random):                             _movieScript.gProps[q].prps[c].notes.add("Will put down a random variation. A specific variation can be selected from settings ('N' key).")                        else:                            _movieScript.gProps[q].prps[c].notes.add("This prop comes with many variations. Which variation can be selected from settings ('N' key).")                        if (LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tp, "variedSoft") or LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tp, "coloredSoft")):                             if LingoGlobal.ToBool(_movieScript.gProps[q].prps[c].colorize):                                 _movieScript.gProps[q].prps[c].settings.addprop(applycolor,LingoNumber(1))
                                _movieScript.gProps[q].prps[c].notes.add("It's recommended to render this prop after the effects if the color is activated, as the effects won't affect the color layers.")                                                                        case "simpledecal" | "soft" | "softeffect" | "antimatter" | "coloredsoft":                        _movieScript.gProps[q].prps[c].settings.addprop(customdepth,_movieScript.gProps[q].prps[c].depth)                                    if (((LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tp, "soft") or LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tp, "softEffect")) or LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tp, "variedSoft")) or LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].tp, "coloredSoft")):                     if LingoGlobal.op_eq_b(_movieScript.gProps[q].prps[c].selfshade, LingoNumber(1)):                         _movieScript.gProps[q].prps[c].notes.add("The highlights and shadows on this prop are generated by code, so it can be rotated to any degree and they will remain correct.")                    else:                        _movieScript.gProps[q].prps[c].notes.add("Be aware that shadows and highlights will not rotate with the prop, so extreme rotations may cause incorrect shading.")                                    match _movieScript.gProps[q].prps[c].nm.lower():                     case "wire" | "zero-g wire" | "straight wire" | "straight zero-g wire":                        _movieScript.gProps[q].prps[c].settings.addprop(thickness,LingoNumber(2))
                        _movieScript.gProps[q].prps[c].notes.add("The thickness of the wire can be set in settings.")                    case "zero-g tube" | "straight zero-g tube":                        _movieScript.gProps[q].prps[c].settings.addprop(applycolor,LingoNumber(0))
                        _movieScript.gProps[q].prps[c].notes.add("The tube can be colored white through the settings.")                                    for tmp_t in _movieScript.gProps[q].prps[c].tags:                     t = tmp_t                    match t.lower():                         case "customcolor":                            _movieScript.gProps[q].prps[c].settings.addprop(color,LingoNumber(0))
                            _movieScript.gProps[q].prps[c].notes.add("Custom color available")                        case "customcolorrainbow":                            _movieScript.gProps[q].prps[c].settings.addprop(color,LingoNumber(1))
                            _movieScript.gProps[q].prps[c].notes.add("Custom color available")                                                            tmp_c = c                            tmp_q = q                    _movieScript.gEffects = LingoList()        savef = _global.member("effectsInit")        _global.member("effectsInit").importfileinto("effectsInit.txt")
        savef.name = "effectsInit"        if ((LingoGlobal.op_eq_b(savef.text, LingoGlobal.VOID) or LingoGlobal.op_eq_b(savef.text, "")) or LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(savef.text)[LingoNumber(1)], "Rain World Community Editor; V.0.4.21; Editor effects initialisation file")):             fileef = _global.new(_global.xtra("fileio"))            fileef.createfile(LingoGlobal.concat(_global.the_moviePath,"effectsInit.txt"))
            fileef.openfile(LingoGlobal.concat(_global.the_moviePath,"effectsInit.txt"),LingoNumber(0))
            fileef.writestr(_global.member("baseEffectsInit").text)
            fileef.writereturn(windows)
            savef.text = _global.member("baseEffectsInit").text                    for tmp_ln in LingoGlobal.pyrange(LingoNumber(1), LingoGlobal.thenumberoflines_helper(savef.text)):             ln = tmp_ln            lin = LingoGlobal.linemember_helper(savef.text)[ln]            if LingoGlobal.op_ne_b(lin, ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(lin)[LingoNumber(1)], "-"):                     _movieScript.gEffects.add(LingoPropertyList(nm=_global.slice_helper(LingoGlobal.charmember_helper(lin),LingoNumber(2),LingoGlobal.lengthmember_helper(lin)),efs=LingoList()))
                    for tmp_efLn in LingoGlobal.pyrange(LingoGlobal.op_add(ln,LingoNumber(1)), LingoGlobal.thenumberoflines_helper(savef.text)):                         efln = tmp_efLn                        eflin = LingoGlobal.linemember_helper(savef.text)[efln]                        if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(eflin)[LingoNumber(1)], "-"):                             break                                                    elif LingoGlobal.op_ne_b(eflin, ""):                             _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm=eflin))                        tmp_efLn = efln                                            ln = LingoGlobal.op_sub(efln,LingoNumber(1))                                                tmp_ln = ln                    if _movieScript.gEffects.count >= LingoNumber(1):             for tmp_del in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gEffects.count):                 del = tmp_del                if _movieScript.gEffects[del].efs.count < LingoNumber(1):                     _movieScript.gEffects.deleteat(del)                tmp_del = del                                    if _movieScript.gEffects.count < LingoNumber(1):             _movieScript.gEffects.add(LingoPropertyList(nm="Natural",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Slime"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Melt"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Rust"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Barnacles"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Rubble"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="DecalsOnlySlime"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Erosion",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Roughen"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="SlimeX3"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Super Melt"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Destructive Melt"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Erode"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Super Erode"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="DaddyCorruption"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Artificial",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Wires"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Chains"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Plants",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Root Grass"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Seed Pods"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Growers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Cacti"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Rain Moss"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Hang Roots"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Grass"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Plants2",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Arm Growers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Horse Tails"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Circuit Plants"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Feather Plants"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Thorn Growers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Rollers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Garbage Spirals"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Plants3",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Thick Roots"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Shadow Plants"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Plants (Individual)",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Fungi Flowers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Lighthouse Flowers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Fern"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Giant Mushroom"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Sprawlbush"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="featherFern"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Fungus Tree"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Paint Effects",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="BlackGoo"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="DarkSlime"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Restoration",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Restore As Scaffolding"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Ceramic Chaos"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Drought Plants",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Hang Roots"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Thick Roots"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Shadow Plants"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Lighthouse Flowers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Fungi Flowers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Root Plants"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Drought Plants 2",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Foliage"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Mistletoe"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="High Fern"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="High Grass"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Little Flowers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Wastewater Mold"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Drought Plants 3",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Spinets"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Small Springs"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Mini Growers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Clovers"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Reeds"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Lavenders"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Dense Mold"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Drought Erosion",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Ultra Super Erode"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Impacts"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Drought Paint Effects",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Super BlackGoo"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Stained Glass Properties"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Drought Natural",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Barnacles"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Rubble"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Fat Slime"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Drought Artificial",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Assorted Trash"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Wires"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Colored Chains"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Ring Chains"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Dakras Plants",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Left Facing Kelp"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Right Facing Kelp"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Mixed Facing Kelp"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Bubble Grower"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Moss Wall"))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Club Moss"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Leo Plants",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Ivy"))
            _movieScript.gEffects.add(LingoPropertyList(nm="Nautillo Plants",efs=LingoList()))
            _movieScript.gEffects[_movieScript.gEffects.count].efs.add(LingoPropertyList(nm="Fuzzy Growers"))        _movieScript.gEEprops = LingoPropertyList(lastkeys=LingoList(),keys=LingoList(),lstmsps=LingoGlobal.point(LingoNumber(0),LingoNumber(0)),effects=LingoList(),emPos=LingoGlobal.point(LingoNumber(1),LingoNumber(1)),editeffect=LingoNumber(0),selectediteffect=LingoNumber(0),mode="createNew",brushsize=LingoNumber(5))        _movieScript.gLightEProps = LingoPropertyList(pos=LingoGlobal.point(LingoGlobal.op_div(LingoNumber(1040),LingoNumber(2)),LingoGlobal.op_div(LingoNumber(800),LingoNumber(2))),rot=LingoNumber(0),sz=LingoGlobal.point(LingoNumber(50),LingoNumber(70)),col=LingoNumber(1),keys=LingoNumber(0),lastkeys=LingoNumber(0),lasttm=LingoNumber(0),lightangle=LingoNumber(180),flatness=LingoNumber(1),lightrect=LingoGlobal.rect(LingoNumber(1000),LingoNumber(1000),-LingoNumber(1000),-LingoNumber(1000)),paintshape="pxl")        _movieScript.gLOprops = LingoPropertyList(mouse=LingoNumber(0),lastmouse=LingoNumber(0),mouseclick=LingoNumber(0),pal=LingoNumber(1),pals=LingoList(LingoPropertyList(detcol=_global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)))),ecol1=LingoNumber(1),ecol2=LingoNumber(2),totecols=LingoNumber(5),tileseed=_global.random(LingoNumber(400)),colglows=LingoList(LingoNumber(0),LingoNumber(0)),size=LingoGlobal.point(cols,rows),extratiles=LingoList(LingoNumber(12),LingoNumber(3),LingoNumber(12),LingoNumber(5)),light=LingoNumber(1))        _global.new_script("levelEdit_parentscript",LingoList(LingoNumber(1)))
        _global.new_script("levelEdit_parentscript",LingoList(LingoNumber(2)))
        _movieScript.gCameraProps = LingoPropertyList(cameras=LingoList(LingoGlobal.op_sub(LingoGlobal.point(LingoGlobal.op_mul(_movieScript.gLOprops.size.loch,LingoNumber(10)),LingoGlobal.op_mul(_movieScript.gLOprops.size.locv,LingoNumber(10))),LingoGlobal.point(LingoGlobal.op_mul(LingoNumber(35),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoNumber(20))))),selectedcamera=LingoNumber(0),quads=LingoList(LingoList(LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)))),keys=LingoPropertyList(n=LingoNumber(0),d=LingoNumber(0),e=LingoNumber(0),p=LingoNumber(0)),lastkeys=LingoPropertyList(n=LingoNumber(0),d=LingoNumber(0),e=LingoNumber(0),p=LingoNumber(0)))        _movieScript.gSEprops = LingoPropertyList(sounds=LingoGlobal.VOID,ambientsounds=LingoList(),songs=LingoList(),rects=LingoList(),pickedupsound="NONE")        for tmp_mem in LingoList("rainBowMask","blackOutImg1","blackOutImg2"):             mem = tmp_mem            _global.member(mem).image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))                    _global.member("lightImage").image = _global.image(LingoGlobal.op_add(LingoGlobal.op_mul(_movieScript.gLOprops.size.loch,LingoNumber(20)),LingoNumber(300)),LingoGlobal.op_add(LingoGlobal.op_mul(_movieScript.gLOprops.size.locv,LingoNumber(20)),LingoNumber(300)),LingoNumber(1))        for tmp_i in LingoGlobal.pyrange(LingoNumber(0), LingoNumber(29)):             i = tmp_i            _global.member(LingoGlobal.concat("layer",i)).image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            _global.member(LingoGlobal.concat("layer",i,"sh")).image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            _global.member(LingoGlobal.concat("gradientA",i)).image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            _global.member(LingoGlobal.concat("gradientB",i)).image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            _global.member(LingoGlobal.concat("layer",i,"dc")).image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            _global.member("dumpImage").image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            _global.member("finalDecalImage").image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            _global.member("GradientOutput").image = _global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            tmp_i = i                    if LingoGlobal.ToBool(_movieScript.getboolconfig("Large trash debug log")):             for tmp_tr in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gTrashPropOptions.count):                 tr = tmp_tr                _global.member("DEBUGTR").text = LingoGlobal.concat(_global.member("DEBUGTR").text,LingoGlobal.RETURN,_movieScript.gProps[_movieScript.gTrashPropOptions[tr].loch].prps[_movieScript.gTrashPropOptions[tr].locv].nm)                tmp_tr = tr                            fileopener = _global.new(_global.xtra("fileio"))            fileopener.openfile(LingoGlobal.concat(_global.the_moviePath,"largeTrashLog.txt"),LingoNumber(0))
            fileopener.writestr(_global.member("DEBUGTR").text)
            fileopener.writereturn(windows)                return None            