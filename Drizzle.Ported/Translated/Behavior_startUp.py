from Drizzle.Runtime import *## Behavior script: startUp#class startUp(LingoBehaviorScript):     def __init__(self):         super().__init__()            def exitframe(self):         fileco = None        g = None        fac = None        screenresolutionpoint = None        screensize = None        midpos = None        windowrect = None        cols = None        rows = None        q = None        ql = None        c = None        l = None        savlm = None        ln = None        lin = None        efln = None        eflin = None        gtlcnt = None        mattl = None        del = None        spcind = None        sav = None        ptpos = None        drpos = None        vl = None        ad = None        debugline = None        sav2 = None        calculatedheight = None        rct = None        strng = None        dp = None        i = None        gpagecount = None        gpagetick = None        tl = None        rnddisf = None        ntp = None        ecat = None        ecbt = None        dct = None        cct = None        ccrt = None        rrt = None        rfxt = None        rfyt = None        cst = None        csbt = None        lst = None        lsbt = None        drt = None        inte = None        nmtp = None        prq = None        t = None        savef = None        fileef = None        mem = None        tr = None        fileopener = None        self._global.member("editorConfig").importfileinto("editorConfig.txt")
        if ((LingoGlobal.op_eq_b(self._global.member("editorConfig").text, LingoGlobal.VOID) or LingoGlobal.op_eq_b(self._global.member("editorConfig").text, "")) or LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(self._global.member("editorConfig").text)[LingoNumber(1)], "Rain World Community Editor; V.0.4.21; Editor configuration file")):             fileco = self._global.new(self._global.xtra("fileio"))            fileco.createfile(LingoGlobal.concat(self._global.the_moviePath,"editorConfig.txt"))
            fileco.openfile(LingoGlobal.concat(self._global.the_moviePath,"editorConfig.txt"),LingoNumber(0))
            fileco.writestr(self._global.member("baseConfig").text)
            fileco.writereturn(windows)
            self._global.member("editorConfig").text = self._global.member("baseConfig").text            self._global._movie.go(LingoNumber(1))        self._movieScript.clearlogs()
        if ((LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(56))) and LingoGlobal.ToBool(self._global._key.keypressed(LingoNumber(48)))) and LingoGlobal.op_ne_b(self._global._movie.window.sizestate, minimized)):             self._global._player.appminimize()        self._global.self._global.clearglobals()
        self._global._movie.exitlock = LingoGlobal.TRUE        self._movieScript.lvlPropOutput = LingoGlobal.FALSE        self._movieScript.initdrinternal()
        self._movieScript.gFullRender = LingoNumber(1)        self._movieScript.gViewRender = LingoNumber(1)        self._movieScript.DRLastTL = LingoNumber(1)        self._movieScript.gMassRenderL = LingoList()        self._movieScript.gLOADPATH = LingoList()        self._movieScript.gLevel = LingoPropertyList(dict(timelimit = LingoNumber(4800),defaultterrain = LingoNumber(1),maxflies = LingoNumber(10),flyspawnrate = LingoNumber(50),lizards = LingoList(),ambientsounds = LingoList(),music = "NONE",tags = LingoList(),lighttype = "Static",waterdrips = LingoNumber(1),lightrect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1040),LingoNumber(800)),matrix = LingoList()))        self._global._movie.window.appearanceoptions.border = none        self._global._movie.window.resizable = LingoGlobal.FALSE        self._movieScript.gLoadedName = "New Project"        self._global.member("level Name").text = "New Project"        self._movieScript.gImgXtra = self._global.xtra("ImgXtra").new()        g = LingoNumber(21)        if LingoGlobal.op_eq_b(g, LingoNumber(2)):             self._movieScript.gSaveProps = LingoList(self._global.bascreeninfo("width"),self._global.bascreeninfo("height"),self._global.bascreeninfo("depth"))            fac = LingoGlobal.op_div(self._movieScript.gSaveProps[LingoNumber(1)].float,self._movieScript.gSaveProps[LingoNumber(2)].float)            screenresolutionpoint = self._global._system.desktoprectlist            self._global.basetdisplay(screenresolutionpoint.loch,screenresolutionpoint.locv,LingoNumber(32),"temp",LingoGlobal.FALSE)
            screensize = LingoGlobal.op_div(self._global._system.desktoprectlist,LingoNumber(2))            midpos = LingoGlobal.op_div(screenresolutionpoint,LingoNumber(2))            windowrect = LingoGlobal.rect(LingoGlobal.op_sub(midpos,screensize),LingoGlobal.op_add(midpos,screensize))            self._global._movie.window.rect = windowrect            self._global._movie.stage.drawrect = windowrect                    else:            self._movieScript.gSaveProps = LingoList(LingoNumber(1),LingoNumber(1),LingoNumber(1))                    self._movieScript.solidMtrx = LingoList()        cols = LingoNumber(72)        rows = LingoNumber(43)        self._movieScript.gLEProps = LingoPropertyList(dict(matrix = LingoList(),leveleditors = LingoList(),toolmatrix = LingoList(),campos = LingoGlobal.point(LingoNumber(0),LingoNumber(0))))        self._movieScript.gLEProps.toolmatrix.add(LingoList("inverse","paintWall","paintAir","slope"))
        self._movieScript.gLEProps.toolmatrix.add(LingoList("floor","squareWall","squareAir","move"))
        self._movieScript.gLEProps.toolmatrix.add(LingoList("rock","spear","crack",""))
        self._movieScript.gLEProps.toolmatrix.add(LingoList("horBeam","verBeam","glass","copyBack"))
        self._movieScript.gLEProps.toolmatrix.add(LingoList("shortCutEntrance","shortCut","lizardHole","playerSpawn"))
        self._movieScript.gLEProps.toolmatrix.add(LingoList("forbidbats","","hive","waterFall"))
        self._movieScript.gLEProps.toolmatrix.add(LingoList("scavengerHole","WHAMH","garbageHole","wormGrass"))
        self._movieScript.gLEProps.toolmatrix.add(LingoList("workLayer","flip","mirrorToggle","setMirrorPoint"))
        self._movieScript.resetgenveditorprops()
        tmp_q=int(LingoNumber(1))        while tmp_q < cols:             q = tmp_q            ql = LingoList()            tmp_c=int(LingoNumber(1))            while tmp_c < rows:                 c = tmp_c                ql.add(LingoList(LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(0),LingoList())))
                tmp_c = c                tmp_c += 1                            self._movieScript.gLEProps.matrix.add(ql)
            tmp_q = q            tmp_q += 1                    self._movieScript.gBlurOptions = LingoPropertyList(dict(blurlight = LingoNumber(0),blursky = LingoNumber(0)))        self._movieScript.gTEprops = LingoPropertyList(dict(lastkeys = LingoList(),keys = LingoList(),worklayer = LingoNumber(1),lstmsps = LingoGlobal.point(LingoNumber(0),LingoNumber(0)),tlmatrix = LingoList(),defaultmaterial = "Concrete",tooltype = "material",tooldata = "Big Metal",tmPos = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),tmsavposl = LingoList(),specialedit = LingoNumber(0)))        tmp_q=int(LingoNumber(1))        while tmp_q < cols:             q = tmp_q            l = LingoList()            tmp_c=int(LingoNumber(1))            while tmp_c < rows:                 c = tmp_c                l.add(LingoList(LingoPropertyList(dict(tp = "default",data = LingoNumber(0))),LingoPropertyList(dict(tp = "default",data = LingoNumber(0))),LingoPropertyList(dict(tp = "default",data = LingoNumber(0)))))
                tmp_c = c                tmp_c += 1                            self._movieScript.gTEprops.tlmatrix.add(l)
            tmp_q = q            tmp_q += 1                    self._global.member("layerText").text = "Layer:1"        self._movieScript.gTiles = LingoList()        self._movieScript.gTiles.add(LingoPropertyList(dict(nm = "Materials",tls = LingoList())))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Standard",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(150),LingoNumber(150),LingoNumber(150)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Concrete",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(150),LingoNumber(255),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "RainStone",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Bricks",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(200),LingoNumber(150),LingoNumber(100)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "BigMetal",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Tiny Signs",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(255),LingoNumber(200),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Scaffolding",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(60),LingoNumber(60),LingoNumber(40)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Dense Pipes",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "densePipeType",color = self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(150)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "SuperStructure",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(160),LingoNumber(180),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "SuperStructure2",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(190),LingoNumber(160),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Tiled Stone",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(100),LingoNumber(0),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Chaotic Stone",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Small Pipes",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "pipeType",color = self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Trash",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "pipeType",color = self._global.color(LingoNumber(90),LingoNumber(255),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Invisible",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "invisibleI",color = self._global.color(LingoNumber(200),LingoNumber(200),LingoNumber(200)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "LargeTrash",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "largeTrashType",color = self._global.color(LingoNumber(175),LingoNumber(30),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "3DBricks",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Random Machines",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(72),LingoNumber(116),LingoNumber(80)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Dirt",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "dirtType",color = self._global.color(LingoNumber(124),LingoNumber(72),LingoNumber(52)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Ceramic Tile",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "ceramicType",color = self._global.color(LingoNumber(60),LingoNumber(60),LingoNumber(100)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Temple Stone",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(0),LingoNumber(120),LingoNumber(180)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Circuits",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "densePipeType",color = self._global.color(LingoNumber(0),LingoNumber(150),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(1)].tls.add(LingoPropertyList(dict(nm = "Ridge",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "ridgeType",color = self._global.color(LingoNumber(200),LingoNumber(15),LingoNumber(60)))))
        self._movieScript.gTiles.add(LingoPropertyList(dict(nm = "Drought Materials",tls = LingoList())))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Steel",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(220),LingoNumber(170),LingoNumber(195)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "4Mosaic",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(227),LingoNumber(76),LingoNumber(13)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Color A Ceramic",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "ceramicAType",color = self._global.color(LingoNumber(120),LingoNumber(0),LingoNumber(90)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Color B Ceramic",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "ceramicBType",color = self._global.color(LingoNumber(0),LingoNumber(175),LingoNumber(175)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Random Pipes",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "randomPipesType",color = self._global.color(LingoNumber(80),LingoNumber(0),LingoNumber(140)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Rocks",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "rockType",color = self._global.color(LingoNumber(185),LingoNumber(200),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Rough Rock",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "roughRock",color = self._global.color(LingoNumber(155),LingoNumber(170),LingoNumber(0)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Random Metal",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(180),LingoNumber(10),LingoNumber(10)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Cliff",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(75),LingoNumber(75),LingoNumber(75)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Non-Slip Metal",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(180),LingoNumber(80),LingoNumber(80)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Stained Glass",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(180),LingoNumber(80),LingoNumber(180)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Sandy Dirt",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "sandy",color = self._global.color(LingoNumber(180),LingoNumber(180),LingoNumber(80)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "MegaTrash",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "megaTrashType",color = self._global.color(LingoNumber(135),LingoNumber(10),LingoNumber(255)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Shallow Dense Pipes",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "densePipeType",color = self._global.color(LingoNumber(13),LingoNumber(23),LingoNumber(110)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Sheet Metal",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "wv",color = self._global.color(LingoNumber(145),LingoNumber(135),LingoNumber(125)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Chaotic Stone 2",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(90),LingoNumber(90),LingoNumber(90)))))
        self._movieScript.gTiles[LingoNumber(2)].tls.add(LingoPropertyList(dict(nm = "Asphalt",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(115),LingoNumber(115),LingoNumber(115)))))
        self._movieScript.gTiles.add(LingoPropertyList(dict(nm = "Community Materials",tls = LingoList())))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "Shallow Circuits",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "densePipeType",color = self._global.color(LingoNumber(15),LingoNumber(200),LingoNumber(155)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "Random Machines 2",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(116),LingoNumber(116),LingoNumber(80)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "Small Machines",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(80),LingoNumber(116),LingoNumber(116)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "Random Metals",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(80)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "ElectricMetal",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(100)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "Grate",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(190),LingoNumber(50),LingoNumber(190)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "CageGrate",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(50),LingoNumber(190),LingoNumber(190)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "BulkMetal",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(50),LingoNumber(19),LingoNumber(190)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "MassiveBulkMetal",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "unified",color = self._global.color(LingoNumber(255),LingoNumber(19),LingoNumber(19)))))
        self._movieScript.gTiles[LingoNumber(3)].tls.add(LingoPropertyList(dict(nm = "Dune Sand",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),rendertype = "tiles",color = self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(100)))))
        savlm = self._global.member("matInit")        self._global.member("matInit").importfileinto(LingoGlobal.concat("Materials",self._global.the_dirSeparator,"Init.txt"))
        savlm.name = "matInit"        self._movieScript.DRCustomMatList = LingoList()        if (LingoGlobal.op_ne_b(savlm.text, LingoGlobal.VOID) and LingoGlobal.op_ne_b(savlm.text, "")):             tmp_ln=int(LingoNumber(1))            while tmp_ln < LingoGlobal.thenumberoflines_helper(savlm.text):                 ln = tmp_ln                lin = LingoGlobal.linemember_helper(savlm.text)[ln]                if LingoGlobal.op_ne_b(lin, ""):                     if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(lin)[LingoNumber(1)], "-"):                         self._movieScript.gTiles.add(LingoPropertyList(dict(nm = self._global.slice_helper(LingoGlobal.charmember_helper(lin),LingoNumber(2),LingoGlobal.lengthmember_helper(lin)),tls = LingoList())))
                        tmp_efLn=int(LingoGlobal.op_add(ln,LingoNumber(1)))                        while tmp_efLn < LingoGlobal.thenumberoflines_helper(savlm.text):                             efln = tmp_efLn                            eflin = LingoGlobal.linemember_helper(savlm.text)[efln]                            if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(eflin)[LingoNumber(1)], "-"):                                 break                                                            elif LingoGlobal.op_ne_b(eflin, ""):                                 gtlcnt = self._movieScript.gTiles[self._movieScript.gTiles.count]                                gtlcnt.tls.add(self._global.value(eflin))
                                mattl = gtlcnt.tls[gtlcnt.tls.count]                                mattl[sz] = LingoGlobal.point(LingoNumber(1),LingoNumber(1))                                mattl[specs] = LingoList(LingoNumber(0))                                mattl[rendertype] = "customUnified"                                self._movieScript.DRCustomMatList.add(mattl)                            tmp_efLn = efln                            tmp_efLn += 1                                                    ln = LingoGlobal.op_sub(efln,LingoNumber(1))                                                            tmp_ln = ln                tmp_ln += 1                            if self._movieScript.gTiles.count >= LingoNumber(1):                 tmp_del=int(LingoNumber(1))                while tmp_del < self._movieScript.gTiles.count:                     del = tmp_del                    if self._movieScript.gTiles[del].tls.count < LingoNumber(1):                         self._movieScript.gTiles.deleteat(del)                    tmp_del = del                    tmp_del += 1                                                        self._movieScript.setlastmatcat(self._movieScript.gTiles.count)
        self._movieScript.gTiles.add(LingoPropertyList(dict(nm = "Special",tls = LingoList())))
        spcind = self._movieScript.gTiles.count        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(dict(nm = "Rect Clear",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),placemethod = "rect",color = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)))))
        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(dict(nm = "SH pattern box",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),placemethod = "rect",color = self._global.color(LingoNumber(210),LingoNumber(0),LingoNumber(255)))))
        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(dict(nm = "SH grate box",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),placemethod = "rect",color = self._global.color(LingoNumber(160),LingoNumber(0),LingoNumber(255)))))
        self._movieScript.gTiles[spcind].tls.add(LingoPropertyList(dict(nm = "Alt Grate Box",sz = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),specs = LingoList(LingoNumber(0)),placemethod = "rect",color = self._global.color(LingoNumber(75),LingoNumber(75),LingoNumber(240)))))
        self._movieScript.setfirsttilecat(LingoGlobal.op_add(spcind,LingoNumber(1)))
        sav = self._global.member("initImport")        self._global.member("initImport").importfileinto(LingoGlobal.concat("Graphics",self._global.the_dirSeparator,"Init.txt"))
        sav.text = LingoGlobal.concat(sav.text,LingoGlobal.RETURN,LingoGlobal.RETURN,self._global.member("Drought Needed Init").text)        sav.name = "initImport"        self._global.member("previewTiles").image = self._global.image(LingoNumber(60000),LingoNumber(500),LingoNumber(1))        ptpos = LingoNumber(1)        self._global.member("previewTilesDR").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))        drpos = LingoNumber(1)        if LingoGlobal.ToBool(self._movieScript.getboolconfig("More tile previews")):             self._global.member("previewTilesDR").image = self._global.image(LingoNumber(60000),LingoNumber(500),LingoNumber(1))                    tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.thenumberoflines_helper(sav.text):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q])[LingoNumber(1)], "-"):                     vl = self._global.value(self._global.slice_helper(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q]),LingoNumber(2),LingoGlobal.lengthmember_helper(LingoGlobal.linemember_helper(sav.text)[q])))                    if LingoGlobal.op_eq_b(vl, LingoGlobal.VOID):                         self._movieScript.writeexception("Tile Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Graphics folder."))                    else:                        self._movieScript.gTiles.add(LingoPropertyList(dict(nm = vl[LingoNumber(1)],clr = vl[LingoNumber(2)],tls = LingoList())))                                    elif LingoGlobal.op_eq_b(self._global.value(LingoGlobal.linemember_helper(sav.text)[q]), LingoGlobal.VOID):                     self._movieScript.writeexception("Tile Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Graphics folder."))                else:                    ad = self._global.value(LingoGlobal.linemember_helper(sav.text)[q])                    debugline = LingoGlobal.linemember_helper(sav.text)[q]                    sav2 = self._global.member("previewImprt")                    self._global.member("previewImprt").importfileinto(LingoGlobal.concat("Graphics",self._global.the_dirSeparator,ad.nm,".png"))
                    sav2.name = "previewImprt"                    if LingoGlobal.ToBool(self._movieScript.checkdrinternal(ad.nm)):                         sav2.image = self._global.member(ad.nm).image                                            calculatedheight = sav2.image.rect.height                    if LingoGlobal.op_eq_b(ad.tp, "voxelStruct"):                         calculatedheight = LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_add(ad.sz.locv,LingoGlobal.op_mul(ad.bftiles,LingoNumber(2)))),ad.repeatl.count))                                            rct = LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_sub(calculatedheight,LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch),calculatedheight)                    if (LingoGlobal.op_add(LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1)) > self._global.member("previewTiles").image.width and LingoGlobal.ToBool(self._movieScript.getboolconfig("More tile previews"))):                         self._global.member("previewTilesDR").image.copypixels(sav2.image,LingoGlobal.rect(drpos,LingoNumber(0),LingoGlobal.op_add(drpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),rct)
                        ad.ptpos = LingoGlobal.op_add(drpos,LingoNumber(60000))                        ad.addprop(category,self._movieScript.gTiles.count)
                        if LingoGlobal.op_eq_b(ad.tags.getpos("notTile"), LingoNumber(0)):                             self._movieScript.gTiles[self._movieScript.gTiles.count].tls.add(ad)                        drpos = LingoGlobal.op_add(LingoGlobal.op_add(drpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1))                                            else:                        self._global.member("previewTiles").image.copypixels(sav2.image,LingoGlobal.rect(ptpos,LingoNumber(0),LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoGlobal.op_mul(LingoNumber(16),ad.sz.locv)),rct)
                        ad.ptpos = ptpos                        ad.addprop(category,self._movieScript.gTiles.count)
                        if LingoGlobal.op_eq_b(ad.tags.getpos("notTile"), LingoNumber(0)):                             self._movieScript.gTiles[self._movieScript.gTiles.count].tls.add(ad)                        ptpos = LingoGlobal.op_add(LingoGlobal.op_add(ptpos,LingoGlobal.op_mul(LingoNumber(16),ad.sz.loch)),LingoNumber(1))                                                                        tmp_q = q            tmp_q += 1                    self._movieScript.lG = "1"        self._movieScript.gProps = LingoList()        self._movieScript.resetpropeditorprops()
        self._movieScript.gPEcolors = LingoList()        sav = self._global.member("initImport")        self._global.member("initImport").importfileinto(LingoGlobal.concat("Props",self._global.the_dirSeparator,"propColors.txt"))
        sav.name = "initImport"        tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.thenumberoflines_helper(sav.text):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 self._movieScript.gPEcolors.add(self._global.value(LingoGlobal.linemember_helper(sav.text)[q]))            tmp_q = q            tmp_q += 1                    sav = self._global.member("initImport")        self._global.member("initImport").importfileinto(LingoGlobal.concat("Props",self._global.the_dirSeparator,"Init.txt"))
        sav.name = "initImport"        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(1000):             q = tmp_q            self._global.member(q,LingoNumber(2)).erase()
            tmp_q = q            tmp_q += 1                    tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.thenumberoflines_helper(sav.text):             q = tmp_q            if LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(sav.text)[q], ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q])[LingoNumber(1)], "-"):                     vl = self._global.value(self._global.slice_helper(LingoGlobal.charmember_helper(LingoGlobal.linemember_helper(sav.text)[q]),LingoNumber(2),LingoGlobal.lengthmember_helper(LingoGlobal.linemember_helper(sav.text)[q])))                    if LingoGlobal.op_eq_b(vl, LingoGlobal.VOID):                         self._movieScript.writeexception("Prop Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Props folder."))                    else:                        self._movieScript.gProps.add(LingoPropertyList(dict(nm = vl[LingoNumber(1)],clr = vl[LingoNumber(2)],prps = LingoList())))                                    elif LingoGlobal.op_eq_b(self._global.value(LingoGlobal.linemember_helper(sav.text)[q]), LingoGlobal.VOID):                     self._movieScript.writeexception("Prop Init Error",LingoGlobal.concat_space("Line",q,"is malformed in the Init.txt file from your Props folder."))                else:                    ad = self._global.value(LingoGlobal.linemember_helper(sav.text)[q])                    strng = LingoGlobal.linemember_helper(sav.text)[q]                    ad.addprop(category,self._movieScript.gProps.count)
                    if (LingoGlobal.op_eq_b(ad.tp, "standard") or LingoGlobal.op_eq_b(ad.tp, "variedStandard")):                         dp = LingoNumber(0)                        tmp_i=int(LingoNumber(1))                        while tmp_i < ad.repeatl.count:                             i = tmp_i                            dp = LingoGlobal.op_add(dp,ad.repeatl[i])                            tmp_i = i                            tmp_i += 1                                                    ad.addprop(depth,dp)                    self._movieScript.gProps[self._movieScript.gProps.count].prps.add(ad)                            tmp_q = q            tmp_q += 1                    gpagecount = LingoNumber(0)        gpagetick = LingoNumber(0)        tmp_q=int(self._movieScript.getfirsttilecat())        while tmp_q < self._movieScript.gTiles.count:             q = tmp_q            tmp_c=int(LingoNumber(1))            while tmp_c < self._movieScript.gTiles[q].tls.count:                 c = tmp_c                if LingoGlobal.op_eq_b(gpagetick, LingoNumber(0)):                     gpagetick = LingoNumber(21)                    gpagecount = LingoGlobal.op_add(gpagecount,LingoNumber(1))                    self._movieScript.gProps.add(LingoPropertyList(dict(nm = LingoGlobal.concat("Tiles as props ",gpagecount),clr = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),prps = LingoList())))                tl = self._movieScript.gTiles[q].tls[c]                rnddisf = self._movieScript.getboolconfig("voxelStructRandomDisplace for tiles as props")                if (((LingoGlobal.op_eq_b(tl.tp, "voxelStruct") or (LingoGlobal.op_eq_b(tl.tp, "voxelStructRandomDisplaceVertical") and LingoGlobal.ToBool(rnddisf))) or (LingoGlobal.op_eq_b(tl.tp, "voxelStructRandomDisplaceHorizontal") and LingoGlobal.ToBool(rnddisf))) and LingoGlobal.op_eq_b(tl.tags.getpos("notProp"), LingoNumber(0))):                     ntp = ""                    ecat = ""                    ecbt = ""                    dct = ""                    cct = ""                    ccrt = ""                    rrt = ""                    rfxt = ""                    rfyt = ""                    cst = ""                    csbt = ""                    lst = ""                    lsbt = ""                    drt = ""                    inte = ""                    nmtp = ""                    if tl.tags.getpos("notMegaTrashProp") > LingoNumber(0):                         nmtp = "notMegaTrashProp"                                            if tl.tags.getpos("effectColorA") > LingoNumber(0):                         ecat = "effectColorA"                                            if tl.tags.getpos("effectColorB") > LingoNumber(0):                         ecbt = "effectColorB"                                            if tl.tags.getpos("colored") > LingoNumber(0):                         dct = "colored"                                            if tl.tags.getpos("customColor") > LingoNumber(0):                         cct = "customColor"                                            if tl.tags.getpos("customColorRainbow") > LingoNumber(0):                         ccrt = "customColorRainbow"                                            if tl.tags.getpos("randomRotat") > LingoNumber(0):                         rrt = "randomRotat"                                            if tl.tags.getpos("randomFlipX") > LingoNumber(0):                         rfxt = "randomFlipX"                                            if tl.tags.getpos("randomFlipY") > LingoNumber(0):                         rfyt = "randomFlipY"                                            if tl.tags.getpos("Circular Sign") > LingoNumber(0):                         cst = "Circular Sign"                                            if tl.tags.getpos("Circular Sign B") > LingoNumber(0):                         csbt = "Circular Sign B"                                            if tl.tags.getpos("Larger Sign") > LingoNumber(0):                         lst = "Larger Sign"                                            if tl.tags.getpos("Larger Sign B") > LingoNumber(0):                         lsbt = "Larger Sign B"                                            if tl.tags.getpos("notTrashProp") > LingoNumber(0):                         ntp = "notTrashProp"                                            if tl.tags.getpos("INTERNAL") > LingoNumber(0):                         inte = "INTERNAL"                                            if LingoGlobal.ToBool(self._movieScript.getboolconfig("Tiles as props fixes")):                         if tl.rnd > LingoNumber(1):                             ad = LingoPropertyList(dict(nm = tl.nm,tp = "variedStandard",colortreatment = "standard",sz = LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),depth = LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),repeatl = tl.repeatl,vars = tl.rnd,random = LingoNumber(1),tags = LingoList("Tile",ntp,ecat,ecbt,dct,cct,ccrt,rrt,rfxt,rfyt,cst,csbt,lst,lsbt,inte,nmtp),layerexceptions = LingoList(),notes = LingoList("Tile as prop")))                                                    else:                            ad = LingoPropertyList(dict(nm = tl.nm,tp = "standard",colortreatment = "standard",sz = LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),depth = LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),repeatl = tl.repeatl,tags = LingoList("Tile",ntp,ecat,ecbt,dct,cct,ccrt,rrt,rfxt,rfyt,cst,csbt,lst,lsbt,inte,nmtp),layerexceptions = LingoList(),notes = LingoList("Tile as prop")))                                                                        else:                        ad = LingoPropertyList(dict(nm = tl.nm,tp = "standard",colortreatment = "standard",sz = LingoGlobal.op_add(tl.sz,LingoGlobal.point(LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)),LingoGlobal.op_mul(tl.bftiles,LingoNumber(2)))),depth = LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoGlobal.op_ne(tl.specs2,LingoList()),LingoNumber(10))),repeatl = tl.repeatl,tags = LingoList("Tile",ntp,inte,nmtp),layerexceptions = LingoList(),notes = LingoList("Tile as prop")))                                            ad.addprop(category,self._movieScript.gProps.count)
                    self._movieScript.gProps[self._movieScript.gProps.count].prps.add(ad)
                    gpagetick = LingoGlobal.op_sub(gpagetick,LingoNumber(1))                                    tmp_c = c                tmp_c += 1                            tmp_q = q            tmp_q += 1                    tmp_prq=int(LingoNumber(1))        while tmp_prq < self._movieScript.gProps.count:             prq = tmp_prq            if self._movieScript.gProps[prq].prps.count <= LingoNumber(0):                 self._movieScript.gProps.deleteat(prq)            tmp_prq = prq            tmp_prq += 1                    self._movieScript.gProps.add(LingoPropertyList(dict(nm = "Rope type props",clr = self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Wire",tp = "rope",depth = LingoNumber(0),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(3),collisiondepth = LingoNumber(0),segrad = LingoNumber(1),grav = LingoNumber(0.5000),friction = LingoNumber(0.5000),airfric = LingoNumber(0.9000),stiff = LingoNumber(0),previewcolor = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),previewevery = LingoNumber(4),edgedirection = LingoNumber(0),rigid = LingoNumber(0),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Tube",tp = "rope",depth = LingoNumber(4),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(10),collisiondepth = LingoNumber(2),segrad = LingoNumber(4.5000),grav = LingoNumber(0.5000),friction = LingoNumber(0.5000),airfric = LingoNumber(0.9000),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),previewevery = LingoNumber(2),edgedirection = LingoNumber(5),rigid = LingoNumber(1.6000),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "ThickWire",tp = "rope",depth = LingoNumber(3),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(4),collisiondepth = LingoNumber(1),segrad = LingoNumber(2),grav = LingoNumber(0.5000),friction = LingoNumber(0.8000),airfric = LingoNumber(0.9000),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(0)),previewevery = LingoNumber(2),edgedirection = LingoNumber(0),rigid = LingoNumber(0.2000),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "RidgedTube",tp = "rope",depth = LingoNumber(4),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(5),collisiondepth = LingoNumber(2),segrad = LingoNumber(5),grav = LingoNumber(0.5000),friction = LingoNumber(0.3000),airfric = LingoNumber(0.7000),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(255)),previewevery = LingoNumber(2),edgedirection = LingoNumber(0),rigid = LingoNumber(0.1000),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Fuel Hose",tp = "rope",depth = LingoNumber(5),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(16),collisiondepth = LingoNumber(1),segrad = LingoNumber(7),grav = LingoNumber(0.5000),friction = LingoNumber(0.8000),airfric = LingoNumber(0.9000),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0)),previewevery = LingoNumber(1),edgedirection = LingoNumber(1.4000),rigid = LingoNumber(0.2000),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Broken Fuel Hose",tp = "rope",depth = LingoNumber(6),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(16),collisiondepth = LingoNumber(1),segrad = LingoNumber(7),grav = LingoNumber(0.5000),friction = LingoNumber(0.8000),airfric = LingoNumber(0.9000),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(255),LingoNumber(150),LingoNumber(0)),previewevery = LingoNumber(1),edgedirection = LingoNumber(1.4000),rigid = LingoNumber(0.2000),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Large Chain",tp = "rope",depth = LingoNumber(9),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(28),collisiondepth = LingoNumber(3),segrad = LingoNumber(9.5000),grav = LingoNumber(0.9000),friction = LingoNumber(0.8000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.0000),rigid = LingoNumber(0.0000),selfpush = LingoNumber(6.5000),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Large Chain 2",tp = "rope",depth = LingoNumber(9),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(28),collisiondepth = LingoNumber(3),segrad = LingoNumber(9.5000),grav = LingoNumber(0.9000),friction = LingoNumber(0.8000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(20),LingoNumber(205),LingoNumber(0)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.0000),rigid = LingoNumber(0.0000),selfpush = LingoNumber(6.5000),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Bike Chain",tp = "rope",depth = LingoNumber(9),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(38),collisiondepth = LingoNumber(3),segrad = LingoNumber(16.5000),grav = LingoNumber(0.9000),friction = LingoNumber(0.8000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(100),LingoNumber(100),LingoNumber(100)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.0000),rigid = LingoNumber(0.0000),selfpush = LingoNumber(16.5000),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Zero-G Tube",tp = "rope",depth = LingoNumber(4),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(10),collisiondepth = LingoNumber(2),segrad = LingoNumber(4.5000),grav = LingoNumber(0),friction = LingoNumber(0.5000),airfric = LingoNumber(0.9000),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),previewevery = LingoNumber(2),edgedirection = LingoNumber(0),rigid = LingoNumber(0.6000),selfpush = LingoNumber(2),sourcepush = LingoNumber(0.5000))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Zero-G Wire",tp = "rope",depth = LingoNumber(0),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(8),collisiondepth = LingoNumber(0),segrad = LingoNumber(1),grav = LingoNumber(0),friction = LingoNumber(0.5000),airfric = LingoNumber(0.9000),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),previewevery = LingoNumber(2),edgedirection = LingoNumber(0.3000),rigid = LingoNumber(0.5000),selfpush = LingoNumber(1.2000),sourcepush = LingoNumber(0.5000))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Fat Hose",tp = "rope",depth = LingoNumber(6),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(40),collisiondepth = LingoNumber(3),segrad = LingoNumber(20),grav = LingoNumber(0.9000),friction = LingoNumber(0.6000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(0),LingoNumber(100),LingoNumber(150)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.1000),rigid = LingoNumber(0.2000),selfpush = LingoNumber(10),sourcepush = LingoNumber(0.1000))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Wire Bunch",tp = "rope",depth = LingoNumber(9),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(50),collisiondepth = LingoNumber(3),segrad = LingoNumber(20),grav = LingoNumber(0.9000),friction = LingoNumber(0.6000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(255),LingoNumber(100),LingoNumber(150)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.1000),rigid = LingoNumber(0.2000),selfpush = LingoNumber(10),sourcepush = LingoNumber(0.1000))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Wire Bunch 2",tp = "rope",depth = LingoNumber(9),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(50),collisiondepth = LingoNumber(3),segrad = LingoNumber(20),grav = LingoNumber(0.9000),friction = LingoNumber(0.6000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(255),LingoNumber(100),LingoNumber(150)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.1000),rigid = LingoNumber(0.2000),selfpush = LingoNumber(10),sourcepush = LingoNumber(0.1000))))
        self._movieScript.gProps.add(LingoPropertyList(dict(nm = "Drought Rope Props",clr = self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Big Big Pipe",tp = "rope",depth = LingoNumber(6),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(40),collisiondepth = LingoNumber(3),segrad = LingoNumber(20),grav = LingoNumber(0.9000),friction = LingoNumber(0.6000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(50),LingoNumber(150),LingoNumber(210)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.1000),rigid = LingoNumber(0.2000),selfpush = LingoNumber(10),sourcepush = LingoNumber(0.1000))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Ring Chain",tp = "rope",depth = LingoNumber(6),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(40),collisiondepth = LingoNumber(3),segrad = LingoNumber(20),grav = LingoNumber(0.9000),friction = LingoNumber(0.6000),airfric = LingoNumber(0.9500),stiff = LingoNumber(1),previewcolor = self._global.color(LingoNumber(100),LingoNumber(200),LingoNumber(0)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0.1000),rigid = LingoNumber(0.2000),selfpush = LingoNumber(10),sourcepush = LingoNumber(0.1000))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Christmas Wire",tp = "rope",depth = LingoNumber(0),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(17),collisiondepth = LingoNumber(0),segrad = LingoNumber(8.5000),grav = LingoNumber(0.5000),friction = LingoNumber(0.5000),airfric = LingoNumber(0.9000),stiff = LingoNumber(0),previewcolor = self._global.color(LingoNumber(200),LingoNumber(0),LingoNumber(200)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0),rigid = LingoNumber(0),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Ornate Wire",tp = "rope",depth = LingoNumber(0),tags = LingoList(),notes = LingoList(),segmentlength = LingoNumber(17),collisiondepth = LingoNumber(0),segrad = LingoNumber(8.5000),grav = LingoNumber(0.5000),friction = LingoNumber(0.5000),airfric = LingoNumber(0.9000),stiff = LingoNumber(0),previewcolor = self._global.color(LingoNumber(0),LingoNumber(200),LingoNumber(200)),previewevery = LingoNumber(1),edgedirection = LingoNumber(0),rigid = LingoNumber(0),selfpush = LingoNumber(0),sourcepush = LingoNumber(0))))
        self._movieScript.gProps.add(LingoPropertyList(dict(nm = "Long props",clr = self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Cabinet Clamp",tp = "long",depth = LingoNumber(0),tags = LingoList(),notes = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Drill Suspender",tp = "long",depth = LingoNumber(5),tags = LingoList(),notes = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Thick Chain",tp = "long",depth = LingoNumber(0),tags = LingoList(),notes = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Drill",tp = "long",depth = LingoNumber(10),tags = LingoList(),notes = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Piston",tp = "long",depth = LingoNumber(4),tags = LingoList(),notes = LingoList())))
        self._movieScript.gProps.add(LingoPropertyList(dict(nm = "Drought Long Props",clr = self._global.color(LingoNumber(0),LingoNumber(255),LingoNumber(0)),prps = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Stretched Pipe",tp = "long",depth = LingoNumber(0),tags = LingoList(),notes = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Twisted Thread",tp = "long",depth = LingoNumber(0),tags = LingoList(),notes = LingoList())))
        self._movieScript.gProps[self._movieScript.gProps.count].prps.add(LingoPropertyList(dict(nm = "Stretched Wire",tp = "long",depth = LingoNumber(0),tags = LingoList(),notes = LingoList())))
        self._movieScript.gTrashPropOptions = LingoList()        self._movieScript.gMegaTrash = LingoList()        tmp_q=int(LingoNumber(1))        while tmp_q < self._movieScript.gProps.count:             q = tmp_q            tmp_c=int(LingoNumber(1))            while tmp_c < self._movieScript.gProps[q].prps.count:                 c = tmp_c                self._movieScript.gProps[q].prps[c].addprop(settings,LingoPropertyList())
                self._movieScript.gProps[q].prps[c].settings.addprop(renderorder,LingoNumber(0))
                self._movieScript.gProps[q].prps[c].settings.addprop(seed,LingoNumber(500))
                self._movieScript.gProps[q].prps[c].settings.addprop(rendertime,LingoNumber(0))
                match self._movieScript.gProps[q].prps[c].tp.lower():                     case "standard" | "variedstandard":                        if LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].colortreatment, "bevel"):                             self._movieScript.gProps[q].prps[c].notes.add("The highlights and shadows on this prop are generated by code, so it can be rotated to any degree and they will remain correct.")                        else:                            self._movieScript.gProps[q].prps[c].notes.add("Be aware that shadows and highlights will not rotate with the prop, so extreme rotations may cause incorrect shading.")                        if LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "variedStandard"):                             self._movieScript.gProps[q].prps[c].settings.addprop(variation,LingoGlobal.op_eq(self._movieScript.gProps[q].prps[c].random,LingoNumber(0)))
                            if LingoGlobal.ToBool(self._movieScript.gProps[q].prps[c].random):                                 self._movieScript.gProps[q].prps[c].notes.add("Will put down a random variation. A specific variation can be selected from settings ('N' key).")                            else:                                self._movieScript.gProps[q].prps[c].notes.add("This prop comes with many variations. Which variation can be selected from settings ('N' key).")                                                    else:                            if (((self._movieScript.gProps[q].prps[c].sz.loch < LingoNumber(5) and self._movieScript.gProps[q].prps[c].sz.locv < LingoNumber(5)) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("INTERNAL"), LingoNumber(0))) and (LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("notTrashProp"), LingoNumber(0)) or LingoGlobal.op_eq_b(self._movieScript.getboolconfig("notTrashProp fix"), LingoGlobal.FALSE))):                                 self._movieScript.gTrashPropOptions.add(LingoGlobal.point(q,c))
                                if (self._movieScript.gProps[q].prps[c].sz.loch < LingoNumber(3) or self._movieScript.gProps[q].prps[c].sz.locv < LingoNumber(3)):                                     self._movieScript.gTrashPropOptions.add(LingoGlobal.point(q,c))                                                            if (((((((self._movieScript.gProps[q].prps[c].sz.loch >= LingoNumber(4) and self._movieScript.gProps[q].prps[c].sz.locv >= LingoNumber(4)) and self._movieScript.gProps[q].prps[c].sz.loch <= LingoNumber(20)) and self._movieScript.gProps[q].prps[c].sz.locv <= LingoNumber(20)) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("colored"), LingoNumber(0))) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("effectColorB"), LingoNumber(0))) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("effectColorA"), LingoNumber(0))) and LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tags.getpos("notMegaTrashProp"), LingoNumber(0))):                                 self._movieScript.gMegaTrash.add(LingoGlobal.point(q,c))                                                                        case "rope":                        self._movieScript.gProps[q].prps[c].settings.addprop(release,LingoNumber(0))                    case "varieddecal" | "variedsoft":                        self._movieScript.gProps[q].prps[c].settings.addprop(variation,LingoGlobal.op_eq(self._movieScript.gProps[q].prps[c].random,LingoNumber(0)))
                        self._movieScript.gProps[q].prps[c].settings.addprop(customdepth,self._movieScript.gProps[q].prps[c].depth)
                        if LingoGlobal.ToBool(self._movieScript.gProps[q].prps[c].random):                             self._movieScript.gProps[q].prps[c].notes.add("Will put down a random variation. A specific variation can be selected from settings ('N' key).")                        else:                            self._movieScript.gProps[q].prps[c].notes.add("This prop comes with many variations. Which variation can be selected from settings ('N' key).")                        if (LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "variedSoft") or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "coloredSoft")):                             if LingoGlobal.ToBool(self._movieScript.gProps[q].prps[c].colorize):                                 self._movieScript.gProps[q].prps[c].settings.addprop(applycolor,LingoNumber(1))
                                self._movieScript.gProps[q].prps[c].notes.add("It's recommended to render this prop after the effects if the color is activated, as the effects won't affect the color layers.")                                                                        case "simpledecal" | "soft" | "softeffect" | "antimatter" | "coloredsoft":                        self._movieScript.gProps[q].prps[c].settings.addprop(customdepth,self._movieScript.gProps[q].prps[c].depth)                                    if (((LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "soft") or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "softEffect")) or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "variedSoft")) or LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].tp, "coloredSoft")):                     if LingoGlobal.op_eq_b(self._movieScript.gProps[q].prps[c].selfshade, LingoNumber(1)):                         self._movieScript.gProps[q].prps[c].notes.add("The highlights and shadows on this prop are generated by code, so it can be rotated to any degree and they will remain correct.")                    else:                        self._movieScript.gProps[q].prps[c].notes.add("Be aware that shadows and highlights will not rotate with the prop, so extreme rotations may cause incorrect shading.")                                    match self._movieScript.gProps[q].prps[c].nm.lower():                     case "wire" | "zero-g wire" | "straight wire" | "straight zero-g wire":                        self._movieScript.gProps[q].prps[c].settings.addprop(thickness,LingoNumber(2))
                        self._movieScript.gProps[q].prps[c].notes.add("The thickness of the wire can be set in settings.")                    case "zero-g tube" | "straight zero-g tube":                        self._movieScript.gProps[q].prps[c].settings.addprop(applycolor,LingoNumber(0))
                        self._movieScript.gProps[q].prps[c].notes.add("The tube can be colored white through the settings.")                                    for tmp_t in self._movieScript.gProps[q].prps[c].tags:                     t = tmp_t                    match t.lower():                         case "customcolor":                            self._movieScript.gProps[q].prps[c].settings.addprop(color,LingoNumber(0))
                            self._movieScript.gProps[q].prps[c].notes.add("Custom color available")                        case "customcolorrainbow":                            self._movieScript.gProps[q].prps[c].settings.addprop(color,LingoNumber(1))
                            self._movieScript.gProps[q].prps[c].notes.add("Custom color available")                                                            tmp_c = c                tmp_c += 1                            tmp_q = q            tmp_q += 1                    self._movieScript.gEffects = LingoList()        savef = self._global.member("effectsInit")        self._global.member("effectsInit").importfileinto("effectsInit.txt")
        savef.name = "effectsInit"        if ((LingoGlobal.op_eq_b(savef.text, LingoGlobal.VOID) or LingoGlobal.op_eq_b(savef.text, "")) or LingoGlobal.op_ne_b(LingoGlobal.linemember_helper(savef.text)[LingoNumber(1)], "Rain World Community Editor; V.0.4.21; Editor effects initialisation file")):             fileef = self._global.new(self._global.xtra("fileio"))            fileef.createfile(LingoGlobal.concat(self._global.the_moviePath,"effectsInit.txt"))
            fileef.openfile(LingoGlobal.concat(self._global.the_moviePath,"effectsInit.txt"),LingoNumber(0))
            fileef.writestr(self._global.member("baseEffectsInit").text)
            fileef.writereturn(windows)
            savef.text = self._global.member("baseEffectsInit").text                    tmp_ln=int(LingoNumber(1))        while tmp_ln < LingoGlobal.thenumberoflines_helper(savef.text):             ln = tmp_ln            lin = LingoGlobal.linemember_helper(savef.text)[ln]            if LingoGlobal.op_ne_b(lin, ""):                 if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(lin)[LingoNumber(1)], "-"):                     self._movieScript.gEffects.add(LingoPropertyList(dict(nm = self._global.slice_helper(LingoGlobal.charmember_helper(lin),LingoNumber(2),LingoGlobal.lengthmember_helper(lin)),efs = LingoList())))
                    tmp_efLn=int(LingoGlobal.op_add(ln,LingoNumber(1)))                    while tmp_efLn < LingoGlobal.thenumberoflines_helper(savef.text):                         efln = tmp_efLn                        eflin = LingoGlobal.linemember_helper(savef.text)[efln]                        if LingoGlobal.op_eq_b(LingoGlobal.charmember_helper(eflin)[LingoNumber(1)], "-"):                             break                                                    elif LingoGlobal.op_ne_b(eflin, ""):                             self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = eflin)))                        tmp_efLn = efln                        tmp_efLn += 1                                            ln = LingoGlobal.op_sub(efln,LingoNumber(1))                                                tmp_ln = ln            tmp_ln += 1                    if self._movieScript.gEffects.count >= LingoNumber(1):             tmp_del=int(LingoNumber(1))            while tmp_del < self._movieScript.gEffects.count:                 del = tmp_del                if self._movieScript.gEffects[del].efs.count < LingoNumber(1):                     self._movieScript.gEffects.deleteat(del)                tmp_del = del                tmp_del += 1                                    if self._movieScript.gEffects.count < LingoNumber(1):             self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Natural",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Slime")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Melt")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Rust")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Barnacles")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Rubble")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "DecalsOnlySlime")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Erosion",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Roughen")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "SlimeX3")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Super Melt")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Destructive Melt")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Erode")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Super Erode")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "DaddyCorruption")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Artificial",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Wires")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Chains")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Plants",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Root Grass")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Seed Pods")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Growers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Cacti")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Rain Moss")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Hang Roots")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Grass")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Plants2",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Arm Growers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Horse Tails")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Circuit Plants")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Feather Plants")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Thorn Growers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Rollers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Garbage Spirals")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Plants3",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Thick Roots")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Shadow Plants")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Plants (Individual)",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Fungi Flowers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Lighthouse Flowers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Fern")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Giant Mushroom")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Sprawlbush")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "featherFern")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Fungus Tree")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Paint Effects",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "BlackGoo")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "DarkSlime")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Restoration",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Restore As Scaffolding")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Ceramic Chaos")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Drought Plants",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Hang Roots")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Thick Roots")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Shadow Plants")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Lighthouse Flowers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Fungi Flowers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Root Plants")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Drought Plants 2",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Foliage")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Mistletoe")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "High Fern")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "High Grass")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Little Flowers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Wastewater Mold")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Drought Plants 3",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Spinets")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Small Springs")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Mini Growers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Clovers")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Reeds")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Lavenders")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Dense Mold")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Drought Erosion",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Ultra Super Erode")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Impacts")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Drought Paint Effects",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Super BlackGoo")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Stained Glass Properties")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Drought Natural",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Barnacles")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Rubble")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Fat Slime")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Drought Artificial",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Assorted Trash")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Wires")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Colored Chains")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Ring Chains")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Dakras Plants",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Left Facing Kelp")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Right Facing Kelp")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Mixed Facing Kelp")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Bubble Grower")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Moss Wall")))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Club Moss")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Leo Plants",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Ivy")))
            self._movieScript.gEffects.add(LingoPropertyList(dict(nm = "Nautillo Plants",efs = LingoList())))
            self._movieScript.gEffects[self._movieScript.gEffects.count].efs.add(LingoPropertyList(dict(nm = "Fuzzy Growers")))        self._movieScript.gEEprops = LingoPropertyList(dict(lastkeys = LingoList(),keys = LingoList(),lstmsps = LingoGlobal.point(LingoNumber(0),LingoNumber(0)),effects = LingoList(),emPos = LingoGlobal.point(LingoNumber(1),LingoNumber(1)),editeffect = LingoNumber(0),selectediteffect = LingoNumber(0),mode = "createNew",brushsize = LingoNumber(5)))        self._movieScript.gLightEProps = LingoPropertyList(dict(pos = LingoGlobal.point(LingoGlobal.op_div(LingoNumber(1040),LingoNumber(2)),LingoGlobal.op_div(LingoNumber(800),LingoNumber(2))),rot = LingoNumber(0),sz = LingoGlobal.point(LingoNumber(50),LingoNumber(70)),col = LingoNumber(1),keys = LingoNumber(0),lastkeys = LingoNumber(0),lasttm = LingoNumber(0),lightangle = LingoNumber(180),flatness = LingoNumber(1),lightrect = LingoGlobal.rect(LingoNumber(1000),LingoNumber(1000),-LingoNumber(1000),-LingoNumber(1000)),paintshape = "pxl"))        self._movieScript.gLOprops = LingoPropertyList(dict(mouse = LingoNumber(0),lastmouse = LingoNumber(0),mouseclick = LingoNumber(0),pal = LingoNumber(1),pals = LingoList(LingoPropertyList(dict(detcol = self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0))))),ecol1 = LingoNumber(1),ecol2 = LingoNumber(2),totecols = LingoNumber(5),tileseed = self._global.random(LingoNumber(400)),colglows = LingoList(LingoNumber(0),LingoNumber(0)),size = LingoGlobal.point(cols,rows),extratiles = LingoList(LingoNumber(12),LingoNumber(3),LingoNumber(12),LingoNumber(5)),light = LingoNumber(1)))        self._global.new_script("levelEdit_parentscript",LingoList(LingoNumber(1)))
        self._global.new_script("levelEdit_parentscript",LingoList(LingoNumber(2)))
        self._movieScript.gCameraProps = LingoPropertyList(dict(cameras = LingoList(LingoGlobal.op_sub(LingoGlobal.point(LingoGlobal.op_mul(self._movieScript.gLOprops.size.loch,LingoNumber(10)),LingoGlobal.op_mul(self._movieScript.gLOprops.size.locv,LingoNumber(10))),LingoGlobal.point(LingoGlobal.op_mul(LingoNumber(35),LingoNumber(20)),LingoGlobal.op_mul(LingoNumber(20),LingoNumber(20))))),selectedcamera = LingoNumber(0),quads = LingoList(LingoList(LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)),LingoList(LingoNumber(0),LingoNumber(0)))),keys = LingoPropertyList(dict(n = LingoNumber(0),d = LingoNumber(0),e = LingoNumber(0),p = LingoNumber(0))),lastkeys = LingoPropertyList(dict(n = LingoNumber(0),d = LingoNumber(0),e = LingoNumber(0),p = LingoNumber(0)))))        self._movieScript.gSEprops = LingoPropertyList(dict(sounds = LingoGlobal.VOID,ambientsounds = LingoList(),songs = LingoList(),rects = LingoList(),pickedupsound = "NONE"))        for tmp_mem in LingoList("rainBowMask","blackOutImg1","blackOutImg2"):             mem = tmp_mem            self._global.member(mem).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))                    self._global.member("lightImage").image = self._global.image(LingoGlobal.op_add(LingoGlobal.op_mul(self._movieScript.gLOprops.size.loch,LingoNumber(20)),LingoNumber(300)),LingoGlobal.op_add(LingoGlobal.op_mul(self._movieScript.gLOprops.size.locv,LingoNumber(20)),LingoNumber(300)),LingoNumber(1))        tmp_i=int(LingoNumber(0))        while tmp_i < LingoNumber(29):             i = tmp_i            self._global.member(LingoGlobal.concat("layer",i)).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("layer",i,"sh")).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("gradientA",i)).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("gradientB",i)).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member(LingoGlobal.concat("layer",i,"dc")).image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member("dumpImage").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member("finalDecalImage").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            self._global.member("GradientOutput").image = self._global.image(LingoNumber(1),LingoNumber(1),LingoNumber(1))            tmp_i = i            tmp_i += 1                    if LingoGlobal.ToBool(self._movieScript.getboolconfig("Large trash debug log")):             tmp_tr=int(LingoNumber(1))            while tmp_tr < self._movieScript.gTrashPropOptions.count:                 tr = tmp_tr                self._global.member("DEBUGTR").text = LingoGlobal.concat(self._global.member("DEBUGTR").text,LingoGlobal.RETURN,self._movieScript.gProps[self._movieScript.gTrashPropOptions[tr].loch].prps[self._movieScript.gTrashPropOptions[tr].locv].nm)                tmp_tr = tr                tmp_tr += 1                            fileopener = self._global.new(self._global.xtra("fileio"))            fileopener.openfile(LingoGlobal.concat(self._global.the_moviePath,"largeTrashLog.txt"),LingoNumber(0))
            fileopener.writestr(self._global.member("DEBUGTR").text)
            fileopener.writereturn(windows)                return None            