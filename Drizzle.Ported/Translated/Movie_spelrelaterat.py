from Drizzle.Runtime import *## Movie script: spelrelaterat#class MovieScript:     def __init__(self):         super().__init__()            def givegridpos(self, pos):         return LingoGlobal.point(LingoGlobal.op_add(LingoGlobal.op_div(pos.loch.float,LingoNumber(20.0000)),LingoNumber(0.4999)).integer,LingoGlobal.op_add(LingoGlobal.op_div(pos.locv.float,LingoNumber(20.0000)),LingoNumber(0.4999)).integer)                    def givemiddleoftile(self, pos):         return LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_mul(pos.loch,LingoNumber(20)),LingoNumber(10)),LingoGlobal.op_sub(LingoGlobal.op_mul(pos.locv,LingoNumber(20)),LingoNumber(10)))                    def givecorner1(self, pos):         return LingoGlobal.point(LingoGlobal.op_mul(pos.loch,LingoNumber(20)),LingoGlobal.op_mul(pos.locv,LingoNumber(20)))                    def givecorner2(self, pos):         return LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_mul(pos.loch,LingoNumber(20)),LingoNumber(20)),LingoGlobal.op_sub(LingoGlobal.op_mul(pos.locv,LingoNumber(20)),LingoNumber(20)))                    def givecorner3(self, pos):         return LingoGlobal.point(LingoGlobal.op_mul(pos.loch,LingoNumber(20)),LingoGlobal.op_sub(LingoGlobal.op_mul(pos.locv,LingoNumber(20)),LingoNumber(20)))                    def givecorner4(self, pos):         return LingoGlobal.point(LingoGlobal.op_sub(LingoGlobal.op_mul(pos.loch,LingoNumber(20)),LingoNumber(20)),LingoGlobal.op_mul(pos.locv,LingoNumber(20)))                    def restrict(self, val, low, high):         if val < low:             return low                    elif val > high:             return high                    else:            return val                            return None            def restrictwithflip(self, val, low, high):         if val < low:             return LingoGlobal.op_add(LingoGlobal.op_add(val,LingoGlobal.op_sub(high,low)),LingoNumber(1))                    elif val > high:             return LingoGlobal.op_sub(LingoGlobal.op_sub(val,LingoGlobal.op_sub(high,low)),LingoNumber(1))                    else:            return val                            return None            def afamvlvledit(self, pos, layer):         if LingoGlobal.ToBool(pos.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self.gLOprops.size.locv,LingoNumber(1))))):             return self.gLEProps.matrix[pos.loch][pos.locv][layer][LingoNumber(1)]                    else:            return LingoNumber(1)                            return None            def solidafamv(self, pos, layer):         if LingoGlobal.ToBool(pos.inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(self.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(self.gLOprops.size.locv,LingoNumber(1))))):             return self.solidMtrx[pos.loch][pos.locv][layer]                    else:            return LingoNumber(1)                            return None            def drawgraph(self):         q = None        fc = None        val = None        self._global.member("grafImg").image = self._global.image(LingoNumber(300),LingoNumber(100),LingoNumber(1))        tmp_q=int(LingoNumber(1))        while tmp_q < LingoNumber(300):             q = LingoNumber(tmp_q)            fc = LingoGlobal.op_div(q,LingoNumber(300.0000))            fc = LingoGlobal.op_sub(LingoNumber(1.0000),fc)            fc = LingoGlobal.op_mul(fc,fc)            fc = LingoGlobal.op_sub(LingoNumber(1.0000),fc)            val = LingoGlobal.sin(LingoGlobal.op_mul(fc,LingoGlobal.PI))            self._global.member("grafImg").image.setpixel(q,LingoGlobal.op_sub(LingoNumber(100),LingoGlobal.op_mul(val,LingoNumber(100))),self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)))
            tmp_q = int(q)            tmp_q += 1                            return None            def depthpnt(self, pnt, dpt):         dpt = LingoGlobal.op_mul(dpt,-LingoNumber(0.0250))        pnt = LingoGlobal.op_sub(pnt,LingoGlobal.point(LingoGlobal.op_div(LingoNumber(1400),LingoNumber(2)),LingoGlobal.op_div(LingoNumber(800),LingoNumber(3))))        dpt = LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(10),dpt),LingoNumber(0.1000))        pnt = LingoGlobal.op_div(pnt,dpt)        pnt = LingoGlobal.op_add(pnt,LingoGlobal.point(LingoGlobal.op_div(LingoNumber(1400),LingoNumber(2)),LingoGlobal.op_div(LingoNumber(800),LingoNumber(3))))        return pnt                    def antidepthpnt(self, pnt, dpt):         dpt = LingoGlobal.op_mul(dpt,-LingoNumber(0.0250))        pnt = LingoGlobal.op_sub(pnt,LingoGlobal.point(LingoGlobal.op_div(LingoNumber(1400),LingoNumber(2)),LingoGlobal.op_div(LingoNumber(800),LingoNumber(3))))        dpt = LingoGlobal.op_mul(LingoGlobal.op_sub(LingoNumber(10),dpt),LingoNumber(0.1000))        pnt = LingoGlobal.op_mul(pnt,dpt)        pnt = LingoGlobal.op_add(pnt,LingoGlobal.point(LingoGlobal.op_div(LingoNumber(1400),LingoNumber(2)),LingoGlobal.op_div(LingoNumber(800),LingoNumber(3))))        return pnt                    def seedfortile(self, tile, effectseed):         return LingoGlobal.op_add(LingoGlobal.op_add(effectseed,tile.loch),LingoGlobal.op_mul(tile.locv,self.gLEProps.matrix.count))                    def copypixelstoeffectcolor(self, gdlayer, lr, rct, getmember, gtrect, zbleed, blnd):         gtimg = None        dmpimg = None        nxt = None        if LingoGlobal.op_eq_b(blnd, LingoGlobal.VOID):             blnd = LingoNumber(1.0000)                    if (LingoGlobal.op_ne_b(gdlayer, "C") and blnd > LingoNumber(0)):             lr = lr.integer            if lr < LingoNumber(0):                 lr = LingoNumber(0)                            elif lr > LingoNumber(29):                 lr = LingoNumber(29)                            gtimg = self._global.member(getmember).image            if (LingoGlobal.op_ne_b(blnd, LingoNumber(0)) and LingoGlobal.op_ne_b(blnd, LingoGlobal.VOID)):                 dmpimg = gtimg.duplicate()                dmpimg.copypixels(LingoImage.Pxl,dmpimg.rect,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("blend"), LingoGlobal.op_mul(LingoNumber(100.0000),LingoGlobal.op_sub(LingoNumber(1.0000),blnd)),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                gtimg = dmpimg                            self._global.member(LingoGlobal.concat("gradient",gdlayer,self._global.str(lr))).image.copypixels(gtimg,rct,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
            if zbleed > LingoNumber(0):                 if zbleed < LingoNumber(1):                     dmpimg = gtimg.duplicate()                    dmpimg.copypixels(LingoImage.Pxl,dmpimg.rect,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("blend"), LingoGlobal.op_mul(LingoNumber(100.0000),LingoGlobal.op_sub(LingoNumber(1.0000),zbleed)),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                    gtimg = dmpimg                                    nxt = LingoGlobal.op_add(lr,LingoNumber(1))                if nxt > LingoNumber(29):                     nxt = LingoNumber(29)                                    self._global.member(LingoGlobal.concat("gradient",gdlayer,self._global.str(nxt))).image.copypixels(gtimg,rct,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                nxt = LingoGlobal.op_sub(lr,LingoNumber(1))                if nxt < LingoNumber(0):                     nxt = LingoNumber(0)                                    self._global.member(LingoGlobal.concat("gradient",gdlayer,self._global.str(nxt))).image.copypixels(gtimg,rct,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))                            return None            def copypixelstorooteffectcolor(self, gdlayer, lr, rct, getmember, gtrect, zbleed, blnd):         gtimg = None        dmpimg = None        nxtadd = None        nxt = None        if LingoGlobal.op_eq_b(blnd, LingoGlobal.VOID):             blnd = LingoNumber(1.0000)                    if (LingoGlobal.op_ne_b(gdlayer, "C") and blnd > LingoNumber(0)):             lr = lr.integer            if lr < LingoNumber(0):                 lr = LingoNumber(0)                            elif lr > LingoNumber(29):                 lr = LingoNumber(29)                            gtimg = self._global.member(getmember).image            if (LingoGlobal.op_ne_b(blnd, LingoNumber(0)) and LingoGlobal.op_ne_b(blnd, LingoGlobal.VOID)):                 dmpimg = gtimg.duplicate()                dmpimg.copypixels(LingoImage.Pxl,dmpimg.rect,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("blend"), LingoGlobal.op_mul(LingoNumber(100.0000),LingoGlobal.op_sub(LingoNumber(1.0000),blnd)),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                gtimg = dmpimg                            self._global.member(LingoGlobal.concat("gradient",gdlayer,self._global.str(lr))).image.copypixels(gtimg,rct,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
            if zbleed > LingoNumber(0):                 if zbleed < LingoNumber(1):                     dmpimg = gtimg.duplicate()                    dmpimg.copypixels(LingoImage.Pxl,dmpimg.rect,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("blend"), LingoGlobal.op_mul(LingoNumber(100.0000),LingoGlobal.op_sub(LingoNumber(1.0000),zbleed)),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
                    gtimg = dmpimg                                    tmp_nxtAdd=int(LingoNumber(1))                while tmp_nxtAdd < LingoNumber(3):                     nxtadd = LingoNumber(tmp_nxtAdd)                    nxt = LingoGlobal.op_add(lr,nxtadd)                    if nxt > LingoNumber(29):                         nxt = LingoNumber(29)                                            self._global.member(LingoGlobal.concat("gradient",gdlayer,self._global.str(nxt))).image.copypixels(gtimg,rct,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    nxt = LingoGlobal.op_sub(lr,nxtadd)                    if nxt < LingoNumber(0):                         nxt = LingoNumber(0)                                            self._global.member(LingoGlobal.concat("gradient",gdlayer,self._global.str(nxt))).image.copypixels(gtimg,rct,gtrect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(39)))
                    tmp_nxtAdd = int(nxtadd)                    tmp_nxtAdd += 1                                                                return None            def recolor(self, img, paloffset):         col1 = None        col2 = None        col3 = None        col4 = None        col5 = None        c = None        r = None        col1 = self._global.member("currentPalette").image.getpixel(LingoGlobal.op_add(LingoNumber(0),paloffset),LingoNumber(0))        col2 = self._global.member("currentPalette").image.getpixel(LingoGlobal.op_add(LingoNumber(1),paloffset),LingoNumber(0))        col3 = self._global.member("currentPalette").image.getpixel(LingoGlobal.op_add(LingoNumber(2),paloffset),LingoNumber(0))        col4 = self._global.member("currentPalette").image.getpixel(LingoGlobal.op_add(LingoNumber(3),paloffset),LingoNumber(0))        col5 = self._global.member("currentPalette").image.getpixel(LingoGlobal.op_add(LingoNumber(4),paloffset),LingoNumber(0))        tmp_c=int(LingoNumber(1))        while tmp_c < img.width:             c = LingoNumber(tmp_c)            tmp_r=int(LingoNumber(1))            while tmp_r < img.height:                 r = LingoNumber(tmp_r)                match self._global.str(img.getpixel(LingoGlobal.op_sub(c,LingoNumber(1)),LingoGlobal.op_sub(r,LingoNumber(1)))).lower():                     case "color( 248, 0, 0 )":                        img.setpixel(LingoGlobal.op_sub(c,LingoNumber(1)),LingoGlobal.op_sub(r,LingoNumber(1)),col1)                    case "color( 0, 248, 0 )":                        img.setpixel(LingoGlobal.op_sub(c,LingoNumber(1)),LingoGlobal.op_sub(r,LingoNumber(1)),col2)                    case "color( 0, 0, 248 )":                        img.setpixel(LingoGlobal.op_sub(c,LingoNumber(1)),LingoGlobal.op_sub(r,LingoNumber(1)),col3)                    case "color( 248, 248, 0 )":                        img.setpixel(LingoGlobal.op_sub(c,LingoNumber(1)),LingoGlobal.op_sub(r,LingoNumber(1)),col4)                    case "color( 0, 248, 248 )":                        img.setpixel(LingoGlobal.op_sub(c,LingoNumber(1)),LingoGlobal.op_sub(r,LingoNumber(1)),col5)                                    tmp_r = int(r)                tmp_r += 1                            tmp_c = int(c)            tmp_c += 1                    return img                    def txttoimg(self, txt):         totchars = None        rws = None        img = None        pos = None        q = None        totchars = LingoGlobal.lengthmember_helper(txt)        rws = LingoGlobal.op_add(LingoGlobal.op_div(totchars,LingoNumber(1040.0000)),LingoNumber(0.5000)).integer        img = self._global.image(LingoNumber(1040),rws,LingoNumber(32))        pos = LingoGlobal.point(LingoNumber(0),LingoNumber(1))        tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.lengthmember_helper(txt):             q = LingoNumber(tmp_q)            pos.loch = LingoGlobal.op_add(pos.loch,LingoNumber(1))            if pos.loch > LingoNumber(1040):                 pos.loch = LingoNumber(1)                pos.locv = LingoGlobal.op_add(pos.locv,LingoNumber(1))                            img.setpixel(LingoGlobal.op_sub(pos.loch,LingoNumber(1)),LingoGlobal.op_sub(pos.locv,LingoNumber(1)),self._global.color(self._global.slice_helper(LingoGlobal.charmember_helper(txt),q,q).chartonum,LingoNumber(0),LingoNumber(0)))
            tmp_q = int(q)            tmp_q += 1                    return img                    def imgtotxt(self, img):         txt = None        c = None        q = None        col = None        txt = ""        tmp_c=int(LingoNumber(1))        while tmp_c < img.rect.height:             c = LingoNumber(tmp_c)            tmp_q=int(LingoNumber(1))            while tmp_q < LingoNumber(1040):                 q = LingoNumber(tmp_q)                col = img.getpixel(LingoGlobal.op_sub(q,LingoNumber(1)),LingoGlobal.op_sub(c,LingoNumber(1)))                if LingoGlobal.op_eq_b(col, self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))):                     break                                    else:                    txt += str(self._global.numtochar(col.red))                                    tmp_q = int(q)                tmp_q += 1                            tmp_c = int(c)            tmp_c += 1                    return txt                    def givedpfromlr(self, lr):         rtrn = None        rtrn = LingoNumber(1)        if lr >= LingoNumber(12):             rtrn = LingoNumber(4)                    elif lr >= LingoNumber(8):             rtrn = LingoNumber(3)                    elif lr >= LingoNumber(4):             rtrn = LingoNumber(2)                    return rtrn                    def makesilhouttefromimg(self, img, inverted):         inv = None        if (LingoGlobal.op_eq_b(img.depth, LingoNumber(32)) or LingoGlobal.op_eq_b(img.depth, LingoNumber(1))):             return img.makesilhouette(inverted)                    inv = self._global.image(img.width,img.height,LingoNumber(1))        inv.copypixels(LingoImage.Pxl,img.rect,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)),LingoPropertyList(LingoSymbol("color"), LingoNumber(255)))
        inv.copypixels(img,img.rect,img.rect,LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), self._global.color(LingoNumber(255),LingoNumber(255),LingoNumber(255))))
        if LingoGlobal.op_eq_b(inverted, LingoNumber(0)):             inv = self.makesilhouttefromimg(inv,LingoNumber(1))                    return inv                    def blurimage(self, img, blurblend):         opimg = None        l = None        h = None        v = None        pnt = None        opimg = self._global.image(img.width,img.height,LingoNumber(32))        l = LingoList()        tmp_h=int(-LingoNumber(3))        while tmp_h < LingoNumber(3):             h = LingoNumber(tmp_h)            tmp_v=int(-LingoNumber(3))            while tmp_v < LingoNumber(3):                 v = LingoNumber(tmp_v)                l.add(LingoList(LingoGlobal.op_add(LingoGlobal.op_sub(LingoNumber(100),LingoGlobal.op_mul(self.diag(LingoGlobal.point(h,v),LingoGlobal.point(LingoNumber(0),LingoNumber(0))),LingoNumber(10))),self._global.random(LingoNumber(9))),LingoGlobal.point(h,v)))
                tmp_v = int(v)                tmp_v += 1                            tmp_h = int(h)            tmp_h += 1                    l.sort()
        for tmp_pnt in l:             pnt = LingoNumber(tmp_pnt)            opimg.copypixels(img,img.rect,LingoGlobal.op_add(img.rect,LingoGlobal.rect(pnt[LingoNumber(2)],pnt[LingoNumber(2)])),LingoPropertyList(LingoSymbol("blend"), LingoGlobal.op_mul(LingoGlobal.op_div(self._global.member("blurShape").image.getpixel(LingoGlobal.op_add(pnt[LingoNumber(2)].loch,LingoNumber(3)),LingoGlobal.op_add(pnt[LingoNumber(2)].locv,LingoNumber(3))).red,LingoNumber(255.0000)),blurblend)))        return opimg                    def bluronblack(self, img, blurblend):         opimg = None        l = None        h = None        v = None        pnt = None        opimg = self._global.image(img.width,img.height,LingoNumber(32))        opimg.copypixels(LingoImage.Pxl,opimg.rect,LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(1),LingoNumber(1)))
        l = LingoList()        tmp_h=int(-LingoNumber(3))        while tmp_h < LingoNumber(3):             h = LingoNumber(tmp_h)            tmp_v=int(-LingoNumber(3))            while tmp_v < LingoNumber(3):                 v = LingoNumber(tmp_v)                l.add(LingoList(LingoGlobal.op_add(LingoGlobal.op_sub(LingoNumber(100),LingoGlobal.op_mul(self.diag(LingoGlobal.point(h,v),LingoGlobal.point(LingoNumber(0),LingoNumber(0))),LingoNumber(10))),self._global.random(LingoNumber(9))),LingoGlobal.point(h,v)))
                tmp_v = int(v)                tmp_v += 1                            tmp_h = int(h)            tmp_h += 1                    l.sort()
        for tmp_pnt in l:             pnt = LingoNumber(tmp_pnt)            opimg.copypixels(img,img.rect,LingoGlobal.op_add(img.rect,LingoGlobal.rect(pnt[LingoNumber(2)],pnt[LingoNumber(2)])),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("blend"), LingoGlobal.op_mul(LingoGlobal.op_div(self._global.member("blurShape").image.getpixel(LingoGlobal.op_add(pnt[LingoNumber(2)].loch,LingoNumber(3)),LingoGlobal.op_add(pnt[LingoNumber(2)].locv,LingoNumber(3))).red,LingoNumber(255.0000)),blurblend)))        return opimg                    def rotatetoquad(self, rct, deg):         dir = None        midpnt = None        toppnt = None        bottompnt = None        crossdir = None        pnt1 = None        pnt2 = None        pnt3 = None        pnt4 = None        dir = self.degtovec(deg.float)        midpnt = LingoGlobal.point(LingoGlobal.op_mul(LingoGlobal.op_add(rct.left,rct.right),LingoNumber(0.5000)),LingoGlobal.op_mul(LingoGlobal.op_add(rct.top,rct.bottom),LingoNumber(0.5000)))        toppnt = LingoGlobal.op_add(midpnt,LingoGlobal.op_mul(LingoGlobal.op_mul(dir,rct.height),LingoNumber(0.5000)))        bottompnt = LingoGlobal.op_sub(midpnt,LingoGlobal.op_mul(LingoGlobal.op_mul(dir,rct.height),LingoNumber(0.5000)))        crossdir = self.givedirfor90degrtoline(-dir,dir)        pnt1 = LingoGlobal.op_add(toppnt,LingoGlobal.op_mul(LingoGlobal.op_mul(crossdir,rct.width),LingoNumber(0.5000)))        pnt2 = LingoGlobal.op_sub(toppnt,LingoGlobal.op_mul(LingoGlobal.op_mul(crossdir,rct.width),LingoNumber(0.5000)))        pnt3 = LingoGlobal.op_sub(bottompnt,LingoGlobal.op_mul(LingoGlobal.op_mul(crossdir,rct.width),LingoNumber(0.5000)))        pnt4 = LingoGlobal.op_add(bottompnt,LingoGlobal.op_mul(LingoGlobal.op_mul(crossdir,rct.width),LingoNumber(0.5000)))        return LingoList(pnt1,pnt2,pnt3,pnt4)                    def flipquadh(self, qd):         return LingoList(qd[LingoNumber(2)],qd[LingoNumber(1)],qd[LingoNumber(4)],qd[LingoNumber(3)])                    def inversekinematic(self, va, vc, a, b, flip):         r = None        alph = None        r = self.diag(va,vc)        alph = LingoGlobal.op_mul(self.acos(self.restrict(LingoGlobal.op_div(LingoGlobal.op_sub(LingoGlobal.op_add(LingoGlobal.op_mul(r,r),LingoGlobal.op_mul(a,a)),LingoGlobal.op_mul(b,b)),LingoGlobal.op_mul(LingoGlobal.op_mul(LingoNumber(2.0000),r),a)),LingoNumber(0.1000),LingoNumber(0.9900))),LingoGlobal.op_div(LingoGlobal.op_mul(flip,LingoNumber(180.0000)),LingoGlobal.PI))        return LingoGlobal.op_add(va,LingoGlobal.op_mul(self.degtovec(LingoGlobal.op_add(self.lookatpoint(va,vc),alph)),a))                    def acos(self, a):         return LingoGlobal.op_mul(LingoNumber(2),LingoGlobal.atan(LingoGlobal.op_div(LingoGlobal.sqrt(LingoGlobal.op_sub(LingoNumber(1),LingoGlobal.op_mul(a,a))),LingoGlobal.op_add(LingoNumber(1),a))))                    def depthchangeimage(self, img, dp):         newimg = None        newimg = self._global.image(img.rect.width,img.rect.height,dp)        newimg.copypixels(img,img.rect,img.rect)
        return newimg                    def pasteshortcuthole(self, mem, pnt, dp, cl):         rctcenter = None        rct = None        idstr = None        dr = None        ps = None        cll = None        c = None        rctcenter = LingoGlobal.op_sub(LingoGlobal.op_sub(self.givemiddleoftile(pnt),LingoGlobal.op_mul(self.gRenderCameraTilePos,LingoNumber(20))),self.gRenderCameraPixelPos)        rctcenter = self.depthpnt(rctcenter,dp)        rct = LingoGlobal.op_add(LingoGlobal.rect(rctcenter,rctcenter),LingoGlobal.rect(-LingoNumber(10),-LingoNumber(10),LingoNumber(10),LingoNumber(10)))        idstr = ""        for tmp_dr in LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))):             dr = LingoNumber(tmp_dr)            if LingoGlobal.ToBool(LingoGlobal.op_add(pnt,dr).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),self.gLOprops.size.loch,self.gLOprops.size.locv))):                 if (self.gLEProps.matrix[LingoGlobal.op_add(pnt.loch,dr.loch)][LingoGlobal.op_add(pnt.locv,dr.locv)][LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(5)) > LingoNumber(0) or self.gLEProps.matrix[LingoGlobal.op_add(pnt.loch,dr.loch)][LingoGlobal.op_add(pnt.locv,dr.locv)][LingoNumber(1)][LingoNumber(2)].getpos(LingoNumber(4)) > LingoNumber(0)):                     idstr = LingoGlobal.concat(idstr,"1")                                    else:                    idstr = LingoGlobal.concat(idstr,"0")                                                else:                idstr = LingoGlobal.concat(idstr,"0")                                    ps = LingoList("0101","1010","1111","1100","0110","0011","1001","1110","0111","1011","1101","0000").getpos(idstr)        if LingoGlobal.op_eq_b(cl, "BORDER"):             cll = LingoList()            cll.add(LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),LingoNumber(0))))
            cll.add(LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1))))
            cll.add(LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(-LingoNumber(1),-LingoNumber(1))))
            cll.add(LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(-LingoNumber(2),LingoNumber(0))))
            cll.add(LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(2))))
            cll.add(LingoList(self._global.color(LingoNumber(255),LingoNumber(0),LingoNumber(0)),LingoGlobal.point(-LingoNumber(2),-LingoNumber(2))))
            cll.add(LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(1),LingoNumber(0))))
            cll.add(LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(0),LingoNumber(1))))
            cll.add(LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(1),LingoNumber(1))))
            cll.add(LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(2),LingoNumber(0))))
            cll.add(LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(0),LingoNumber(2))))
            cll.add(LingoList(self._global.color(LingoNumber(0),LingoNumber(0),LingoNumber(255)),LingoGlobal.point(LingoNumber(2),LingoNumber(2))))        else:            cll = LingoList(LingoList(cl,LingoGlobal.point(LingoNumber(0),LingoNumber(0))))                    for tmp_c in cll:             c = LingoNumber(tmp_c)            self._global.member(mem).image.copypixels(self._global.member("shortCutsGraf").image,LingoGlobal.op_add(rct,LingoGlobal.rect(c[LingoNumber(2)],c[LingoNumber(2)])),LingoGlobal.rect(LingoGlobal.op_mul(LingoNumber(20),LingoGlobal.op_sub(ps,LingoNumber(1))),LingoNumber(1),LingoGlobal.op_mul(LingoNumber(20),ps),LingoNumber(21)),LingoPropertyList(LingoSymbol("ink"), LingoNumber(36),LingoSymbol("color"), c[LingoNumber(1)]))                return None            def resizelevel(self, sze, addtilesleft, addtilestop):         newmatrix = None        newtematrix = None        q = None        ql = None        c = None        adder = None        effect = None        neweffmtrx = None        oldimg = None        newmatrix = LingoList()        newtematrix = LingoList()        tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.op_add(sze.loch,addtilesleft):             q = LingoNumber(tmp_q)            ql = LingoList()            tmp_c=int(LingoNumber(1))            while tmp_c < LingoGlobal.op_add(sze.locv,addtilestop):                 c = LingoNumber(tmp_c)                if (((LingoGlobal.op_sub(q,addtilesleft) <= self.gLEProps.matrix.count and LingoGlobal.op_sub(c,addtilestop) <= self.gLEProps.matrix[LingoNumber(1)].count) and LingoGlobal.op_sub(q,addtilesleft) > LingoNumber(0)) and LingoGlobal.op_sub(c,addtilestop) > LingoNumber(0)):                     adder = self.gLEProps.matrix[LingoGlobal.op_sub(q,addtilesleft)][LingoGlobal.op_sub(c,addtilestop)]                                    else:                    adder = LingoList(LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(1),LingoList()),LingoList(LingoNumber(1),LingoList()))                                    ql.add(adder)
                tmp_c = int(c)                tmp_c += 1                            newmatrix.add(ql)
            tmp_q = int(q)            tmp_q += 1                    tmp_q=int(LingoNumber(1))        while tmp_q < LingoGlobal.op_add(sze.loch,addtilesleft):             q = LingoNumber(tmp_q)            ql = LingoList()            tmp_c=int(LingoNumber(1))            while tmp_c < LingoGlobal.op_add(sze.locv,addtilestop):                 c = LingoNumber(tmp_c)                if (((LingoGlobal.op_add(q,addtilesleft) <= self.gTEprops.tlmatrix.count and LingoGlobal.op_add(c,addtilestop) <= self.gTEprops.tlmatrix[LingoNumber(1)].count) and LingoGlobal.op_sub(q,addtilesleft) > LingoNumber(0)) and LingoGlobal.op_sub(c,addtilestop) > LingoNumber(0)):                     adder = self.gTEprops.tlmatrix[LingoGlobal.op_sub(q,addtilesleft)][LingoGlobal.op_sub(c,addtilestop)]                                    else:                    adder = LingoList(LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0)),LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0)),LingoPropertyList(LingoSymbol("tp"), "default",LingoSymbol("data"), LingoNumber(0)))                                    ql.add(adder)
                tmp_c = int(c)                tmp_c += 1                            newtematrix.add(ql)
            tmp_q = int(q)            tmp_q += 1                    for tmp_effect in self.gEEprops.effects:             effect = LingoNumber(tmp_effect)            neweffmtrx = LingoList()            tmp_q=int(LingoNumber(1))            while tmp_q < LingoGlobal.op_add(sze.loch,addtilesleft):                 q = LingoNumber(tmp_q)                ql = LingoList()                tmp_c=int(LingoNumber(1))                while tmp_c < LingoGlobal.op_add(sze.locv,addtilestop):                     c = LingoNumber(tmp_c)                    if (((LingoGlobal.op_add(q,addtilesleft) <= effect.mtrx.count and LingoGlobal.op_add(c,addtilestop) <= effect.mtrx[LingoNumber(1)].count) and LingoGlobal.op_sub(q,addtilesleft) > LingoNumber(0)) and LingoGlobal.op_sub(c,addtilestop) > LingoNumber(0)):                         adder = effect.mtrx[LingoGlobal.op_sub(q,addtilesleft)][LingoGlobal.op_sub(c,addtilestop)]                        ql.add(adder)                    else:                        ql.add(LingoNumber(0))                    tmp_c = int(c)                    tmp_c += 1                                    neweffmtrx.add(ql)
                tmp_q = int(q)                tmp_q += 1                            effect.mtrx = neweffmtrx                    self.gLEProps.matrix = newmatrix        self.gTEprops.tlmatrix = newtematrix        self.gLOprops.size = LingoGlobal.op_add(sze,LingoGlobal.point(addtilesleft,addtilestop))        self.gLASTDRAWWASFULLANDMINI = LingoNumber(0)        oldimg = self._global.member("lightImage").image.duplicate()        self._global.member("lightImage").image = self._global.image(LingoGlobal.op_add(LingoGlobal.op_mul(self.gLOprops.size.loch,LingoNumber(20)),LingoNumber(300)),LingoGlobal.op_add(LingoGlobal.op_mul(self.gLOprops.size.locv,LingoNumber(20)),LingoNumber(300)),LingoNumber(1))        self._global.member("lightImage").image.copypixels(oldimg,oldimg.rect,oldimg.rect)        return None            def resetgenveditorprops(self):         self.gEnvEditorProps = LingoPropertyList(LingoSymbol("waterlevel"), -LingoNumber(1),LingoSymbol("waterinfront"), LingoNumber(1),LingoSymbol("wavelength"), LingoNumber(60),LingoSymbol("waveamplitude"), LingoNumber(5),LingoSymbol("wavespeed"), LingoNumber(10))                return None            def resetpropeditorprops(self):         self.gPEprops = LingoPropertyList(LingoSymbol("props"), LingoList(),LingoSymbol("lastkeys"), LingoList(),LingoSymbol("keys"), LingoList(),LingoSymbol("worklayer"), LingoNumber(1),LingoSymbol("lstmsps"), LingoGlobal.point(LingoNumber(0),LingoNumber(0)),LingoSymbol("pmPos"), LingoGlobal.point(LingoNumber(1),LingoNumber(1)),LingoSymbol("pmsavposl"), LingoList(),LingoSymbol("proprotation"), LingoNumber(0),LingoSymbol("propstretchx"), LingoNumber(1),LingoSymbol("propstretchy"), LingoNumber(1),LingoSymbol("propflipx"), LingoNumber(1),LingoSymbol("propflipy"), LingoNumber(1),LingoSymbol("depth"), LingoNumber(0),LingoSymbol("color"), LingoNumber(0))                return None            