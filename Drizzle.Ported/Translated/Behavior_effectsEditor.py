from Drizzle.Runtime import *## Behavior script: effectsEditor#class effectsEditor(LingoBehaviorScript):     def __init__(self):         super().__init__()            def exitframe(self):         q = None        l = None        rct = None        mstile = None        actn = None        actn2 = None        sizeadd = None        if LingoGlobal.ToBool(_movieScript.showControls):             _global.sprite(LingoNumber(241)).blend = LingoNumber(100)                    else:            _global.sprite(LingoNumber(241)).blend = LingoNumber(0)                    for tmp_q in LingoGlobal.pyrange(LingoNumber(1), LingoNumber(4)):             q = tmp_q            if ((LingoGlobal.ToBool(_global._key.keypressed(LingoList(LingoNumber(86),LingoNumber(91),LingoNumber(88),LingoNumber(84))[q])) and LingoGlobal.op_eq_b(_movieScript.gDirectionKeys[q], LingoNumber(0))) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):                 _movieScript.gLEProps.campos = LingoGlobal.op_add(_movieScript.gLEProps.campos,LingoGlobal.op_mul(LingoList(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),-LingoNumber(1)),LingoGlobal.point(LingoNumber(1),LingoNumber(0)),LingoGlobal.point(LingoNumber(0),LingoNumber(1)))[q],LingoGlobal.op_add(LingoGlobal.op_add(LingoNumber(1),LingoGlobal.op_mul(LingoNumber(9),_global._key.keypressed(LingoNumber(83)))),LingoGlobal.op_mul(LingoNumber(34),_global._key.keypressed(LingoNumber(85))))))                if not LingoGlobal.ToBool(_global._key.keypressed(LingoNumber(92))):                     if _movieScript.gLEProps.campos.loch < -LingoNumber(1):                         _movieScript.gLEProps.campos.loch = -LingoNumber(1)                                            if _movieScript.gLEProps.campos.locv < -LingoNumber(1):                         _movieScript.gLEProps.campos.locv = -LingoNumber(1)                                            if _movieScript.gLEProps.campos.loch > LingoGlobal.op_sub(_movieScript.gLEProps.matrix.count,LingoNumber(51)):                         _movieScript.gLEProps.campos.loch = LingoGlobal.op_sub(_movieScript.gLEProps.matrix.count,LingoNumber(51))                                            if _movieScript.gLEProps.campos.locv > LingoGlobal.op_sub(_movieScript.gLEProps.matrix[LingoNumber(1)].count,LingoNumber(39)):                         _movieScript.gLEProps.campos.locv = LingoGlobal.op_sub(_movieScript.gLEProps.matrix[LingoNumber(1)].count,LingoNumber(39))                                                            for tmp_l in LingoGlobal.pyrange(LingoNumber(1), LingoNumber(3)):                     l = tmp_l                    _movieScript.lvleditdraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),_movieScript.gLOprops.size.loch,_movieScript.gLOprops.size.locv),l)
                    _movieScript.tedraw(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),_movieScript.gLOprops.size.loch,_movieScript.gLOprops.size.locv),l)
                    tmp_l = l                                    _movieScript.drawshortcutsimg(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),_movieScript.gLOprops.size.loch,_movieScript.gLOprops.size.locv),LingoNumber(16))
                _global.script("propEditor").renderpropsimage()
                self.drawefmtrx(_movieScript.gEEprops.editeffect)            _movieScript.gDirectionKeys[q] = _global._key.keypressed(LingoList(LingoNumber(86),LingoNumber(91),LingoNumber(88),LingoNumber(84))[q])            tmp_q = q                    if LingoGlobal.op_eq_b(_movieScript.gEnvEditorProps.waterlevel, -LingoNumber(1)):             _global.sprite(LingoNumber(220)).rect = LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(0),LingoNumber(0))                    else:            rct = LingoGlobal.op_sub(LingoGlobal.rect(LingoNumber(0),LingoGlobal.op_sub(LingoGlobal.op_sub(_movieScript.gLOprops.size.locv,_movieScript.gEnvEditorProps.waterlevel),_movieScript.gLOprops.extratiles[LingoNumber(4)]),_movieScript.gLOprops.size.loch,_movieScript.gLOprops.size.locv),LingoGlobal.rect(_movieScript.gLEProps.campos,_movieScript.gLEProps.campos))            _global.sprite(LingoNumber(220)).rect = LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.op_add(rct.intersect(LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(52),LingoNumber(40))),LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoNumber(1),LingoNumber(1))),LingoGlobal.rect(LingoNumber(16),LingoNumber(16),LingoNumber(16),LingoNumber(16))),LingoGlobal.rect(LingoNumber(0),-LingoNumber(8),LingoNumber(0),LingoNumber(0)))                    mstile = LingoGlobal.op_sub(LingoGlobal.op_div(_global._mouse.mouseloc,LingoGlobal.point(LingoNumber(16.0000),LingoNumber(16.0000))),LingoGlobal.point(LingoNumber(0.4999),LingoNumber(0.4999)))        mstile = LingoGlobal.point(mstile.loch.integer,mstile.locv.integer)        mstile = LingoGlobal.op_add(mstile,_movieScript.gLEProps.campos)        actn = LingoNumber(0)        actn2 = LingoNumber(0)        _movieScript.gEEprops.keys.m1 = LingoGlobal.op_and(_global._mouse.mousedown,LingoGlobal.op_ne(_global._movie.window.sizestate,minimized))        if (LingoGlobal.ToBool(_movieScript.gEEprops.keys.m1) and LingoGlobal.op_eq_b(_movieScript.gEEprops.lastkeys.m1, LingoNumber(0))):             actn = LingoNumber(1)                    _movieScript.gEEprops.lastkeys.m1 = _movieScript.gEEprops.keys.m1        _movieScript.gEEprops.keys.m2 = LingoGlobal.op_and(_global._mouse.rightmousedown,LingoGlobal.op_ne(_global._movie.window.sizestate,minimized))        if (LingoGlobal.ToBool(_movieScript.gEEprops.keys.m2) and LingoGlobal.op_eq_b(_movieScript.gEEprops.lastkeys.m2, LingoNumber(0))):             actn2 = LingoNumber(1)                    _movieScript.gEEprops.lastkeys.m2 = _movieScript.gEEprops.keys.m2        if LingoGlobal.op_ne_b(mstile, _movieScript.gEEprops.lstmsps):             actn = _movieScript.gEEprops.keys.m1            actn2 = _movieScript.gEEprops.keys.m2                    _movieScript.gEEprops.lstmsps = mstile        if LingoGlobal.ToBool(actn):             self.usebrush(mstile,LingoNumber(1))        if LingoGlobal.ToBool(actn2):             self.usebrush(mstile,-LingoNumber(1))        if LingoGlobal.ToBool(self.checkkey("N")):             self.initmode("createNew")        if LingoGlobal.op_ne_b(_movieScript.gEEprops.editeffect, LingoGlobal.VOID):             if LingoGlobal.ToBool(self.checkkey("E")):                 self.initmode("chooseEffect")                    match _movieScript.gEEprops.mode.lower():             case "createnew":                if LingoGlobal.ToBool(self.checkkey("W")):                     self.updateeffectsmenu(LingoGlobal.point(LingoNumber(0),-LingoNumber(1)))                if LingoGlobal.ToBool(self.checkkey("S")):                     self.updateeffectsmenu(LingoGlobal.point(LingoNumber(0),LingoNumber(1)))                if LingoGlobal.ToBool(self.checkkey("A")):                     self.updateeffectsmenu(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))                if LingoGlobal.ToBool(self.checkkey("D")):                     self.updateeffectsmenu(LingoGlobal.point(LingoNumber(1),LingoNumber(0)))                if (LingoGlobal.ToBool(_global._key.keypressed(" ")) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):                     self.neweffect()
                    _movieScript.gEEprops.editeffect = _movieScript.gEEprops.effects.count                    _movieScript.gEEprops.selectediteffect = _movieScript.gEEprops.effects.count                    self.initmode("editEffect")                _global.sprite(LingoNumber(244)).rect = LingoGlobal.rect(-LingoNumber(100),-LingoNumber(100),-LingoNumber(100),-LingoNumber(100))                            case "chooseeffect":                if LingoGlobal.ToBool(self.checkkey("W")):                     self.updateeffectsl(-LingoNumber(1))                if LingoGlobal.ToBool(self.checkkey("S")):                     self.updateeffectsl(LingoNumber(1))                if LingoGlobal.op_ne_b(_movieScript.gEEprops.editeffect, LingoGlobal.VOID):                     if ((LingoGlobal.ToBool(_global._key.keypressed(" ")) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)) and LingoGlobal.op_eq_b(_movieScript.lstSpace, LingoNumber(0))):                         _movieScript.gEEprops.editeffect = _movieScript.gEEprops.selectediteffect                        self.initmode("editEffect")
                        self.updateeffectsl(LingoNumber(0))                                    _global.sprite(LingoNumber(244)).rect = LingoGlobal.rect(-LingoNumber(100),-LingoNumber(100),-LingoNumber(100),-LingoNumber(100))                            case "editeffect":                if LingoGlobal.ToBool(self.checkkey("r")):                     _movieScript.gEEprops.brushsize = _movieScript.restrict(LingoGlobal.op_add(_movieScript.gEEprops.brushsize,LingoNumber(1)),LingoNumber(1),LingoNumber(10))                                    if LingoGlobal.ToBool(self.checkkey("f")):                     _movieScript.gEEprops.brushsize = _movieScript.restrict(LingoGlobal.op_sub(_movieScript.gEEprops.brushsize,LingoNumber(1)),LingoNumber(1),LingoNumber(10))                                    if LingoGlobal.ToBool(self.checkkey("W")):                     self.updateediteffect(LingoGlobal.point(LingoNumber(0),-LingoNumber(1)))                if LingoGlobal.ToBool(self.checkkey("S")):                     self.updateediteffect(LingoGlobal.point(LingoNumber(0),LingoNumber(1)))                if LingoGlobal.ToBool(self.checkkey("A")):                     self.updateediteffect(LingoGlobal.point(-LingoNumber(1),LingoNumber(0)))                if LingoGlobal.ToBool(self.checkkey("D")):                     self.updateediteffect(LingoGlobal.point(LingoNumber(1),LingoNumber(0)))                if LingoGlobal.op_ne_b(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect], LingoGlobal.VOID):                     if LingoGlobal.op_eq_b(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(1)], "seed"):                         self.changeoption()                    elif LingoGlobal.op_eq_b(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(1)], "Leaf Density"):                         self.changeoption()                    elif ((LingoGlobal.ToBool(_global._key.keypressed(" ")) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)) and LingoGlobal.op_eq_b(_movieScript.lstSpace, LingoNumber(0))):                         self.changeoption()                                    sizeadd = LingoGlobal.op_mul(LingoGlobal.rect(LingoGlobal.op_add(-_movieScript.gEEprops.brushsize,LingoNumber(1)),LingoGlobal.op_add(-_movieScript.gEEprops.brushsize,LingoNumber(1)),LingoGlobal.op_sub(_movieScript.gEEprops.brushsize,LingoNumber(1)),LingoGlobal.op_sub(_movieScript.gEEprops.brushsize,LingoNumber(1))),LingoGlobal.rect(LingoNumber(16),LingoNumber(16),LingoNumber(16),LingoNumber(16)))                _global.sprite(LingoNumber(244)).rect = LingoGlobal.op_add(LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.rect(LingoGlobal.op_sub(mstile,_movieScript.gLEProps.campos),LingoGlobal.op_sub(mstile,_movieScript.gLEProps.campos)),LingoGlobal.rect(LingoNumber(16),LingoNumber(16),LingoNumber(16),LingoNumber(16))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(16),LingoNumber(16))),sizeadd)                                    _global.sprite(LingoNumber(243)).rect = LingoGlobal.op_add(LingoGlobal.op_mul(LingoGlobal.rect(LingoGlobal.op_sub(mstile,_movieScript.gLEProps.campos),LingoGlobal.op_sub(mstile,_movieScript.gLEProps.campos)),LingoGlobal.rect(LingoNumber(16),LingoNumber(16),LingoNumber(16),LingoNumber(16))),LingoGlobal.rect(LingoNumber(0),LingoNumber(0),LingoNumber(16),LingoNumber(16)))        _movieScript.lstSpace = LingoGlobal.op_and(_global._key.keypressed(" "),LingoGlobal.op_ne(_global._movie.window.sizestate,minimized))        _global.script("levelOverview").gotoeditor()
        _global.go(_global.the_frame)        return None            def checkkey(self, key):         rtrn = None        rtrn = LingoNumber(0)        _movieScript.gEEprops.keys[LingoGlobal.symbol(key)] = LingoGlobal.op_and(_global._key.keypressed(key),LingoGlobal.op_ne(_global._movie.window.sizestate,minimized))        if (LingoGlobal.ToBool(_movieScript.gEEprops.keys[LingoGlobal.symbol(key)]) and LingoGlobal.op_eq_b(_movieScript.gEEprops.lastkeys[LingoGlobal.symbol(key)], LingoNumber(0))):             rtrn = LingoNumber(1)                    _movieScript.gEEprops.lastkeys[LingoGlobal.symbol(key)] = _movieScript.gEEprops.keys[LingoGlobal.symbol(key)]        return rtrn                    def updateeffectsmenu(self, mv):         txt = None        tl = None        efn = None        _movieScript.gEEprops.empos = LingoGlobal.op_add(_movieScript.gEEprops.empos,mv)        if _movieScript.gEEprops.empos.loch < LingoNumber(1):             _movieScript.gEEprops.empos.loch = _movieScript.gEffects.count                    elif _movieScript.gEEprops.empos.loch > _movieScript.gEffects.count:             _movieScript.gEEprops.empos.loch = LingoNumber(1)                    if _movieScript.gEEprops.empos.locv < LingoNumber(1):             _movieScript.gEEprops.empos.locv = _movieScript.gEffects[_movieScript.gEEprops.empos.loch].efs.count                    elif _movieScript.gEEprops.empos.locv > _movieScript.gEffects[_movieScript.gEEprops.empos.loch].efs.count:             _movieScript.gEEprops.empos.locv = LingoNumber(1)                    txt = ""        txt += str(LingoGlobal.concat_space("[",_movieScript.gEffects[_movieScript.gEEprops.empos.loch].nm,"]"))        txt += str(LingoGlobal.RETURN)        for tmp_tl in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gEffects[_movieScript.gEEprops.empos.loch].efs.count):             tl = tmp_tl            if LingoGlobal.op_eq_b(tl, _movieScript.gEEprops.empos.locv):                 txt += str(LingoGlobal.concat_space("-",_movieScript.gEffects[_movieScript.gEEprops.empos.loch].efs[tl].nm,"-",LingoGlobal.RETURN))                            else:                txt += str(LingoGlobal.concat_space(_movieScript.gEffects[_movieScript.gEEprops.empos.loch].efs[tl].nm,LingoGlobal.RETURN))                            tmp_tl = tl                    _global.member("tileMenu").text = txt        efn = _movieScript.gEffects[_movieScript.gEEprops.empos.loch].efs[_movieScript.gEEprops.empos.locv]        _global.member("Drought Reserve text").text = ""                return None            def updateeffectsl(self, mv):         txt = None        ef = None        txt = ""        if LingoGlobal.op_ne_b(_movieScript.gEEprops.effects.count, LingoNumber(0)):             _movieScript.gEEprops.selectediteffect = LingoGlobal.op_add(_movieScript.gEEprops.selectediteffect,mv)            if _movieScript.gEEprops.selectediteffect < LingoNumber(1):                 _movieScript.gEEprops.selectediteffect = _movieScript.gEEprops.effects.count                            elif _movieScript.gEEprops.selectediteffect > _movieScript.gEEprops.effects.count:                 _movieScript.gEEprops.selectediteffect = LingoNumber(1)                            txt += str("<EFFECTS>")            txt += str(LingoGlobal.RETURN)            for tmp_ef in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gEEprops.effects.count):                 ef = tmp_ef                if LingoGlobal.op_eq_b(ef, _movieScript.gEEprops.editeffect):                     txt += str(LingoGlobal.concat(_global.str(ef),". *",_movieScript.gEEprops.effects[ef].nm,"*"))                    _global.member("editEffectName").text = LingoGlobal.concat(LingoGlobal.concat_space(_movieScript.gEEprops.effects[ef].nm,"("),_global.str(ef),")")                                    elif LingoGlobal.op_eq_b(ef, _movieScript.gEEprops.selectediteffect):                     txt += str(LingoGlobal.concat(_global.str(ef),". -",_movieScript.gEEprops.effects[ef].nm,"-"))                                    else:                    txt += str(LingoGlobal.concat(_global.str(ef),". ",_movieScript.gEEprops.effects[ef].nm))                                    txt += str(LingoGlobal.RETURN)                tmp_ef = ef                            self.drawefmtrx(_movieScript.gEEprops.selectediteffect)        else:            _global.member("editEffectName").text = "No effects added"            txt += str("<EFFECTS>")            txt += str(LingoGlobal.RETURN)            txt += str("No effects added")                    _global.member("effectsL").text = txt                return None            def neweffect(self):         ef = None        fillwith = None        crossscreen = None        q = None        ql = None        c = None        ef = LingoPropertyList(dict(nm = _movieScript.gEffects[_movieScript.gEEprops.empos.loch].efs[_movieScript.gEEprops.empos.locv].nm,tp = "nn",crossscreen = LingoNumber(0),mtrx = LingoList(),options = LingoList(LingoList("Delete/Move",LingoList("Delete","Move Back","Move Forth"),""))))        fillwith = LingoNumber(0)        match ef.nm.lower():             case "slime":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(130))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"Yes"))            case "lslime":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(130))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))            case "fat slime":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(200))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"Yes"))            case "scales":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(200))
                ef.addprop(affectopenareas,LingoNumber(0.0500))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "slimex3":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoGlobal.op_mul(LingoNumber(130),LingoNumber(3)))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"Yes"))            case "decalsonlyslime":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(130))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "melt":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(60))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"No"))            case "rust":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(60))
                ef.addprop(affectopenareas,LingoNumber(0.2000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"No"))            case "barnacles":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(60))
                ef.addprop(affectopenareas,LingoNumber(0.3000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"No"))            case "colored barnacles":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(60))
                ef.addprop(affectopenareas,LingoNumber(0.3000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Effect Color",LingoList("EffectColor1","EffectColor2","None"),"EffectColor2"))            case "clovers":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(20))
                ef.addprop(affectopenareas,LingoNumber(0.2000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))            case "ivy":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.options.add(LingoList("Color Intensity",LingoList("High","Medium","Low","None","Random"),"Medium"))
                ef.options.add(LingoList("Fruit Density",LingoList("High","Medium","Low","None"),"None"))
                ef.options.add(LingoList("Leaf Density",LingoList(),_global.random(LingoNumber(100))))
                ef.crossscreen = LingoNumber(1)                            case "little flowers":                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.options.add(LingoList("Detail Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Rotate",LingoList("Off","On"),"Off"))            case "erode":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(80))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "sand":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(80))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Effect Color",LingoList("EffectColor1","EffectColor2","None"),"None"))            case "super erode":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(60))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "ultra super erode":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(60))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "roughen":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(30))
                ef.addprop(affectopenareas,LingoNumber(0.0500))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "impacts":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(75))
                ef.addprop(affectopenareas,LingoNumber(0.0500))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "super melt":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(50))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"No"))            case "destructive melt":                ef.tp = "standardErosion"                ef.addprop(repeats,LingoNumber(50))
                ef.addprop(affectopenareas,LingoNumber(0.5000))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("3D",LingoList("Off","On"),"Off"))
                ef.options.add(LingoList("Affect Gradients and Decals",LingoList("Yes","No"),"No"))            case "rubble":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "colored rubble":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Effect Color",LingoList("EffectColor1","EffectColor2","None"),"EffectColor2"))            case "fungi flowers" | "lighthouse flowers":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"1"))            case "colored fungi flowers" | "colored lighthouse flowers":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"1"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))            case "foliage" | "high grass" | "high fern" | "mistletoe" | "reeds" | "lavenders":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))            case "ring chains":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Effect Color",LingoList("EffectColor1","EffectColor2","None"),"None"))            case "assorted trash":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Effect Color",LingoList("EffectColor1","EffectColor2","None"),"None"))            case "fern" | "giant mushroom" | "sprawlbush" | "featherfern" | "fungus tree":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"1"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))            case "root grass" | "growers" | "cacti" | "rain moss" | "dense mold" | "seed pods" | "grass" | "arm growers" | "horse tails" | "circuit plants" | "feather plants" | "mini growers" | "left facing kelp" | "right facing kelp" | "club moss" | "moss wall" | "mixed facing kelp" | "bubble grower":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                if LingoList("Arm Growers","Growers","Mini Growers","Left Facing Kelp","Right Facing Kelp","Mixed Facing Kelp","Bubble Grower").getpos(ef.nm) > LingoNumber(0):                     ef.crossscreen = LingoNumber(1)                                                case "rollers" | "thorn growers" | "garbage spirals" | "spinets" | "small springs" | "fuzzy growers":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.crossscreen = LingoNumber(1)                            case "wires":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Fatness",LingoList("1px","2px","3px","random"),"2px"))
                crossscreen = LingoNumber(1)                            case "chains":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Size",LingoList("Small","FAT"),"Small"))
                ef.crossscreen = LingoNumber(1)                            case "colored wires":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Fatness",LingoList("1px","2px","3px","random"),"2px"))
                ef.options.add(LingoList("Effect Color",LingoList("EffectColor1","EffectColor2","None"),"EffectColor2"))
                crossscreen = LingoNumber(1)                            case "colored chains":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Size",LingoList("Small","FAT"),"Small"))
                ef.options.add(LingoList("Effect Color",LingoList("EffectColor1","EffectColor2","None"),"EffectColor2"))
                ef.crossscreen = LingoNumber(1)                            case "blackgoo":                fillwith = LingoNumber(100)                            case "super blackgoo":                fillwith = LingoNumber(100)                            case "darkslime":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "hang roots" | "thick roots" | "shadow plants":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.crossscreen = LingoNumber(1)                            case "colored hang roots" | "colored thick roots":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.crossscreen = LingoNumber(1)                            case "colored shadow plants":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.crossscreen = LingoNumber(1)                            case "root plants":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))
                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.crossscreen = LingoNumber(1)                            case "restore as scaffolding":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "restore as pipes":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "ceramic chaos":                ef.options.add(LingoList("Ceramic Color",LingoList("None","Colored"),"Colored"))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "daddycorruption":                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "wastewater mold":                ef.options.add(LingoList("Color",LingoList("Color1","Color2","Dead"),"Color2"))
                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "corruption no eye" | "slag":                ef.options.add(LingoList("Layers",LingoList("All","1","2","3","1:st and 2:nd","2:nd and 3:rd"),"All"))            case "stained glass properties":                ef.options.add(LingoList("Variation",LingoList("1","2","3"),"1"))
                ef.options.add(LingoList("Color 1",LingoList("EffectColor1","EffectColor2","None"),"EffectColor1"))
                ef.options.add(LingoList("Color 2",LingoList("EffectColor1","EffectColor2","None"),"EffectColor2"))                    for tmp_q in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gLOprops.size.loch):             q = tmp_q            ql = LingoList()            for tmp_c in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gLOprops.size.locv):                 c = tmp_c                ql.add(fillwith)
                tmp_c = c                            ef.mtrx.add(ql)
            tmp_q = q                    ef.options.add(LingoList("Seed",LingoList(),_global.random(LingoNumber(500))))
        _movieScript.gEEprops.effects.add(ef)
        self.updateeffectsl(LingoNumber(0))        return None            def usebrush(self, pnt, fac):         strength = None        rct = None        q = None        c = None        val = None        digfac = None        if LingoGlobal.op_eq_b(_movieScript.gEEprops.mode, "editEffect"):             strength = LingoGlobal.op_add(LingoNumber(10),LingoGlobal.op_mul(LingoNumber(90),_global._key.keypressed("T")))            if LingoList("BlackGoo","Fungi Flowers","Lighthouse Flowers","Colored Fungi Flowers","Colored Lighthouse Flowers","High Fern","High Grass","Fern","Giant Mushroom","Sprawlbush","featherFern","Fungus Tree","Restore As Scaffolding","Restore As Pipes","Small Springs","Super BlackGoo","Stained Glass Properties").getpos(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].nm) > LingoNumber(0):                 strength = LingoNumber(10000)                if (LingoGlobal.op_ne_b(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].nm, "BlackGoo") and LingoGlobal.op_ne_b(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].nm, "Super BlackGoo")):                     _movieScript.gEEprops.brushsize = LingoNumber(1)                                                rct = LingoGlobal.op_add(LingoGlobal.rect(pnt,pnt),LingoGlobal.rect(-_movieScript.gEEprops.brushsize,-_movieScript.gEEprops.brushsize,_movieScript.gEEprops.brushsize,_movieScript.gEEprops.brushsize))            for tmp_q in LingoGlobal.pyrange(rct.left, rct.right):                 q = tmp_q                for tmp_c in LingoGlobal.pyrange(rct.top, rct.bottom):                     c = tmp_c                    if LingoGlobal.ToBool(LingoGlobal.point(q,c).inside(LingoGlobal.rect(LingoNumber(1),LingoNumber(1),LingoGlobal.op_add(_movieScript.gLOprops.size.loch,LingoNumber(1)),LingoGlobal.op_add(_movieScript.gLOprops.size.locv,LingoNumber(1))))):                         val = _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].mtrx[q][c]                        digfac = LingoGlobal.op_sub(LingoNumber(1.0000),LingoGlobal.op_div(_movieScript.diag(LingoGlobal.point(q,c),pnt).float,_movieScript.gEEprops.brushsize))                        if digfac > LingoNumber(0):                             val = _movieScript.restrict(LingoGlobal.op_add(val,LingoGlobal.op_mul(LingoGlobal.op_mul(strength,digfac),fac)),LingoNumber(0),LingoNumber(100))                            _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].mtrx[q][c] = val                            self.updateeffectgraph(LingoGlobal.point(q,c),val)                                            tmp_c = c                                    tmp_q = q                                            return None            def drawefmtrx(self, l):         a = None        b = None        if (_movieScript.gEEprops.effects.count > LingoNumber(0) and l > LingoNumber(0)):             for tmp_a in LingoGlobal.pyrange(_movieScript.gLEProps.campos.loch, LingoGlobal.op_add(_movieScript.gLEProps.campos.loch,LingoNumber(52))):                 a = tmp_a                for tmp_b in LingoGlobal.pyrange(_movieScript.gLEProps.campos.locv, LingoGlobal.op_add(_movieScript.gLEProps.campos.locv,LingoNumber(40))):                     b = tmp_b                    if (((a > LingoNumber(0) and a <= _movieScript.gLOprops.size.loch) and b > LingoNumber(0)) and b <= _movieScript.gLOprops.size.locv):                         self.updateeffectgraph(LingoGlobal.point(a,b),_movieScript.gEEprops.effects[l].mtrx[a][b])                    else:                        self.updateeffectgraph(LingoGlobal.point(a,b),-LingoNumber(1))                    tmp_b = b                                    tmp_a = a                                    else:            _global.member("effectsMatrix").image.copypixels(LingoImage.Pxl,_global.member("effectsMatrix").image.rect,LingoImage.Pxl.rect)                return None            def updateeffectgraph(self, tile, strength):         if LingoGlobal.op_eq_b(strength, -LingoNumber(1)):             _global.member("effectsMatrix").image.setpixel(LingoGlobal.op_sub(LingoGlobal.op_sub(tile.loch,_movieScript.gLEProps.campos.loch),LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_sub(tile.locv,_movieScript.gLEProps.campos.locv),LingoNumber(1)),_global.color(LingoNumber(0),LingoNumber(0),LingoNumber(0)))        else:            strength = LingoGlobal.op_div(strength,LingoNumber(100.0000))            _global.member("effectsMatrix").image.setpixel(LingoGlobal.op_sub(LingoGlobal.op_sub(tile.loch,_movieScript.gLEProps.campos.loch),LingoNumber(1)),LingoGlobal.op_sub(LingoGlobal.op_sub(tile.locv,_movieScript.gLEProps.campos.locv),LingoNumber(1)),_global.color(LingoGlobal.op_sub(LingoNumber(255),LingoGlobal.op_mul(strength,LingoNumber(255))),LingoGlobal.op_mul(LingoNumber(255),strength),LingoGlobal.op_sub(LingoNumber(255),LingoGlobal.op_mul(strength,LingoNumber(255)))))                return None            def initmode(self, md):         match md.lower():             case "chooseeffect":                if _movieScript.gEEprops.effects.count > LingoNumber(0):                     _movieScript.gEEprops.selectediteffect = _movieScript.gEEprops.editeffect                    _global.sprite(LingoNumber(229)).rect = LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(LingoNumber(53),LingoNumber(16)),LingoNumber(8)),LingoGlobal.op_mul(LingoNumber(10),LingoNumber(16)),LingoGlobal.op_sub(LingoNumber(1366),LingoNumber(8)),LingoGlobal.op_mul(LingoNumber(41),LingoNumber(16)))                    _global.member("EEhelp").text = "Use W, S and the spacebar to select an effect to edit. Press N to return to the new effects menu."                                                case "editeffect":                _global.sprite(LingoNumber(229)).rect = LingoGlobal.rect(LingoNumber(8),LingoGlobal.op_mul(LingoNumber(42),LingoNumber(16)),LingoGlobal.op_sub(LingoNumber(1366),LingoNumber(8)),LingoGlobal.op_sub(LingoNumber(768),LingoNumber(8)))                _global.member("EEhelp").text = "Edit effect: Use W, A, S, D to change the settings of the effect. Press the spacebar to activate the selected option. Use the left and right mouse buttons to change the effect matrix. Press T while clicking to increase the strength of the brush. Press E to edit effects added previously. Press N to return to the new effects menu."                            case "createnew":                _global.sprite(LingoNumber(229)).rect = LingoGlobal.rect(LingoGlobal.op_add(LingoGlobal.op_mul(LingoNumber(53),LingoNumber(16)),LingoNumber(8)),LingoNumber(8),LingoGlobal.op_sub(LingoNumber(1366),LingoNumber(8)),LingoGlobal.op_mul(LingoNumber(10),LingoNumber(16)))                _global.member("EEhelp").text = "Create new: Use the W, A, S, D keys and the spacebar to select an effect to add. Press E to edit effects added previously."                            case _:                 _global.sprite(LingoNumber(229)).rect = LingoGlobal.rect(-LingoNumber(1),-LingoNumber(1),-LingoNumber(1),-LingoNumber(1))                _global.member("EEhelp").text = "---"                                    _movieScript.gEEprops.mode = md        self.updatealltext()        return None            def updateediteffect(self, mv):         txt = None        ef = None        if LingoGlobal.op_ne_b(_movieScript.gEEprops.effects, LingoList()):             if _movieScript.gEEprops.editeffect > _movieScript.gEEprops.effects.count:                 _movieScript.gEEprops.editeffect = _movieScript.gEEprops.effects.count                            _movieScript.gEEprops.empos = LingoGlobal.op_add(_movieScript.gEEprops.empos,mv)            if _movieScript.gEEprops.empos.locv > _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options.count:                 _movieScript.gEEprops.empos.locv = LingoNumber(1)                            elif _movieScript.gEEprops.empos.locv < LingoNumber(1):                 _movieScript.gEEprops.empos.locv = _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options.count                            if _movieScript.gEEprops.empos.loch > _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(2)].count:                 _movieScript.gEEprops.empos.loch = LingoNumber(1)                            elif _movieScript.gEEprops.empos.loch < LingoNumber(1):                 _movieScript.gEEprops.empos.loch = _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(2)].count                            txt = ""            txt += str(LingoGlobal.concat_space("[",_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(1)],"]:",_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)]))            txt += str(LingoGlobal.RETURN)            for tmp_ef in LingoGlobal.pyrange(LingoNumber(1), _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(2)].count):                 ef = tmp_ef                if LingoGlobal.op_eq_b(ef, _movieScript.gEEprops.empos.loch):                     txt += str(LingoGlobal.concat_space("-",_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(2)][ef],"-   "))                                    else:                    txt += str(LingoGlobal.concat_space(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(2)][ef],"    "))                                    tmp_ef = ef                            _global.member("effectOptions").text = txt                    else:            _global.member("effectOptions").text = ""                            return None            def changeoption(self):         sv = None        match _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(1)].lower():             case "delete/move":                match _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(2)][_movieScript.gEEprops.empos.loch].lower():                     case "delete":                        _movieScript.gEEprops.effects.deleteat(_movieScript.gEEprops.editeffect)
                        self.initmode("chooseEffect")
                        _movieScript.gEEprops.editeffect = _movieScript.gEEprops.effects.count                        self.updatealltext()                    case "move back":                        sv = _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].duplicate()                        _movieScript.gEEprops.effects.deleteat(_movieScript.gEEprops.editeffect)
                        _movieScript.gEEprops.editeffect = _movieScript.restrict(LingoGlobal.op_sub(_movieScript.gEEprops.editeffect,LingoNumber(1)),LingoNumber(1),_movieScript.gEEprops.effects.count)                        _movieScript.gEEprops.effects.addat(_movieScript.gEEprops.editeffect,sv)
                        _movieScript.gEEprops.selectediteffect = _movieScript.gEEprops.editeffect                        self.updateeffectsl(LingoNumber(0))                    case "move forth":                        sv = _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].duplicate()                        _movieScript.gEEprops.effects.deleteat(_movieScript.gEEprops.editeffect)
                        _movieScript.gEEprops.editeffect = _movieScript.restrict(LingoGlobal.op_add(_movieScript.gEEprops.editeffect,LingoNumber(1)),LingoNumber(1),LingoGlobal.op_add(_movieScript.gEEprops.effects.count,LingoNumber(1)))                        _movieScript.gEEprops.effects.addat(_movieScript.gEEprops.editeffect,sv)
                        _movieScript.gEEprops.selectediteffect = _movieScript.gEEprops.editeffect                        self.updateeffectsl(LingoNumber(0))                                                case "seed":                if (LingoGlobal.ToBool(_global._key.keypressed("A")) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):                     _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)] = LingoGlobal.op_sub(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)],LingoNumber(1))                                    if (LingoGlobal.ToBool(_global._key.keypressed("D")) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):                     _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)] = LingoGlobal.op_add(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)],LingoNumber(1))                                    _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)] = _movieScript.restrict(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)],LingoNumber(1),LingoNumber(500))                            case "leaf density":                if (LingoGlobal.ToBool(_global._key.keypressed("A")) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):                     _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)] = LingoGlobal.op_sub(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)],LingoNumber(1))                                    if (LingoGlobal.ToBool(_global._key.keypressed("D")) and LingoGlobal.op_ne_b(_global._movie.window.sizestate, minimized)):                     _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)] = LingoGlobal.op_add(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)],LingoNumber(1))                                    _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)] = _movieScript.restrict(_movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)],LingoNumber(1),LingoNumber(100))                            case "color" | "detail color" | "fatness" | "size" | "layers" | "3d" | "ceramic color" | "effect color" | "variation" | "color 1" | "color 2" | "affect gradients and decals" | "rotate" | "color intensity" | "fruit density":                _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(3)] = _movieScript.gEEprops.effects[_movieScript.gEEprops.editeffect].options[_movieScript.gEEprops.empos.locv][LingoNumber(2)][_movieScript.gEEprops.empos.loch]                                    self.updateediteffect(LingoGlobal.point(LingoNumber(0),LingoNumber(0)))        return None            def updatealltext(self):         self.updateeffectsl(LingoNumber(0))
        self.updateediteffect(LingoGlobal.point(LingoNumber(0),LingoNumber(0)))
        self.updateeffectsmenu(LingoGlobal.point(LingoNumber(0),LingoNumber(0)))        return None            